
IntelliRoast-Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004dc4  08004dc4  00014dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08004dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003edc  2000006c  08004e38  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003f48  08004e38  00023f48  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c3d8  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000330f  00000000  00000000  0003c46d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ad79  00000000  00000000  0003f77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010a0  00000000  00000000  0004a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001060  00000000  00000000  0004b598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000079ac  00000000  00000000  0004c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005600  00000000  00000000  00053fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000595a4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000031a8  00000000  00000000  00059620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b30 	.word	0x08004b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004b30 	.word	0x08004b30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f092 0f00 	teq	r2, #0
 80004ca:	bf14      	ite	ne
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e720      	b.n	8000324 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aedc 	beq.w	80002d2 <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6c1      	b.n	80002d2 <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_frsub>:
 80009c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009c8:	e002      	b.n	80009d0 <__addsf3>
 80009ca:	bf00      	nop

080009cc <__aeabi_fsub>:
 80009cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d0 <__addsf3>:
 80009d0:	0042      	lsls	r2, r0, #1
 80009d2:	bf1f      	itttt	ne
 80009d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009d8:	ea92 0f03 	teqne	r2, r3
 80009dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009e4:	d06a      	beq.n	8000abc <__addsf3+0xec>
 80009e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ee:	bfc1      	itttt	gt
 80009f0:	18d2      	addgt	r2, r2, r3
 80009f2:	4041      	eorgt	r1, r0
 80009f4:	4048      	eorgt	r0, r1
 80009f6:	4041      	eorgt	r1, r0
 80009f8:	bfb8      	it	lt
 80009fa:	425b      	neglt	r3, r3
 80009fc:	2b19      	cmp	r3, #25
 80009fe:	bf88      	it	hi
 8000a00:	4770      	bxhi	lr
 8000a02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a0e:	bf18      	it	ne
 8000a10:	4240      	negne	r0, r0
 8000a12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a1e:	bf18      	it	ne
 8000a20:	4249      	negne	r1, r1
 8000a22:	ea92 0f03 	teq	r2, r3
 8000a26:	d03f      	beq.n	8000aa8 <__addsf3+0xd8>
 8000a28:	f1a2 0201 	sub.w	r2, r2, #1
 8000a2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a30:	eb10 000c 	adds.w	r0, r0, ip
 8000a34:	f1c3 0320 	rsb	r3, r3, #32
 8000a38:	fa01 f103 	lsl.w	r1, r1, r3
 8000a3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a40:	d502      	bpl.n	8000a48 <__addsf3+0x78>
 8000a42:	4249      	negs	r1, r1
 8000a44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a4c:	d313      	bcc.n	8000a76 <__addsf3+0xa6>
 8000a4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a52:	d306      	bcc.n	8000a62 <__addsf3+0x92>
 8000a54:	0840      	lsrs	r0, r0, #1
 8000a56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a5a:	f102 0201 	add.w	r2, r2, #1
 8000a5e:	2afe      	cmp	r2, #254	; 0xfe
 8000a60:	d251      	bcs.n	8000b06 <__addsf3+0x136>
 8000a62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a6a:	bf08      	it	eq
 8000a6c:	f020 0001 	biceq.w	r0, r0, #1
 8000a70:	ea40 0003 	orr.w	r0, r0, r3
 8000a74:	4770      	bx	lr
 8000a76:	0049      	lsls	r1, r1, #1
 8000a78:	eb40 0000 	adc.w	r0, r0, r0
 8000a7c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a80:	f1a2 0201 	sub.w	r2, r2, #1
 8000a84:	d1ed      	bne.n	8000a62 <__addsf3+0x92>
 8000a86:	fab0 fc80 	clz	ip, r0
 8000a8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a96:	bfaa      	itet	ge
 8000a98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a9c:	4252      	neglt	r2, r2
 8000a9e:	4318      	orrge	r0, r3
 8000aa0:	bfbc      	itt	lt
 8000aa2:	40d0      	lsrlt	r0, r2
 8000aa4:	4318      	orrlt	r0, r3
 8000aa6:	4770      	bx	lr
 8000aa8:	f092 0f00 	teq	r2, #0
 8000aac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab0:	bf06      	itte	eq
 8000ab2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ab6:	3201      	addeq	r2, #1
 8000ab8:	3b01      	subne	r3, #1
 8000aba:	e7b5      	b.n	8000a28 <__addsf3+0x58>
 8000abc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ac4:	bf18      	it	ne
 8000ac6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aca:	d021      	beq.n	8000b10 <__addsf3+0x140>
 8000acc:	ea92 0f03 	teq	r2, r3
 8000ad0:	d004      	beq.n	8000adc <__addsf3+0x10c>
 8000ad2:	f092 0f00 	teq	r2, #0
 8000ad6:	bf08      	it	eq
 8000ad8:	4608      	moveq	r0, r1
 8000ada:	4770      	bx	lr
 8000adc:	ea90 0f01 	teq	r0, r1
 8000ae0:	bf1c      	itt	ne
 8000ae2:	2000      	movne	r0, #0
 8000ae4:	4770      	bxne	lr
 8000ae6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aea:	d104      	bne.n	8000af6 <__addsf3+0x126>
 8000aec:	0040      	lsls	r0, r0, #1
 8000aee:	bf28      	it	cs
 8000af0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000afa:	bf3c      	itt	cc
 8000afc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b00:	4770      	bxcc	lr
 8000b02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	4770      	bx	lr
 8000b10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b14:	bf16      	itet	ne
 8000b16:	4608      	movne	r0, r1
 8000b18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b1c:	4601      	movne	r1, r0
 8000b1e:	0242      	lsls	r2, r0, #9
 8000b20:	bf06      	itte	eq
 8000b22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b26:	ea90 0f01 	teqeq	r0, r1
 8000b2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_ui2f>:
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	e004      	b.n	8000b40 <__aeabi_i2f+0x8>
 8000b36:	bf00      	nop

08000b38 <__aeabi_i2f>:
 8000b38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b3c:	bf48      	it	mi
 8000b3e:	4240      	negmi	r0, r0
 8000b40:	ea5f 0c00 	movs.w	ip, r0
 8000b44:	bf08      	it	eq
 8000b46:	4770      	bxeq	lr
 8000b48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b4c:	4601      	mov	r1, r0
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	e01c      	b.n	8000b8e <__aeabi_l2f+0x2a>

08000b54 <__aeabi_ul2f>:
 8000b54:	ea50 0201 	orrs.w	r2, r0, r1
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	e00a      	b.n	8000b78 <__aeabi_l2f+0x14>
 8000b62:	bf00      	nop

08000b64 <__aeabi_l2f>:
 8000b64:	ea50 0201 	orrs.w	r2, r0, r1
 8000b68:	bf08      	it	eq
 8000b6a:	4770      	bxeq	lr
 8000b6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__aeabi_l2f+0x14>
 8000b72:	4240      	negs	r0, r0
 8000b74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b78:	ea5f 0c01 	movs.w	ip, r1
 8000b7c:	bf02      	ittt	eq
 8000b7e:	4684      	moveq	ip, r0
 8000b80:	4601      	moveq	r1, r0
 8000b82:	2000      	moveq	r0, #0
 8000b84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b88:	bf08      	it	eq
 8000b8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b92:	fabc f28c 	clz	r2, ip
 8000b96:	3a08      	subs	r2, #8
 8000b98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b9c:	db10      	blt.n	8000bc0 <__aeabi_l2f+0x5c>
 8000b9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ba8:	f1c2 0220 	rsb	r2, r2, #32
 8000bac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb4:	eb43 0002 	adc.w	r0, r3, r2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f102 0220 	add.w	r2, r2, #32
 8000bc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bc8:	f1c2 0220 	rsb	r2, r2, #32
 8000bcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bd4:	eb43 0002 	adc.w	r0, r3, r2
 8000bd8:	bf08      	it	eq
 8000bda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b97a 	b.w	8000eec <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460e      	mov	r6, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9d08      	ldr	r5, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d150      	bne.n	8000cc2 <__udivmoddi4+0xb2>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96c      	bls.n	8000d00 <__udivmoddi4+0xf0>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0c20 	rsb	ip, lr, #32
 8000c34:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c40:	ea4c 0c06 	orr.w	ip, ip, r6
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	0c3a      	lsrs	r2, r7, #16
 8000c4a:	fbbc f9f2 	udiv	r9, ip, r2
 8000c4e:	b2bb      	uxth	r3, r7
 8000c50:	fb02 cc19 	mls	ip, r2, r9, ip
 8000c54:	fb09 fa03 	mul.w	sl, r9, r3
 8000c58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000c5c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000c60:	45b2      	cmp	sl, r6
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x6a>
 8000c64:	19f6      	adds	r6, r6, r7
 8000c66:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8000c6a:	f080 8125 	bcs.w	8000eb8 <__udivmoddi4+0x2a8>
 8000c6e:	45b2      	cmp	sl, r6
 8000c70:	f240 8122 	bls.w	8000eb8 <__udivmoddi4+0x2a8>
 8000c74:	f1a9 0902 	sub.w	r9, r9, #2
 8000c78:	443e      	add	r6, r7
 8000c7a:	eba6 060a 	sub.w	r6, r6, sl
 8000c7e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000c82:	fb02 6610 	mls	r6, r2, r0, r6
 8000c86:	fb00 f303 	mul.w	r3, r0, r3
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x98>
 8000c94:	19e4      	adds	r4, r4, r7
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 810b 	bcs.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	f240 8108 	bls.w	8000eb4 <__udivmoddi4+0x2a4>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	443c      	add	r4, r7
 8000ca8:	2100      	movs	r1, #0
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d062      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cba:	602c      	str	r4, [r5, #0]
 8000cbc:	606b      	str	r3, [r5, #4]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0xc6>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d055      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	f040 808f 	bne.w	8000dfe <__udivmoddi4+0x1ee>
 8000ce0:	42b3      	cmp	r3, r6
 8000ce2:	d302      	bcc.n	8000cea <__udivmoddi4+0xda>
 8000ce4:	4282      	cmp	r2, r0
 8000ce6:	f200 80fc 	bhi.w	8000ee2 <__udivmoddi4+0x2d2>
 8000cea:	1a84      	subs	r4, r0, r2
 8000cec:	eb66 0603 	sbc.w	r6, r6, r3
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d040      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cf8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d00:	b912      	cbnz	r2, 8000d08 <__udivmoddi4+0xf8>
 8000d02:	2701      	movs	r7, #1
 8000d04:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d08:	fab7 fe87 	clz	lr, r7
 8000d0c:	f1be 0f00 	cmp.w	lr, #0
 8000d10:	d135      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d12:	2101      	movs	r1, #1
 8000d14:	1bf6      	subs	r6, r6, r7
 8000d16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000d1a:	fa1f f887 	uxth.w	r8, r7
 8000d1e:	fbb6 f2fc 	udiv	r2, r6, ip
 8000d22:	fb0c 6612 	mls	r6, ip, r2, r6
 8000d26:	fb08 f002 	mul.w	r0, r8, r2
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000d30:	42b0      	cmp	r0, r6
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19f6      	adds	r6, r6, r7
 8000d36:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42b0      	cmp	r0, r6
 8000d3e:	f200 80d2 	bhi.w	8000ee6 <__udivmoddi4+0x2d6>
 8000d42:	461a      	mov	r2, r3
 8000d44:	1a36      	subs	r6, r6, r0
 8000d46:	fbb6 f0fc 	udiv	r0, r6, ip
 8000d4a:	fb0c 6610 	mls	r6, ip, r0, r6
 8000d4e:	fb08 f800 	mul.w	r8, r8, r0
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000d58:	45a0      	cmp	r8, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	f200 80b9 	bhi.w	8000edc <__udivmoddi4+0x2cc>
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	eba4 0408 	sub.w	r4, r4, r8
 8000d70:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d74:	e79c      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d82:	f1ce 0320 	rsb	r3, lr, #32
 8000d86:	fa26 f203 	lsr.w	r2, r6, r3
 8000d8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000d8e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000d92:	fa1f f887 	uxth.w	r8, r7
 8000d96:	fb0c 2211 	mls	r2, ip, r1, r2
 8000d9a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d9e:	fa20 f303 	lsr.w	r3, r0, r3
 8000da2:	fb01 f908 	mul.w	r9, r1, r8
 8000da6:	4333      	orrs	r3, r6
 8000da8:	0c1e      	lsrs	r6, r3, #16
 8000daa:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000dae:	45b1      	cmp	r9, r6
 8000db0:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x1ba>
 8000db6:	19f6      	adds	r6, r6, r7
 8000db8:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000dbc:	f080 808c 	bcs.w	8000ed8 <__udivmoddi4+0x2c8>
 8000dc0:	45b1      	cmp	r9, r6
 8000dc2:	f240 8089 	bls.w	8000ed8 <__udivmoddi4+0x2c8>
 8000dc6:	3902      	subs	r1, #2
 8000dc8:	443e      	add	r6, r7
 8000dca:	eba6 0609 	sub.w	r6, r6, r9
 8000dce:	fbb6 f0fc 	udiv	r0, r6, ip
 8000dd2:	fb0c 6210 	mls	r2, ip, r0, r6
 8000dd6:	fb00 f908 	mul.w	r9, r0, r8
 8000dda:	b29e      	uxth	r6, r3
 8000ddc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000de0:	45b1      	cmp	r9, r6
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x1e4>
 8000de4:	19f6      	adds	r6, r6, r7
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dea:	d271      	bcs.n	8000ed0 <__udivmoddi4+0x2c0>
 8000dec:	45b1      	cmp	r9, r6
 8000dee:	d96f      	bls.n	8000ed0 <__udivmoddi4+0x2c0>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443e      	add	r6, r7
 8000df4:	eba6 0609 	sub.w	r6, r6, r9
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	e78f      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000dfe:	f1c1 0720 	rsb	r7, r1, #32
 8000e02:	fa22 f807 	lsr.w	r8, r2, r7
 8000e06:	408b      	lsls	r3, r1
 8000e08:	ea48 0303 	orr.w	r3, r8, r3
 8000e0c:	fa26 f407 	lsr.w	r4, r6, r7
 8000e10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000e14:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e18:	fa1f fc83 	uxth.w	ip, r3
 8000e1c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e20:	408e      	lsls	r6, r1
 8000e22:	fa20 f807 	lsr.w	r8, r0, r7
 8000e26:	fb09 fa0c 	mul.w	sl, r9, ip
 8000e2a:	ea48 0806 	orr.w	r8, r8, r6
 8000e2e:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000e32:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000e36:	45a2      	cmp	sl, r4
 8000e38:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3c:	fa00 f601 	lsl.w	r6, r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x244>
 8000e42:	18e4      	adds	r4, r4, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e48:	d244      	bcs.n	8000ed4 <__udivmoddi4+0x2c4>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d942      	bls.n	8000ed4 <__udivmoddi4+0x2c4>
 8000e4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e52:	441c      	add	r4, r3
 8000e54:	eba4 040a 	sub.w	r4, r4, sl
 8000e58:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e5c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e60:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e64:	fa1f f888 	uxth.w	r8, r8
 8000e68:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000e6c:	45a4      	cmp	ip, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x270>
 8000e70:	18e4      	adds	r4, r4, r3
 8000e72:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2bc>
 8000e78:	45a4      	cmp	ip, r4
 8000e7a:	d927      	bls.n	8000ecc <__udivmoddi4+0x2bc>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	441c      	add	r4, r3
 8000e80:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e84:	fba0 8902 	umull	r8, r9, r0, r2
 8000e88:	eba4 0c0c 	sub.w	ip, r4, ip
 8000e8c:	45cc      	cmp	ip, r9
 8000e8e:	46c2      	mov	sl, r8
 8000e90:	46ce      	mov	lr, r9
 8000e92:	d315      	bcc.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e94:	d012      	beq.n	8000ebc <__udivmoddi4+0x2ac>
 8000e96:	b155      	cbz	r5, 8000eae <__udivmoddi4+0x29e>
 8000e98:	ebb6 030a 	subs.w	r3, r6, sl
 8000e9c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000ea0:	fa06 f707 	lsl.w	r7, r6, r7
 8000ea4:	40cb      	lsrs	r3, r1
 8000ea6:	431f      	orrs	r7, r3
 8000ea8:	40ce      	lsrs	r6, r1
 8000eaa:	602f      	str	r7, [r5, #0]
 8000eac:	606e      	str	r6, [r5, #4]
 8000eae:	2100      	movs	r1, #0
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6f7      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000eb8:	4689      	mov	r9, r1
 8000eba:	e6de      	b.n	8000c7a <__udivmoddi4+0x6a>
 8000ebc:	4546      	cmp	r6, r8
 8000ebe:	d2ea      	bcs.n	8000e96 <__udivmoddi4+0x286>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 0e03 	sbc.w	lr, r9, r3
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7e4      	b.n	8000e96 <__udivmoddi4+0x286>
 8000ecc:	4670      	mov	r0, lr
 8000ece:	e7d7      	b.n	8000e80 <__udivmoddi4+0x270>
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	e78f      	b.n	8000df4 <__udivmoddi4+0x1e4>
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	e7bd      	b.n	8000e54 <__udivmoddi4+0x244>
 8000ed8:	4611      	mov	r1, r2
 8000eda:	e776      	b.n	8000dca <__udivmoddi4+0x1ba>
 8000edc:	3802      	subs	r0, #2
 8000ede:	443c      	add	r4, r7
 8000ee0:	e744      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	e706      	b.n	8000cf4 <__udivmoddi4+0xe4>
 8000ee6:	3a02      	subs	r2, #2
 8000ee8:	443e      	add	r6, r7
 8000eea:	e72b      	b.n	8000d44 <__udivmoddi4+0x134>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x30>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000efa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f02:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f817 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f003 f912 	bl	800413c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f003 f818 	bl	8003f4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	bd08      	pop	{r3, pc}
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f24:	4a02      	ldr	r2, [pc, #8]	; (8000f30 <HAL_IncTick+0xc>)
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20003de4 	.word	0x20003de4

08000f34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f34:	4b01      	ldr	r3, [pc, #4]	; (8000f3c <HAL_GetTick+0x8>)
 8000f36:	6818      	ldr	r0, [r3, #0]
}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20003de4 	.word	0x20003de4

08000f40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f42:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f48:	041b      	lsls	r3, r3, #16
 8000f4a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f4c:	0200      	lsls	r0, r0, #8
 8000f4e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f52:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000f54:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000f58:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f5c:	60d0      	str	r0, [r2, #12]
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f64:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_NVIC_SetPriority+0x5c>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6e:	f1c3 0407 	rsb	r4, r3, #7
 8000f72:	2c04      	cmp	r4, #4
 8000f74:	bf28      	it	cs
 8000f76:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f78:	1d1d      	adds	r5, r3, #4
 8000f7a:	2d06      	cmp	r5, #6
 8000f7c:	d917      	bls.n	8000fae <HAL_NVIC_SetPriority+0x4a>
 8000f7e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	2501      	movs	r5, #1
 8000f82:	fa05 f404 	lsl.w	r4, r5, r4
 8000f86:	3c01      	subs	r4, #1
 8000f88:	4021      	ands	r1, r4
 8000f8a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f90:	3b01      	subs	r3, #1
 8000f92:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000f96:	2800      	cmp	r0, #0
 8000f98:	db0b      	blt.n	8000fb2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	0109      	lsls	r1, r1, #4
 8000f9c:	b2c9      	uxtb	r1, r1
 8000f9e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000fa2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000fa6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000faa:	bc30      	pop	{r4, r5}
 8000fac:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e7e6      	b.n	8000f80 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	f000 000f 	and.w	r0, r0, #15
 8000fb6:	0109      	lsls	r1, r1, #4
 8000fb8:	b2c9      	uxtb	r1, r1
 8000fba:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <HAL_NVIC_SetPriority+0x60>)
 8000fbc:	5419      	strb	r1, [r3, r0]
 8000fbe:	e7f4      	b.n	8000faa <HAL_NVIC_SetPriority+0x46>
 8000fc0:	e000ed00 	.word	0xe000ed00
 8000fc4:	e000ed14 	.word	0xe000ed14

08000fc8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fc8:	0942      	lsrs	r2, r0, #5
 8000fca:	f000 001f 	and.w	r0, r0, #31
 8000fce:	2301      	movs	r3, #1
 8000fd0:	fa03 f000 	lsl.w	r0, r3, r0
 8000fd4:	4b01      	ldr	r3, [pc, #4]	; (8000fdc <HAL_NVIC_EnableIRQ+0x14>)
 8000fd6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fe6:	d20a      	bcs.n	8000ffe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_SYSTICK_Config+0x24>)
 8000fea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	21f0      	movs	r1, #240	; 0xf0
 8000fee:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_SYSTICK_Config+0x28>)
 8000ff0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800100c:	2804      	cmp	r0, #4
 800100e:	d005      	beq.n	800101c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001010:	4a05      	ldr	r2, [pc, #20]	; (8001028 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800101c:	4a02      	ldr	r2, [pc, #8]	; (8001028 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4770      	bx	lr
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102e:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001030:	2400      	movs	r4, #0
 8001032:	e04b      	b.n	80010cc <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001034:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8001038:	f10e 0e08 	add.w	lr, lr, #8
 800103c:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001040:	f004 0607 	and.w	r6, r4, #7
 8001044:	00b6      	lsls	r6, r6, #2
 8001046:	270f      	movs	r7, #15
 8001048:	40b7      	lsls	r7, r6
 800104a:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800104e:	690f      	ldr	r7, [r1, #16]
 8001050:	fa07 f606 	lsl.w	r6, r7, r6
 8001054:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001056:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 800105a:	e046      	b.n	80010ea <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105c:	2608      	movs	r6, #8
 800105e:	e000      	b.n	8001062 <HAL_GPIO_Init+0x36>
 8001060:	2600      	movs	r6, #0
 8001062:	fa06 f60e 	lsl.w	r6, r6, lr
 8001066:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	3302      	adds	r3, #2
 800106a:	4e61      	ldr	r6, [pc, #388]	; (80011f0 <HAL_GPIO_Init+0x1c4>)
 800106c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001070:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 8001072:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001074:	43eb      	mvns	r3, r5
 8001076:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107a:	684f      	ldr	r7, [r1, #4]
 800107c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001080:	d001      	beq.n	8001086 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8001082:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8001086:	4a5b      	ldr	r2, [pc, #364]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 8001088:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800108a:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800108c:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001090:	684f      	ldr	r7, [r1, #4]
 8001092:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001096:	d001      	beq.n	800109c <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8001098:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 800109c:	4a55      	ldr	r2, [pc, #340]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 800109e:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a0:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a6:	684f      	ldr	r7, [r1, #4]
 80010a8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80010ac:	d001      	beq.n	80010b2 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80010ae:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 80010b2:	4a50      	ldr	r2, [pc, #320]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 80010b4:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80010b6:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ba:	684e      	ldr	r6, [r1, #4]
 80010bc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80010c0:	d001      	beq.n	80010c6 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 80010c2:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 80010c6:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 80010c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	3401      	adds	r4, #1
 80010cc:	2c0f      	cmp	r4, #15
 80010ce:	f200 808c 	bhi.w	80011ea <HAL_GPIO_Init+0x1be>
    ioposition = 0x01U << position;
 80010d2:	2301      	movs	r3, #1
 80010d4:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	680a      	ldr	r2, [r1, #0]
 80010d8:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 80010dc:	42ab      	cmp	r3, r5
 80010de:	d1f4      	bne.n	80010ca <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	684a      	ldr	r2, [r1, #4]
 80010e2:	2a02      	cmp	r2, #2
 80010e4:	d0a6      	beq.n	8001034 <HAL_GPIO_Init+0x8>
 80010e6:	2a12      	cmp	r2, #18
 80010e8:	d0a4      	beq.n	8001034 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80010ea:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ec:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f20e 	lsl.w	r2, r2, lr
 80010f6:	43d2      	mvns	r2, r2
 80010f8:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fa:	684f      	ldr	r7, [r1, #4]
 80010fc:	f007 0703 	and.w	r7, r7, #3
 8001100:	fa07 f70e 	lsl.w	r7, r7, lr
 8001104:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001106:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001108:	684e      	ldr	r6, [r1, #4]
 800110a:	1e77      	subs	r7, r6, #1
 800110c:	2f01      	cmp	r7, #1
 800110e:	d903      	bls.n	8001118 <HAL_GPIO_Init+0xec>
 8001110:	2e11      	cmp	r6, #17
 8001112:	d001      	beq.n	8001118 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001114:	2e12      	cmp	r6, #18
 8001116:	d10f      	bne.n	8001138 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8001118:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800111a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111c:	68cf      	ldr	r7, [r1, #12]
 800111e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001122:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001124:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001126:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001128:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800112c:	684e      	ldr	r6, [r1, #4]
 800112e:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001132:	40a6      	lsls	r6, r4
 8001134:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001136:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001138:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113a:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	688b      	ldr	r3, [r1, #8]
 800113e:	fa03 f30e 	lsl.w	r3, r3, lr
 8001142:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8001144:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001146:	684b      	ldr	r3, [r1, #4]
 8001148:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800114c:	d0bd      	beq.n	80010ca <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HAL_GPIO_Init+0x1cc>)
 8001154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	08a3      	lsrs	r3, r4, #2
 8001168:	1c9e      	adds	r6, r3, #2
 800116a:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <HAL_GPIO_Init+0x1c4>)
 800116c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03)));
 8001170:	f004 0603 	and.w	r6, r4, #3
 8001174:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001178:	260f      	movs	r6, #15
 800117a:	fa06 f60e 	lsl.w	r6, r6, lr
 800117e:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	4f1e      	ldr	r7, [pc, #120]	; (80011fc <HAL_GPIO_Init+0x1d0>)
 8001184:	42b8      	cmp	r0, r7
 8001186:	f43f af6b 	beq.w	8001060 <HAL_GPIO_Init+0x34>
 800118a:	4e1d      	ldr	r6, [pc, #116]	; (8001200 <HAL_GPIO_Init+0x1d4>)
 800118c:	42b0      	cmp	r0, r6
 800118e:	d01e      	beq.n	80011ce <HAL_GPIO_Init+0x1a2>
 8001190:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001194:	42b0      	cmp	r0, r6
 8001196:	d01c      	beq.n	80011d2 <HAL_GPIO_Init+0x1a6>
 8001198:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800119c:	42b0      	cmp	r0, r6
 800119e:	d01a      	beq.n	80011d6 <HAL_GPIO_Init+0x1aa>
 80011a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011a4:	42b0      	cmp	r0, r6
 80011a6:	d018      	beq.n	80011da <HAL_GPIO_Init+0x1ae>
 80011a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011ac:	42b0      	cmp	r0, r6
 80011ae:	d016      	beq.n	80011de <HAL_GPIO_Init+0x1b2>
 80011b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011b4:	42b0      	cmp	r0, r6
 80011b6:	d014      	beq.n	80011e2 <HAL_GPIO_Init+0x1b6>
 80011b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011bc:	42b0      	cmp	r0, r6
 80011be:	d012      	beq.n	80011e6 <HAL_GPIO_Init+0x1ba>
 80011c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011c4:	42b0      	cmp	r0, r6
 80011c6:	f43f af49 	beq.w	800105c <HAL_GPIO_Init+0x30>
 80011ca:	2609      	movs	r6, #9
 80011cc:	e749      	b.n	8001062 <HAL_GPIO_Init+0x36>
 80011ce:	2601      	movs	r6, #1
 80011d0:	e747      	b.n	8001062 <HAL_GPIO_Init+0x36>
 80011d2:	2602      	movs	r6, #2
 80011d4:	e745      	b.n	8001062 <HAL_GPIO_Init+0x36>
 80011d6:	2603      	movs	r6, #3
 80011d8:	e743      	b.n	8001062 <HAL_GPIO_Init+0x36>
 80011da:	2604      	movs	r6, #4
 80011dc:	e741      	b.n	8001062 <HAL_GPIO_Init+0x36>
 80011de:	2605      	movs	r6, #5
 80011e0:	e73f      	b.n	8001062 <HAL_GPIO_Init+0x36>
 80011e2:	2606      	movs	r6, #6
 80011e4:	e73d      	b.n	8001062 <HAL_GPIO_Init+0x36>
 80011e6:	2607      	movs	r6, #7
 80011e8:	e73b      	b.n	8001062 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 80011ea:	b003      	add	sp, #12
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40013c00 	.word	0x40013c00
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400

08001204 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001204:	b912      	cbnz	r2, 800120c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	0409      	lsls	r1, r1, #16
 8001208:	6181      	str	r1, [r0, #24]
 800120a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800120c:	6181      	str	r1, [r0, #24]
 800120e:	4770      	bx	lr

08001210 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001210:	6943      	ldr	r3, [r0, #20]
 8001212:	4059      	eors	r1, r3
 8001214:	6141      	str	r1, [r0, #20]
 8001216:	4770      	bx	lr

08001218 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001218:	2800      	cmp	r0, #0
 800121a:	f000 8197 	beq.w	800154c <HAL_RCC_OscConfig+0x334>
{
 800121e:	b530      	push	{r4, r5, lr}
 8001220:	b083      	sub	sp, #12
 8001222:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001224:	6803      	ldr	r3, [r0, #0]
 8001226:	f013 0f01 	tst.w	r3, #1
 800122a:	d02e      	beq.n	800128a <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122c:	4ba3      	ldr	r3, [pc, #652]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b04      	cmp	r3, #4
 8001236:	d01f      	beq.n	8001278 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001238:	4ba0      	ldr	r3, [pc, #640]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001240:	2b08      	cmp	r3, #8
 8001242:	d014      	beq.n	800126e <HAL_RCC_OscConfig+0x56>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001244:	7922      	ldrb	r2, [r4, #4]
 8001246:	4b9e      	ldr	r3, [pc, #632]	; (80014c0 <HAL_RCC_OscConfig+0x2a8>)
 8001248:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800124a:	6863      	ldr	r3, [r4, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d040      	beq.n	80012d2 <HAL_RCC_OscConfig+0xba>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fe70 	bl	8000f34 <HAL_GetTick>
 8001254:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b99      	ldr	r3, [pc, #612]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800125e:	d114      	bne.n	800128a <HAL_RCC_OscConfig+0x72>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fe68 	bl	8000f34 <HAL_GetTick>
 8001264:	1b40      	subs	r0, r0, r5
 8001266:	2864      	cmp	r0, #100	; 0x64
 8001268:	d9f5      	bls.n	8001256 <HAL_RCC_OscConfig+0x3e>
          {
            return HAL_TIMEOUT;
 800126a:	2003      	movs	r0, #3
 800126c:	e173      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b93      	ldr	r3, [pc, #588]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001276:	d0e5      	beq.n	8001244 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b90      	ldr	r3, [pc, #576]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001280:	d003      	beq.n	800128a <HAL_RCC_OscConfig+0x72>
 8001282:	6863      	ldr	r3, [r4, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 8163 	beq.w	8001550 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	f013 0f02 	tst.w	r3, #2
 8001290:	d04b      	beq.n	800132a <HAL_RCC_OscConfig+0x112>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001292:	4b8a      	ldr	r3, [pc, #552]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f013 0f0c 	tst.w	r3, #12
 800129a:	d02e      	beq.n	80012fa <HAL_RCC_OscConfig+0xe2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129c:	4b87      	ldr	r3, [pc, #540]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d023      	beq.n	80012f0 <HAL_RCC_OscConfig+0xd8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a8:	68e3      	ldr	r3, [r4, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d064      	beq.n	8001378 <HAL_RCC_OscConfig+0x160>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ae:	2201      	movs	r2, #1
 80012b0:	4b84      	ldr	r3, [pc, #528]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fe3e 	bl	8000f34 <HAL_GetTick>
 80012b8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	4b80      	ldr	r3, [pc, #512]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f013 0f02 	tst.w	r3, #2
 80012c2:	d14a      	bne.n	800135a <HAL_RCC_OscConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fe36 	bl	8000f34 <HAL_GetTick>
 80012c8:	1b40      	subs	r0, r0, r5
 80012ca:	2802      	cmp	r0, #2
 80012cc:	d9f5      	bls.n	80012ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 80012ce:	2003      	movs	r0, #3
 80012d0:	e141      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
        tickstart = HAL_GetTick();
 80012d2:	f7ff fe2f 	bl	8000f34 <HAL_GetTick>
 80012d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d8:	4b78      	ldr	r3, [pc, #480]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012e0:	d0d3      	beq.n	800128a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e2:	f7ff fe27 	bl	8000f34 <HAL_GetTick>
 80012e6:	1b40      	subs	r0, r0, r5
 80012e8:	2864      	cmp	r0, #100	; 0x64
 80012ea:	d9f5      	bls.n	80012d8 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80012ec:	2003      	movs	r0, #3
 80012ee:	e132      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f0:	4b72      	ldr	r3, [pc, #456]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012f8:	d1d6      	bne.n	80012a8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	4b70      	ldr	r3, [pc, #448]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f013 0f02 	tst.w	r3, #2
 8001302:	d004      	beq.n	800130e <HAL_RCC_OscConfig+0xf6>
 8001304:	68e3      	ldr	r3, [r4, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d001      	beq.n	800130e <HAL_RCC_OscConfig+0xf6>
        return HAL_ERROR;
 800130a:	2001      	movs	r0, #1
 800130c:	e123      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	486b      	ldr	r0, [pc, #428]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 8001310:	6803      	ldr	r3, [r0, #0]
 8001312:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001316:	6921      	ldr	r1, [r4, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	22f8      	movs	r2, #248	; 0xf8
 800131a:	fa92 f2a2 	rbit	r2, r2
 800131e:	fab2 f282 	clz	r2, r2
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	4313      	orrs	r3, r2
 8001328:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	f013 0f08 	tst.w	r3, #8
 8001330:	d046      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001332:	6963      	ldr	r3, [r4, #20]
 8001334:	b393      	cbz	r3, 800139c <HAL_RCC_OscConfig+0x184>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001336:	2201      	movs	r2, #1
 8001338:	4b63      	ldr	r3, [pc, #396]	; (80014c8 <HAL_RCC_OscConfig+0x2b0>)
 800133a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133c:	f7ff fdfa 	bl	8000f34 <HAL_GetTick>
 8001340:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	4b5e      	ldr	r3, [pc, #376]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 8001344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001346:	f013 0f02 	tst.w	r3, #2
 800134a:	d139      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1a8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fdf2 	bl	8000f34 <HAL_GetTick>
 8001350:	1b40      	subs	r0, r0, r5
 8001352:	2802      	cmp	r0, #2
 8001354:	d9f5      	bls.n	8001342 <HAL_RCC_OscConfig+0x12a>
        {
          return HAL_TIMEOUT;
 8001356:	2003      	movs	r0, #3
 8001358:	e0fd      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4858      	ldr	r0, [pc, #352]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 800135c:	6803      	ldr	r3, [r0, #0]
 800135e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001362:	6921      	ldr	r1, [r4, #16]
 8001364:	22f8      	movs	r2, #248	; 0xf8
 8001366:	fa92 f2a2 	rbit	r2, r2
 800136a:	fab2 f282 	clz	r2, r2
 800136e:	fa01 f202 	lsl.w	r2, r1, r2
 8001372:	4313      	orrs	r3, r2
 8001374:	6003      	str	r3, [r0, #0]
 8001376:	e7d8      	b.n	800132a <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_HSI_DISABLE();
 8001378:	2200      	movs	r2, #0
 800137a:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800137e:	f7ff fdd9 	bl	8000f34 <HAL_GetTick>
 8001382:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001384:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f013 0f02 	tst.w	r3, #2
 800138c:	d0cd      	beq.n	800132a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fdd1 	bl	8000f34 <HAL_GetTick>
 8001392:	1b40      	subs	r0, r0, r5
 8001394:	2802      	cmp	r0, #2
 8001396:	d9f5      	bls.n	8001384 <HAL_RCC_OscConfig+0x16c>
            return HAL_TIMEOUT;
 8001398:	2003      	movs	r0, #3
 800139a:	e0dc      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800139c:	2200      	movs	r2, #0
 800139e:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <HAL_RCC_OscConfig+0x2b0>)
 80013a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fdc7 	bl	8000f34 <HAL_GetTick>
 80013a6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a8:	4b44      	ldr	r3, [pc, #272]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 80013aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ac:	f013 0f02 	tst.w	r3, #2
 80013b0:	d006      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1a8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fdbf 	bl	8000f34 <HAL_GetTick>
 80013b6:	1b40      	subs	r0, r0, r5
 80013b8:	2802      	cmp	r0, #2
 80013ba:	d9f5      	bls.n	80013a8 <HAL_RCC_OscConfig+0x190>
        {
          return HAL_TIMEOUT;
 80013bc:	2003      	movs	r0, #3
 80013be:	e0ca      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	f013 0f04 	tst.w	r3, #4
 80013c6:	d11f      	bne.n	8001408 <HAL_RCC_OscConfig+0x1f0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c8:	69a3      	ldr	r3, [r4, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80c2 	beq.w	8001554 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013d0:	4a3a      	ldr	r2, [pc, #232]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 80013d2:	6892      	ldr	r2, [r2, #8]
 80013d4:	f002 020c 	and.w	r2, r2, #12
 80013d8:	2a08      	cmp	r2, #8
 80013da:	f000 80be 	beq.w	800155a <HAL_RCC_OscConfig+0x342>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d059      	beq.n	8001496 <HAL_RCC_OscConfig+0x27e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	2200      	movs	r2, #0
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <HAL_RCC_OscConfig+0x2b4>)
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fda4 	bl	8000f34 <HAL_GetTick>
 80013ec:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013f6:	f000 80a7 	beq.w	8001548 <HAL_RCC_OscConfig+0x330>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fd9b 	bl	8000f34 <HAL_GetTick>
 80013fe:	1b00      	subs	r0, r0, r4
 8001400:	2864      	cmp	r0, #100	; 0x64
 8001402:	d9f4      	bls.n	80013ee <HAL_RCC_OscConfig+0x1d6>
          {
            return HAL_TIMEOUT;
 8001404:	2003      	movs	r0, #3
 8001406:	e0a6      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 800140e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001410:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001420:	4a2b      	ldr	r2, [pc, #172]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 8001422:	6813      	ldr	r3, [r2, #0]
 8001424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001428:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800142a:	f7ff fd83 	bl	8000f34 <HAL_GetTick>
 800142e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001438:	d106      	bne.n	8001448 <HAL_RCC_OscConfig+0x230>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff fd7b 	bl	8000f34 <HAL_GetTick>
 800143e:	1b40      	subs	r0, r0, r5
 8001440:	2802      	cmp	r0, #2
 8001442:	d9f5      	bls.n	8001430 <HAL_RCC_OscConfig+0x218>
        return HAL_TIMEOUT;
 8001444:	2003      	movs	r0, #3
 8001446:	e086      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001448:	7a22      	ldrb	r2, [r4, #8]
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_RCC_OscConfig+0x2bc>)
 800144c:	701a      	strb	r2, [r3, #0]
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144e:	68a3      	ldr	r3, [r4, #8]
 8001450:	b183      	cbz	r3, 8001474 <HAL_RCC_OscConfig+0x25c>
      tickstart = HAL_GetTick();
 8001452:	f7ff fd6f 	bl	8000f34 <HAL_GetTick>
 8001456:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145c:	f013 0f02 	tst.w	r3, #2
 8001460:	d1b2      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff fd67 	bl	8000f34 <HAL_GetTick>
 8001466:	1b40      	subs	r0, r0, r5
 8001468:	f241 3388 	movw	r3, #5000	; 0x1388
 800146c:	4298      	cmp	r0, r3
 800146e:	d9f3      	bls.n	8001458 <HAL_RCC_OscConfig+0x240>
          return HAL_TIMEOUT;
 8001470:	2003      	movs	r0, #3
 8001472:	e070      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
      tickstart = HAL_GetTick();
 8001474:	f7ff fd5e 	bl	8000f34 <HAL_GetTick>
 8001478:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	f013 0f02 	tst.w	r3, #2
 8001482:	d0a1      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fd56 	bl	8000f34 <HAL_GetTick>
 8001488:	1b40      	subs	r0, r0, r5
 800148a:	f241 3388 	movw	r3, #5000	; 0x1388
 800148e:	4298      	cmp	r0, r3
 8001490:	d9f3      	bls.n	800147a <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8001492:	2003      	movs	r0, #3
 8001494:	e05f      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_PLL_DISABLE();
 8001496:	2200      	movs	r2, #0
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_RCC_OscConfig+0x2b4>)
 800149a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800149c:	f7ff fd4a 	bl	8000f34 <HAL_GetTick>
 80014a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014aa:	d015      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fd42 	bl	8000f34 <HAL_GetTick>
 80014b0:	1b40      	subs	r0, r0, r5
 80014b2:	2864      	cmp	r0, #100	; 0x64
 80014b4:	d9f5      	bls.n	80014a2 <HAL_RCC_OscConfig+0x28a>
            return HAL_TIMEOUT;
 80014b6:	2003      	movs	r0, #3
 80014b8:	e04d      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40023802 	.word	0x40023802
 80014c4:	42470000 	.word	0x42470000
 80014c8:	42470e80 	.word	0x42470e80
 80014cc:	42470060 	.word	0x42470060
 80014d0:	40007000 	.word	0x40007000
 80014d4:	40023870 	.word	0x40023870
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 80014d8:	69e3      	ldr	r3, [r4, #28]
 80014da:	6a22      	ldr	r2, [r4, #32]
 80014dc:	4313      	orrs	r3, r2
 80014de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80014e0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80014e4:	fa92 f2a2 	rbit	r2, r2
 80014e8:	fab2 f282 	clz	r2, r2
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	4313      	orrs	r3, r2
 80014f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014f4:	0852      	lsrs	r2, r2, #1
 80014f6:	3a01      	subs	r2, #1
 80014f8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80014fc:	fa91 f1a1 	rbit	r1, r1
 8001500:	fab1 f181 	clz	r1, r1
 8001504:	408a      	lsls	r2, r1
 8001506:	4313      	orrs	r3, r2
 8001508:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800150a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800150e:	fa92 f2a2 	rbit	r2, r2
 8001512:	fab2 f282 	clz	r2, r2
 8001516:	fa01 f202 	lsl.w	r2, r1, r2
 800151a:	4313      	orrs	r3, r2
 800151c:	4a10      	ldr	r2, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x348>)
 800151e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001520:	2201      	movs	r2, #1
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_RCC_OscConfig+0x34c>)
 8001524:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001526:	f7ff fd05 	bl	8000f34 <HAL_GetTick>
 800152a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_RCC_OscConfig+0x348>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001534:	d106      	bne.n	8001544 <HAL_RCC_OscConfig+0x32c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fcfd 	bl	8000f34 <HAL_GetTick>
 800153a:	1b00      	subs	r0, r0, r4
 800153c:	2864      	cmp	r0, #100	; 0x64
 800153e:	d9f5      	bls.n	800152c <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001544:	2000      	movs	r0, #0
 8001546:	e006      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
 8001548:	2000      	movs	r0, #0
 800154a:	e004      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
    return HAL_ERROR;
 800154c:	2001      	movs	r0, #1
 800154e:	4770      	bx	lr
        return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
  return HAL_OK;
 8001554:	2000      	movs	r0, #0
}
 8001556:	b003      	add	sp, #12
 8001558:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
 800155c:	e7fb      	b.n	8001556 <HAL_RCC_OscConfig+0x33e>
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	42470060 	.word	0x42470060

08001568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	d059      	beq.n	800162a <HAL_RCC_GetSysClockFreq+0xc2>
 8001576:	2b08      	cmp	r3, #8
 8001578:	d001      	beq.n	800157e <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800157a:	482e      	ldr	r0, [pc, #184]	; (8001634 <HAL_RCC_GetSysClockFreq+0xcc>)
 800157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800158c:	d02a      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001596:	461e      	mov	r6, r3
 8001598:	2700      	movs	r7, #0
 800159a:	015c      	lsls	r4, r3, #5
 800159c:	2500      	movs	r5, #0
 800159e:	1ae4      	subs	r4, r4, r3
 80015a0:	eb65 0507 	sbc.w	r5, r5, r7
 80015a4:	01a9      	lsls	r1, r5, #6
 80015a6:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015aa:	01a0      	lsls	r0, r4, #6
 80015ac:	1b00      	subs	r0, r0, r4
 80015ae:	eb61 0105 	sbc.w	r1, r1, r5
 80015b2:	00cb      	lsls	r3, r1, #3
 80015b4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015b8:	00c4      	lsls	r4, r0, #3
 80015ba:	19a0      	adds	r0, r4, r6
 80015bc:	eb43 0107 	adc.w	r1, r3, r7
 80015c0:	024b      	lsls	r3, r1, #9
 80015c2:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80015c6:	0244      	lsls	r4, r0, #9
 80015c8:	4620      	mov	r0, r4
 80015ca:	4619      	mov	r1, r3
 80015cc:	2300      	movs	r3, #0
 80015ce:	f7ff fb07 	bl	8000be0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015da:	3301      	adds	r3, #1
 80015dc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80015de:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80015e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015ec:	461e      	mov	r6, r3
 80015ee:	2700      	movs	r7, #0
 80015f0:	015c      	lsls	r4, r3, #5
 80015f2:	2500      	movs	r5, #0
 80015f4:	1ae4      	subs	r4, r4, r3
 80015f6:	eb65 0507 	sbc.w	r5, r5, r7
 80015fa:	01a9      	lsls	r1, r5, #6
 80015fc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001600:	01a0      	lsls	r0, r4, #6
 8001602:	1b00      	subs	r0, r0, r4
 8001604:	eb61 0105 	sbc.w	r1, r1, r5
 8001608:	00cb      	lsls	r3, r1, #3
 800160a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800160e:	00c4      	lsls	r4, r0, #3
 8001610:	19a0      	adds	r0, r4, r6
 8001612:	eb43 0107 	adc.w	r1, r3, r7
 8001616:	028b      	lsls	r3, r1, #10
 8001618:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800161c:	0284      	lsls	r4, r0, #10
 800161e:	4620      	mov	r0, r4
 8001620:	4619      	mov	r1, r3
 8001622:	2300      	movs	r3, #0
 8001624:	f7ff fadc 	bl	8000be0 <__aeabi_uldivmod>
 8001628:	e7d3      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	00f42400 	.word	0x00f42400
 8001638:	007a1200 	.word	0x007a1200

0800163c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800163c:	2800      	cmp	r0, #0
 800163e:	f000 80a2 	beq.w	8001786 <HAL_RCC_ClockConfig+0x14a>
{
 8001642:	b570      	push	{r4, r5, r6, lr}
 8001644:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <HAL_RCC_ClockConfig+0x154>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	428b      	cmp	r3, r1
 8001650:	d209      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	b2cb      	uxtb	r3, r1
 8001654:	4a4e      	ldr	r2, [pc, #312]	; (8001790 <HAL_RCC_ClockConfig+0x154>)
 8001656:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001658:	6813      	ldr	r3, [r2, #0]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	4299      	cmp	r1, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001662:	2001      	movs	r0, #1
 8001664:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	f013 0f02 	tst.w	r3, #2
 800166c:	d017      	beq.n	800169e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166e:	f013 0f04 	tst.w	r3, #4
 8001672:	d004      	beq.n	800167e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 8001676:	6893      	ldr	r3, [r2, #8]
 8001678:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800167c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	f013 0f08 	tst.w	r3, #8
 8001684:	d004      	beq.n	8001690 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001686:	4a43      	ldr	r2, [pc, #268]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 8001688:	6893      	ldr	r3, [r2, #8]
 800168a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001690:	4a40      	ldr	r2, [pc, #256]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 8001692:	6893      	ldr	r3, [r2, #8]
 8001694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001698:	68a0      	ldr	r0, [r4, #8]
 800169a:	4303      	orrs	r3, r0
 800169c:	6093      	str	r3, [r2, #8]
 800169e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	f013 0f01 	tst.w	r3, #1
 80016a6:	d031      	beq.n	800170c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d020      	beq.n	80016f0 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d025      	beq.n	80016fe <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4a38      	ldr	r2, [pc, #224]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	f012 0f02 	tst.w	r2, #2
 80016ba:	d066      	beq.n	800178a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016bc:	4935      	ldr	r1, [pc, #212]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 80016be:	688a      	ldr	r2, [r1, #8]
 80016c0:	f022 0203 	bic.w	r2, r2, #3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80016c8:	f7ff fc34 	bl	8000f34 <HAL_GetTick>
 80016cc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	6862      	ldr	r2, [r4, #4]
 80016d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016dc:	d016      	beq.n	800170c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7ff fc29 	bl	8000f34 <HAL_GetTick>
 80016e2:	1b80      	subs	r0, r0, r6
 80016e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80016e8:	4298      	cmp	r0, r3
 80016ea:	d9f0      	bls.n	80016ce <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80016ec:	2003      	movs	r0, #3
 80016ee:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f0:	4a28      	ldr	r2, [pc, #160]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80016f8:	d1e0      	bne.n	80016bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
 80016fc:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4a25      	ldr	r2, [pc, #148]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001706:	d1d9      	bne.n	80016bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001708:	2001      	movs	r0, #1
 800170a:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x154>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	429d      	cmp	r5, r3
 8001716:	d209      	bcs.n	800172c <HAL_RCC_ClockConfig+0xf0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001718:	b2ea      	uxtb	r2, r5
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_RCC_ClockConfig+0x154>)
 800171c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	429d      	cmp	r5, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0xf0>
      return HAL_ERROR;
 8001728:	2001      	movs	r0, #1
}
 800172a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f013 0f04 	tst.w	r3, #4
 8001732:	d006      	beq.n	8001742 <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4a17      	ldr	r2, [pc, #92]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 8001736:	6893      	ldr	r3, [r2, #8]
 8001738:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800173c:	68e1      	ldr	r1, [r4, #12]
 800173e:	430b      	orrs	r3, r1
 8001740:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	f013 0f08 	tst.w	r3, #8
 8001748:	d007      	beq.n	800175a <HAL_RCC_ClockConfig+0x11e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 800174c:	6893      	ldr	r3, [r2, #8]
 800174e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001752:	6921      	ldr	r1, [r4, #16]
 8001754:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001758:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800175a:	f7ff ff05 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_RCC_ClockConfig+0x158>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001766:	22f0      	movs	r2, #240	; 0xf0
 8001768:	fa92 f2a2 	rbit	r2, r2
 800176c:	fab2 f282 	clz	r2, r2
 8001770:	40d3      	lsrs	r3, r2
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x15c>)
 8001774:	5cd3      	ldrb	r3, [r2, r3]
 8001776:	40d8      	lsrs	r0, r3
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_RCC_ClockConfig+0x160>)
 800177a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800177c:	2000      	movs	r0, #0
 800177e:	f002 fcdd 	bl	800413c <HAL_InitTick>
  return HAL_OK;
 8001782:	2000      	movs	r0, #0
 8001784:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
 8001788:	4770      	bx	lr
        return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	bd70      	pop	{r4, r5, r6, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	08004d70 	.word	0x08004d70
 800179c:	20000004 	.word	0x20000004

080017a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017a0:	4b01      	ldr	r3, [pc, #4]	; (80017a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80017ae:	f7ff fff7 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80017ba:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80017be:	fa92 f2a2 	rbit	r2, r2
 80017c2:	fab2 f282 	clz	r2, r2
 80017c6:	40d3      	lsrs	r3, r2
 80017c8:	4a02      	ldr	r2, [pc, #8]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
}
 80017cc:	40d8      	lsrs	r0, r3
 80017ce:	bd08      	pop	{r3, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08004d80 	.word	0x08004d80

080017d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017d8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80017da:	f7ff ffe1 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017e6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80017ea:	fa92 f2a2 	rbit	r2, r2
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	40d3      	lsrs	r3, r2
 80017f4:	4a02      	ldr	r2, [pc, #8]	; (8001800 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80017f8:	40d8      	lsrs	r0, r3
 80017fa:	bd08      	pop	{r3, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	08004d80 	.word	0x08004d80

08001804 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001804:	230f      	movs	r3, #15
 8001806:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_GetClockConfig+0x34>)
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	f002 0203 	and.w	r2, r2, #3
 8001810:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001818:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001820:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800182a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_RCC_GetClockConfig+0x38>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	600b      	str	r3, [r1, #0]
 8001836:	4770      	bx	lr
 8001838:	40023800 	.word	0x40023800
 800183c:	40023c00 	.word	0x40023c00

08001840 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	4605      	mov	r5, r0
 8001844:	460f      	mov	r7, r1
 8001846:	4616      	mov	r6, r2
 8001848:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800184a:	e03b      	b.n	80018c4 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800184c:	b12c      	cbz	r4, 800185a <SPI_WaitFlagStateUntilTimeout+0x1a>
 800184e:	f7ff fb71 	bl	8000f34 <HAL_GetTick>
 8001852:	9b06      	ldr	r3, [sp, #24]
 8001854:	1ac0      	subs	r0, r0, r3
 8001856:	4284      	cmp	r4, r0
 8001858:	d834      	bhi.n	80018c4 <SPI_WaitFlagStateUntilTimeout+0x84>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800185a:	682a      	ldr	r2, [r5, #0]
 800185c:	6853      	ldr	r3, [r2, #4]
 800185e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001862:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001864:	686b      	ldr	r3, [r5, #4]
 8001866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800186a:	d00b      	beq.n	8001884 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800186c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800186e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001872:	d014      	beq.n	800189e <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 8001874:	2301      	movs	r3, #1
 8001876:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800187a:	2300      	movs	r3, #0
 800187c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8001880:	2003      	movs	r0, #3
 8001882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001884:	68ab      	ldr	r3, [r5, #8]
 8001886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800188a:	d002      	beq.n	8001892 <SPI_WaitFlagStateUntilTimeout+0x52>
 800188c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001890:	d1ec      	bne.n	800186c <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8001892:	682a      	ldr	r2, [r5, #0]
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e7e6      	b.n	800186c <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 800189e:	682a      	ldr	r2, [r5, #0]
 80018a0:	6813      	ldr	r3, [r2, #0]
 80018a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	0c1b      	lsrs	r3, r3, #16
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	682a      	ldr	r2, [r5, #0]
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e7dd      	b.n	8001874 <SPI_WaitFlagStateUntilTimeout+0x34>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80018b8:	2301      	movs	r3, #1
 80018ba:	42b3      	cmp	r3, r6
 80018bc:	d009      	beq.n	80018d2 <SPI_WaitFlagStateUntilTimeout+0x92>
    if(Timeout != HAL_MAX_DELAY)
 80018be:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80018c2:	d1c3      	bne.n	800184c <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80018c4:	682b      	ldr	r3, [r5, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	ea37 0303 	bics.w	r3, r7, r3
 80018cc:	d0f4      	beq.n	80018b8 <SPI_WaitFlagStateUntilTimeout+0x78>
 80018ce:	2300      	movs	r3, #0
 80018d0:	e7f3      	b.n	80018ba <SPI_WaitFlagStateUntilTimeout+0x7a>
      }
    }
  }

  return HAL_OK;
 80018d2:	2000      	movs	r0, #0
}
 80018d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018d6 <SPI_CheckFlag_BSY>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80018d6:	b510      	push	{r4, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80018dc:	9200      	str	r2, [sp, #0]
 80018de:	460b      	mov	r3, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	f7ff ffac 	bl	8001840 <SPI_WaitFlagStateUntilTimeout>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b120      	cbz	r0, 80018f6 <SPI_CheckFlag_BSY+0x20>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018ee:	f043 0320 	orr.w	r3, r3, #32
 80018f2:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
  }
  return HAL_OK;
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	b002      	add	sp, #8
 80018fa:	bd10      	pop	{r4, pc}

080018fc <HAL_SPI_Init>:
  if(hspi == NULL)
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d03b      	beq.n	8001978 <HAL_SPI_Init+0x7c>
{
 8001900:	b510      	push	{r4, lr}
 8001902:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001908:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800190c:	2b00      	cmp	r3, #0
 800190e:	d02e      	beq.n	800196e <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001910:	2302      	movs	r3, #2
 8001912:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800191e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001920:	6822      	ldr	r2, [r4, #0]
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	68a1      	ldr	r1, [r4, #8]
 8001926:	430b      	orrs	r3, r1
 8001928:	68e1      	ldr	r1, [r4, #12]
 800192a:	430b      	orrs	r3, r1
 800192c:	6921      	ldr	r1, [r4, #16]
 800192e:	430b      	orrs	r3, r1
 8001930:	6961      	ldr	r1, [r4, #20]
 8001932:	430b      	orrs	r3, r1
 8001934:	69a1      	ldr	r1, [r4, #24]
 8001936:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800193a:	430b      	orrs	r3, r1
 800193c:	69e1      	ldr	r1, [r4, #28]
 800193e:	430b      	orrs	r3, r1
 8001940:	6a21      	ldr	r1, [r4, #32]
 8001942:	430b      	orrs	r3, r1
 8001944:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001946:	430b      	orrs	r3, r1
 8001948:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	8b63      	ldrh	r3, [r4, #26]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001954:	430b      	orrs	r3, r1
 8001956:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001958:	6822      	ldr	r2, [r4, #0]
 800195a:	69d3      	ldr	r3, [r2, #28]
 800195c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001960:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001962:	2000      	movs	r0, #0
 8001964:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001966:	2301      	movs	r3, #1
 8001968:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800196c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800196e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001972:	f002 fb35 	bl	8003fe0 <HAL_SPI_MspInit>
 8001976:	e7cb      	b.n	8001910 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8001978:	2001      	movs	r0, #1
 800197a:	4770      	bx	lr

0800197c <HAL_SPI_TransmitReceive>:
{
 800197c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001980:	b085      	sub	sp, #20
 8001982:	4698      	mov	r8, r3
 8001984:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001986:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800198a:	2b01      	cmp	r3, #1
 800198c:	d104      	bne.n	8001998 <HAL_SPI_TransmitReceive+0x1c>
 800198e:	2302      	movs	r3, #2
}
 8001990:	4618      	mov	r0, r3
 8001992:	b005      	add	sp, #20
 8001994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001998:	4604      	mov	r4, r0
 800199a:	460f      	mov	r7, r1
 800199c:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800199e:	2301      	movs	r3, #1
 80019a0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80019a4:	f7ff fac6 	bl	8000f34 <HAL_GetTick>
 80019a8:	4681      	mov	r9, r0
  tmp  = hspi->State;
 80019aa:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80019ae:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 80019b0:	6862      	ldr	r2, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d012      	beq.n	80019dc <HAL_SPI_TransmitReceive+0x60>
 80019b6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80019ba:	d007      	beq.n	80019cc <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 80019bc:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 80019be:	2201      	movs	r2, #1
 80019c0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  return errorcode;
 80019ca:	e7e1      	b.n	8001990 <HAL_SPI_TransmitReceive+0x14>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80019cc:	68a2      	ldr	r2, [r4, #8]
 80019ce:	2a00      	cmp	r2, #0
 80019d0:	f040 80e9 	bne.w	8001ba6 <HAL_SPI_TransmitReceive+0x22a>
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d001      	beq.n	80019dc <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
 80019da:	e7f0      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80019dc:	2f00      	cmp	r7, #0
 80019de:	f000 80e4 	beq.w	8001baa <HAL_SPI_TransmitReceive+0x22e>
 80019e2:	2e00      	cmp	r6, #0
 80019e4:	f000 80e3 	beq.w	8001bae <HAL_SPI_TransmitReceive+0x232>
 80019e8:	f1b8 0f00 	cmp.w	r8, #0
 80019ec:	f000 80e1 	beq.w	8001bb2 <HAL_SPI_TransmitReceive+0x236>
  if(hspi->State == HAL_SPI_STATE_READY)
 80019f0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d02c      	beq.n	8001a54 <HAL_SPI_TransmitReceive+0xd8>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019fe:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a00:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a04:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a08:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a0a:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a0e:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8001a12:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a14:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a1e:	d103      	bne.n	8001a28 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a26:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a28:	68e3      	ldr	r3, [r4, #12]
 8001a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a2e:	d015      	beq.n	8001a5c <HAL_SPI_TransmitReceive+0xe0>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	b11b      	cbz	r3, 8001a3c <HAL_SPI_TransmitReceive+0xc0>
 8001a34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <HAL_SPI_TransmitReceive+0xd2>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8001a42:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001a44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001a4e:	f04f 0801 	mov.w	r8, #1
 8001a52:	e069      	b.n	8001b28 <HAL_SPI_TransmitReceive+0x1ac>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a54:	2305      	movs	r3, #5
 8001a56:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8001a5a:	e7ce      	b.n	80019fa <HAL_SPI_TransmitReceive+0x7e>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001a5c:	6863      	ldr	r3, [r4, #4]
 8001a5e:	b11b      	cbz	r3, 8001a68 <HAL_SPI_TransmitReceive+0xec>
 8001a60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_SPI_TransmitReceive+0xfe>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	f837 2b02 	ldrh.w	r2, [r7], #2
 8001a6e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001a70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001a7a:	f04f 0801 	mov.w	r8, #1
 8001a7e:	e01a      	b.n	8001ab6 <HAL_SPI_TransmitReceive+0x13a>
      if((hspi->RxXferCount > 0) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001a80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b173      	cbz	r3, 8001aa4 <HAL_SPI_TransmitReceive+0x128>
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	f012 0f01 	tst.w	r2, #1
 8001a8e:	d009      	beq.n	8001aa4 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001a96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001aa0:	f04f 0801 	mov.w	r8, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001aa4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001aa8:	d005      	beq.n	8001ab6 <HAL_SPI_TransmitReceive+0x13a>
 8001aaa:	f7ff fa43 	bl	8000f34 <HAL_GetTick>
 8001aae:	eba0 0009 	sub.w	r0, r0, r9
 8001ab2:	4285      	cmp	r5, r0
 8001ab4:	d97f      	bls.n	8001bb6 <HAL_SPI_TransmitReceive+0x23a>
    while ((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 8001ab6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b91b      	cbnz	r3, 8001ac4 <HAL_SPI_TransmitReceive+0x148>
 8001abc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d04e      	beq.n	8001b62 <HAL_SPI_TransmitReceive+0x1e6>
      if(txallowed && (hspi->TxXferCount > 0) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001ac4:	f1b8 0f00 	cmp.w	r8, #0
 8001ac8:	d0da      	beq.n	8001a80 <HAL_SPI_TransmitReceive+0x104>
 8001aca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0d6      	beq.n	8001a80 <HAL_SPI_TransmitReceive+0x104>
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	f012 0f02 	tst.w	r2, #2
 8001ada:	d0d1      	beq.n	8001a80 <HAL_SPI_TransmitReceive+0x104>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001adc:	f837 2b02 	ldrh.w	r2, [r7], #2
 8001ae0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001ae2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001aec:	f04f 0800 	mov.w	r8, #0
 8001af0:	e7c6      	b.n	8001a80 <HAL_SPI_TransmitReceive+0x104>
      if((hspi->RxXferCount > 0) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001af2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	b173      	cbz	r3, 8001b16 <HAL_SPI_TransmitReceive+0x19a>
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	f012 0f01 	tst.w	r2, #1
 8001b00:	d009      	beq.n	8001b16 <HAL_SPI_TransmitReceive+0x19a>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8001b06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001b10:	3601      	adds	r6, #1
        txallowed = 1U;
 8001b12:	f04f 0801 	mov.w	r8, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001b16:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001b1a:	d005      	beq.n	8001b28 <HAL_SPI_TransmitReceive+0x1ac>
 8001b1c:	f7ff fa0a 	bl	8000f34 <HAL_GetTick>
 8001b20:	eba0 0009 	sub.w	r0, r0, r9
 8001b24:	4285      	cmp	r5, r0
 8001b26:	d948      	bls.n	8001bba <HAL_SPI_TransmitReceive+0x23e>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 8001b28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b913      	cbnz	r3, 8001b34 <HAL_SPI_TransmitReceive+0x1b8>
 8001b2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b1b3      	cbz	r3, 8001b62 <HAL_SPI_TransmitReceive+0x1e6>
      if(txallowed && (hspi->TxXferCount > 0) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001b34:	f1b8 0f00 	cmp.w	r8, #0
 8001b38:	d0db      	beq.n	8001af2 <HAL_SPI_TransmitReceive+0x176>
 8001b3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0d7      	beq.n	8001af2 <HAL_SPI_TransmitReceive+0x176>
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	f012 0f02 	tst.w	r2, #2
 8001b4a:	d0d2      	beq.n	8001af2 <HAL_SPI_TransmitReceive+0x176>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001b4c:	783a      	ldrb	r2, [r7, #0]
 8001b4e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001b50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001b5a:	3701      	adds	r7, #1
        txallowed = 0U;
 8001b5c:	f04f 0800 	mov.w	r8, #0
 8001b60:	e7c7      	b.n	8001af2 <HAL_SPI_TransmitReceive+0x176>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001b62:	f8cd 9000 	str.w	r9, [sp]
 8001b66:	462b      	mov	r3, r5
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7ff fe67 	bl	8001840 <SPI_WaitFlagStateUntilTimeout>
 8001b72:	b108      	cbz	r0, 8001b78 <HAL_SPI_TransmitReceive+0x1fc>
    errorcode = HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e722      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001b78:	464a      	mov	r2, r9
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7ff feaa 	bl	80018d6 <SPI_CheckFlag_BSY>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b118      	cbz	r0, 8001b8e <HAL_SPI_TransmitReceive+0x212>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b86:	2320      	movs	r3, #32
 8001b88:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
    goto error;
 8001b8c:	e717      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b8e:	68a2      	ldr	r2, [r4, #8]
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	f47f af14 	bne.w	80019be <HAL_SPI_TransmitReceive+0x42>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b96:	9203      	str	r2, [sp, #12]
 8001b98:	6822      	ldr	r2, [r4, #0]
 8001b9a:	68d1      	ldr	r1, [r2, #12]
 8001b9c:	9103      	str	r1, [sp, #12]
 8001b9e:	6892      	ldr	r2, [r2, #8]
 8001ba0:	9203      	str	r2, [sp, #12]
 8001ba2:	9a03      	ldr	r2, [sp, #12]
 8001ba4:	e70b      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>
    errorcode = HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e709      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>
    errorcode = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e707      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e705      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e703      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>
        errorcode = HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e701      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>
        errorcode = HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e6ff      	b.n	80019be <HAL_SPI_TransmitReceive+0x42>

08001bbe <HAL_SPI_Receive>:
{
 8001bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	460d      	mov	r5, r1
 8001bc8:	4690      	mov	r8, r2
 8001bca:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bcc:	6843      	ldr	r3, [r0, #4]
 8001bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bd2:	d007      	beq.n	8001be4 <HAL_SPI_Receive+0x26>
  __HAL_LOCK(hspi);
 8001bd4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10f      	bne.n	8001bfc <HAL_SPI_Receive+0x3e>
 8001bdc:	2002      	movs	r0, #2
}
 8001bde:	b002      	add	sp, #8
 8001be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001be4:	6883      	ldr	r3, [r0, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f4      	bne.n	8001bd4 <HAL_SPI_Receive+0x16>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bea:	2304      	movs	r3, #4
 8001bec:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8001bf0:	9600      	str	r6, [sp, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	f7ff fec1 	bl	800197c <HAL_SPI_TransmitReceive>
 8001bfa:	e7f0      	b.n	8001bde <HAL_SPI_Receive+0x20>
  __HAL_LOCK(hspi);
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001c02:	f7ff f997 	bl	8000f34 <HAL_GetTick>
 8001c06:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001c08:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d007      	beq.n	8001c22 <HAL_SPI_Receive+0x64>
    errorcode = HAL_BUSY;
 8001c12:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001c20:	e7dd      	b.n	8001bde <HAL_SPI_Receive+0x20>
  if((pData == NULL ) || (Size == 0))
 8001c22:	2d00      	cmp	r5, #0
 8001c24:	d072      	beq.n	8001d0c <HAL_SPI_Receive+0x14e>
 8001c26:	f1b8 0f00 	cmp.w	r8, #0
 8001c2a:	d071      	beq.n	8001d10 <HAL_SPI_Receive+0x152>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c36:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c38:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c3c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c40:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0;
 8001c42:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0;
 8001c44:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001c46:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c48:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c4a:	68a3      	ldr	r3, [r4, #8]
 8001c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c50:	d00b      	beq.n	8001c6a <HAL_SPI_Receive+0xac>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c5a:	d103      	bne.n	8001c64 <HAL_SPI_Receive+0xa6>
    __HAL_SPI_ENABLE(hspi);
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c62:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001c64:	68e3      	ldr	r3, [r4, #12]
 8001c66:	b183      	cbz	r3, 8001c8a <HAL_SPI_Receive+0xcc>
 8001c68:	e02a      	b.n	8001cc0 <HAL_SPI_Receive+0x102>
    SPI_1LINE_RX(hspi);
 8001c6a:	6822      	ldr	r2, [r4, #0]
 8001c6c:	6813      	ldr	r3, [r2, #0]
 8001c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e7ed      	b.n	8001c52 <HAL_SPI_Receive+0x94>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001c76:	2e00      	cmp	r6, #0
 8001c78:	d04c      	beq.n	8001d14 <HAL_SPI_Receive+0x156>
 8001c7a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001c7e:	d004      	beq.n	8001c8a <HAL_SPI_Receive+0xcc>
 8001c80:	f7ff f958 	bl	8000f34 <HAL_GetTick>
 8001c84:	1bc0      	subs	r0, r0, r7
 8001c86:	4286      	cmp	r6, r0
 8001c88:	d946      	bls.n	8001d18 <HAL_SPI_Receive+0x15a>
    while(hspi->RxXferCount > 0)
 8001c8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	b343      	cbz	r3, 8001ce2 <HAL_SPI_Receive+0x124>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	f012 0f01 	tst.w	r2, #1
 8001c98:	d0ed      	beq.n	8001c76 <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8001c9a:	7b1b      	ldrb	r3, [r3, #12]
 8001c9c:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8001ca0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001caa:	e7ee      	b.n	8001c8a <HAL_SPI_Receive+0xcc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001cac:	2e00      	cmp	r6, #0
 8001cae:	d035      	beq.n	8001d1c <HAL_SPI_Receive+0x15e>
 8001cb0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001cb4:	d004      	beq.n	8001cc0 <HAL_SPI_Receive+0x102>
 8001cb6:	f7ff f93d 	bl	8000f34 <HAL_GetTick>
 8001cba:	1bc0      	subs	r0, r0, r7
 8001cbc:	4286      	cmp	r6, r0
 8001cbe:	d92f      	bls.n	8001d20 <HAL_SPI_Receive+0x162>
    while(hspi->RxXferCount > 0)
 8001cc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b16b      	cbz	r3, 8001ce2 <HAL_SPI_Receive+0x124>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	f012 0f01 	tst.w	r2, #1
 8001cce:	d0ed      	beq.n	8001cac <HAL_SPI_Receive+0xee>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8001cd6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001ce0:	e7ee      	b.n	8001cc0 <HAL_SPI_Receive+0x102>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ce2:	6863      	ldr	r3, [r4, #4]
 8001ce4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ce8:	d003      	beq.n	8001cf2 <HAL_SPI_Receive+0x134>
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cec:	b9d3      	cbnz	r3, 8001d24 <HAL_SPI_Receive+0x166>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cee:	2000      	movs	r0, #0
 8001cf0:	e790      	b.n	8001c14 <HAL_SPI_Receive+0x56>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cf2:	68a3      	ldr	r3, [r4, #8]
 8001cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf8:	d002      	beq.n	8001d00 <HAL_SPI_Receive+0x142>
 8001cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfe:	d1f4      	bne.n	8001cea <HAL_SPI_Receive+0x12c>
    __HAL_SPI_DISABLE(hspi);
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	6813      	ldr	r3, [r2, #0]
 8001d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e7ee      	b.n	8001cea <HAL_SPI_Receive+0x12c>
    errorcode = HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	e781      	b.n	8001c14 <HAL_SPI_Receive+0x56>
 8001d10:	2001      	movs	r0, #1
 8001d12:	e77f      	b.n	8001c14 <HAL_SPI_Receive+0x56>
          errorcode = HAL_TIMEOUT;
 8001d14:	2003      	movs	r0, #3
 8001d16:	e77d      	b.n	8001c14 <HAL_SPI_Receive+0x56>
 8001d18:	2003      	movs	r0, #3
 8001d1a:	e77b      	b.n	8001c14 <HAL_SPI_Receive+0x56>
          errorcode = HAL_TIMEOUT;
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	e779      	b.n	8001c14 <HAL_SPI_Receive+0x56>
 8001d20:	2003      	movs	r0, #3
 8001d22:	e777      	b.n	8001c14 <HAL_SPI_Receive+0x56>
    errorcode = HAL_ERROR;
 8001d24:	2001      	movs	r0, #1
 8001d26:	e775      	b.n	8001c14 <HAL_SPI_Receive+0x56>

08001d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d28:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d2a:	6a03      	ldr	r3, [r0, #32]
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d32:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001d34:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d36:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d38:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d3c:	680d      	ldr	r5, [r1, #0]
 8001d3e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d40:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d44:	688d      	ldr	r5, [r1, #8]
 8001d46:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d48:	4d0f      	ldr	r5, [pc, #60]	; (8001d88 <TIM_OC1_SetConfig+0x60>)
 8001d4a:	42a8      	cmp	r0, r5
 8001d4c:	d01a      	beq.n	8001d84 <TIM_OC1_SetConfig+0x5c>
 8001d4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d52:	42a8      	cmp	r0, r5
 8001d54:	d014      	beq.n	8001d80 <TIM_OC1_SetConfig+0x58>
 8001d56:	2500      	movs	r5, #0
 8001d58:	b15d      	cbz	r5, 8001d72 <TIM_OC1_SetConfig+0x4a>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d5a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d5e:	68cd      	ldr	r5, [r1, #12]
 8001d60:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d62:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d66:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d6a:	694d      	ldr	r5, [r1, #20]
 8001d6c:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d6e:	698d      	ldr	r5, [r1, #24]
 8001d70:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d72:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d74:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d76:	684a      	ldr	r2, [r1, #4]
 8001d78:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001d7a:	6203      	str	r3, [r0, #32]
} 
 8001d7c:	bc30      	pop	{r4, r5}
 8001d7e:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d80:	2501      	movs	r5, #1
 8001d82:	e7e9      	b.n	8001d58 <TIM_OC1_SetConfig+0x30>
 8001d84:	2501      	movs	r5, #1
 8001d86:	e7e7      	b.n	8001d58 <TIM_OC1_SetConfig+0x30>
 8001d88:	40010000 	.word	0x40010000

08001d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d8c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d8e:	6a03      	ldr	r3, [r0, #32]
 8001d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d94:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001d98:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d9a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001d9c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001da0:	680d      	ldr	r5, [r1, #0]
 8001da2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001da8:	688d      	ldr	r5, [r1, #8]
 8001daa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001dae:	4d11      	ldr	r5, [pc, #68]	; (8001df4 <TIM_OC3_SetConfig+0x68>)
 8001db0:	42a8      	cmp	r0, r5
 8001db2:	d01d      	beq.n	8001df0 <TIM_OC3_SetConfig+0x64>
 8001db4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001db8:	42a8      	cmp	r0, r5
 8001dba:	d017      	beq.n	8001dec <TIM_OC3_SetConfig+0x60>
 8001dbc:	2500      	movs	r5, #0
 8001dbe:	b175      	cbz	r5, 8001dde <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001dc4:	68cd      	ldr	r5, [r1, #12]
 8001dc6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001dce:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001dd2:	694d      	ldr	r5, [r1, #20]
 8001dd4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001dd8:	698d      	ldr	r5, [r1, #24]
 8001dda:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dde:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001de0:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001de2:	684a      	ldr	r2, [r1, #4]
 8001de4:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001de6:	6203      	str	r3, [r0, #32]
}
 8001de8:	bc30      	pop	{r4, r5}
 8001dea:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001dec:	2501      	movs	r5, #1
 8001dee:	e7e6      	b.n	8001dbe <TIM_OC3_SetConfig+0x32>
 8001df0:	2501      	movs	r5, #1
 8001df2:	e7e4      	b.n	8001dbe <TIM_OC3_SetConfig+0x32>
 8001df4:	40010000 	.word	0x40010000

08001df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001df8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001dfa:	6a03      	ldr	r3, [r0, #32]
 8001dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e00:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e02:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e04:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e06:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e08:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e0c:	680d      	ldr	r5, [r1, #0]
 8001e0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e16:	688d      	ldr	r5, [r1, #8]
 8001e18:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e1c:	4d0c      	ldr	r5, [pc, #48]	; (8001e50 <TIM_OC4_SetConfig+0x58>)
 8001e1e:	42a8      	cmp	r0, r5
 8001e20:	d013      	beq.n	8001e4a <TIM_OC4_SetConfig+0x52>
 8001e22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e26:	42a8      	cmp	r0, r5
 8001e28:	d00d      	beq.n	8001e46 <TIM_OC4_SetConfig+0x4e>
 8001e2a:	2500      	movs	r5, #0
 8001e2c:	b125      	cbz	r5, 8001e38 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e2e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e32:	694d      	ldr	r5, [r1, #20]
 8001e34:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e38:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001e3a:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e3c:	684a      	ldr	r2, [r1, #4]
 8001e3e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e40:	6203      	str	r3, [r0, #32]
}
 8001e42:	bc30      	pop	{r4, r5}
 8001e44:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e46:	2501      	movs	r5, #1
 8001e48:	e7f0      	b.n	8001e2c <TIM_OC4_SetConfig+0x34>
 8001e4a:	2501      	movs	r5, #1
 8001e4c:	e7ee      	b.n	8001e2c <TIM_OC4_SetConfig+0x34>
 8001e4e:	bf00      	nop
 8001e50:	40010000 	.word	0x40010000

08001e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e54:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e56:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e58:	6a04      	ldr	r4, [r0, #32]
 8001e5a:	f024 0401 	bic.w	r4, r4, #1
 8001e5e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001e60:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e62:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e66:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e6a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001e6e:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e70:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e72:	6203      	str	r3, [r0, #32]
}
 8001e74:	bc10      	pop	{r4}
 8001e76:	4770      	bx	lr

08001e78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e78:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e7a:	6a03      	ldr	r3, [r0, #32]
 8001e7c:	f023 0310 	bic.w	r3, r3, #16
 8001e80:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e82:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001e84:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e86:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e8a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e92:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e96:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e98:	6203      	str	r3, [r0, #32]
}
 8001e9a:	bc10      	pop	{r4}
 8001e9c:	4770      	bx	lr

08001e9e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001e9e:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ea4:	f041 0107 	orr.w	r1, r1, #7
 8001ea8:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001eaa:	6083      	str	r3, [r0, #8]
 8001eac:	4770      	bx	lr

08001eae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001eae:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001eb0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eb2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eb6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001eba:	4319      	orrs	r1, r3
 8001ebc:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ebe:	6084      	str	r4, [r0, #8]
} 
 8001ec0:	bc10      	pop	{r4}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec4:	6802      	ldr	r2, [r0, #0]
 8001ec6:	68d3      	ldr	r3, [r2, #12]
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8001ece:	6802      	ldr	r2, [r0, #0]
 8001ed0:	6813      	ldr	r3, [r2, #0]
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6013      	str	r3, [r2, #0]
}
 8001ed8:	2000      	movs	r0, #0
 8001eda:	4770      	bx	lr

08001edc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001edc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d07d      	beq.n	8001fe0 <HAL_TIM_ConfigClockSource+0x104>
{
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001ef4:	6802      	ldr	r2, [r0, #0]
 8001ef6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001efc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f00:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f02:	680b      	ldr	r3, [r1, #0]
 8001f04:	2b40      	cmp	r3, #64	; 0x40
 8001f06:	d057      	beq.n	8001fb8 <HAL_TIM_ConfigClockSource+0xdc>
 8001f08:	d910      	bls.n	8001f2c <HAL_TIM_ConfigClockSource+0x50>
 8001f0a:	2b70      	cmp	r3, #112	; 0x70
 8001f0c:	d03e      	beq.n	8001f8c <HAL_TIM_ConfigClockSource+0xb0>
 8001f0e:	d81f      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x74>
 8001f10:	2b50      	cmp	r3, #80	; 0x50
 8001f12:	d047      	beq.n	8001fa4 <HAL_TIM_ConfigClockSource+0xc8>
 8001f14:	2b60      	cmp	r3, #96	; 0x60
 8001f16:	d132      	bne.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001f18:	68ca      	ldr	r2, [r1, #12]
 8001f1a:	6849      	ldr	r1, [r1, #4]
 8001f1c:	6800      	ldr	r0, [r0, #0]
 8001f1e:	f7ff ffab 	bl	8001e78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f22:	2160      	movs	r1, #96	; 0x60
 8001f24:	6820      	ldr	r0, [r4, #0]
 8001f26:	f7ff ffba 	bl	8001e9e <TIM_ITRx_SetConfig>
    break;
 8001f2a:	e028      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d04d      	beq.n	8001fcc <HAL_TIM_ConfigClockSource+0xf0>
 8001f30:	d908      	bls.n	8001f44 <HAL_TIM_ConfigClockSource+0x68>
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d04f      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8001f36:	2b30      	cmp	r3, #48	; 0x30
 8001f38:	d121      	bne.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001f3a:	2130      	movs	r1, #48	; 0x30
 8001f3c:	6800      	ldr	r0, [r0, #0]
 8001f3e:	f7ff ffae 	bl	8001e9e <TIM_ITRx_SetConfig>
    break;
 8001f42:	e01c      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001f44:	b9db      	cbnz	r3, 8001f7e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001f46:	2100      	movs	r1, #0
 8001f48:	6800      	ldr	r0, [r0, #0]
 8001f4a:	f7ff ffa8 	bl	8001e9e <TIM_ITRx_SetConfig>
    break;
 8001f4e:	e016      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f54:	d00e      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0x98>
 8001f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f5a:	d110      	bne.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance, 
 8001f5c:	68cb      	ldr	r3, [r1, #12]
 8001f5e:	684a      	ldr	r2, [r1, #4]
 8001f60:	6889      	ldr	r1, [r1, #8]
 8001f62:	6800      	ldr	r0, [r0, #0]
 8001f64:	f7ff ffa3 	bl	8001eae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f68:	6822      	ldr	r2, [r4, #0]
 8001f6a:	6893      	ldr	r3, [r2, #8]
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f70:	6093      	str	r3, [r2, #8]
    break;
 8001f72:	e004      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f74:	6802      	ldr	r2, [r0, #0]
 8001f76:	6893      	ldr	r3, [r2, #8]
 8001f78:	f023 0307 	bic.w	r3, r3, #7
 8001f7c:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8001f8a:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8001f8c:	68cb      	ldr	r3, [r1, #12]
 8001f8e:	684a      	ldr	r2, [r1, #4]
 8001f90:	6889      	ldr	r1, [r1, #8]
 8001f92:	6800      	ldr	r0, [r0, #0]
 8001f94:	f7ff ff8b 	bl	8001eae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001fa0:	6093      	str	r3, [r2, #8]
    break;
 8001fa2:	e7ec      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001fa4:	68ca      	ldr	r2, [r1, #12]
 8001fa6:	6849      	ldr	r1, [r1, #4]
 8001fa8:	6800      	ldr	r0, [r0, #0]
 8001faa:	f7ff ff53 	bl	8001e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fae:	2150      	movs	r1, #80	; 0x50
 8001fb0:	6820      	ldr	r0, [r4, #0]
 8001fb2:	f7ff ff74 	bl	8001e9e <TIM_ITRx_SetConfig>
    break;
 8001fb6:	e7e2      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001fb8:	68ca      	ldr	r2, [r1, #12]
 8001fba:	6849      	ldr	r1, [r1, #4]
 8001fbc:	6800      	ldr	r0, [r0, #0]
 8001fbe:	f7ff ff49 	bl	8001e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fc2:	2140      	movs	r1, #64	; 0x40
 8001fc4:	6820      	ldr	r0, [r4, #0]
 8001fc6:	f7ff ff6a 	bl	8001e9e <TIM_ITRx_SetConfig>
    break;
 8001fca:	e7d8      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001fcc:	2110      	movs	r1, #16
 8001fce:	6800      	ldr	r0, [r0, #0]
 8001fd0:	f7ff ff65 	bl	8001e9e <TIM_ITRx_SetConfig>
    break;
 8001fd4:	e7d3      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	6800      	ldr	r0, [r0, #0]
 8001fda:	f7ff ff60 	bl	8001e9e <TIM_ITRx_SetConfig>
    break;
 8001fde:	e7ce      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIM_IC_CaptureCallback>:
{
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8001fe8:	4770      	bx	lr

08001fea <HAL_TIM_TriggerCallback>:
{
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_IRQHandler>:
{
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ff0:	6803      	ldr	r3, [r0, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	f012 0f02 	tst.w	r2, #2
 8001ff8:	d011      	beq.n	800201e <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	f012 0f02 	tst.w	r2, #2
 8002000:	d00d      	beq.n	800201e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002002:	f06f 0202 	mvn.w	r2, #2
 8002006:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002008:	2301      	movs	r3, #1
 800200a:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800200c:	6803      	ldr	r3, [r0, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f013 0f03 	tst.w	r3, #3
 8002014:	d070      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002016:	f7ff ffe6 	bl	8001fe6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	2300      	movs	r3, #0
 800201c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	f012 0f04 	tst.w	r2, #4
 8002026:	d012      	beq.n	800204e <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	f012 0f04 	tst.w	r2, #4
 800202e:	d00e      	beq.n	800204e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002030:	f06f 0204 	mvn.w	r2, #4
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002036:	2302      	movs	r3, #2
 8002038:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002042:	d05f      	beq.n	8002104 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002044:	4620      	mov	r0, r4
 8002046:	f7ff ffce 	bl	8001fe6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	2300      	movs	r3, #0
 800204c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	f012 0f08 	tst.w	r2, #8
 8002056:	d012      	beq.n	800207e <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	f012 0f08 	tst.w	r2, #8
 800205e:	d00e      	beq.n	800207e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002060:	f06f 0208 	mvn.w	r2, #8
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002066:	2304      	movs	r3, #4
 8002068:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f013 0f03 	tst.w	r3, #3
 8002072:	d04e      	beq.n	8002112 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ffb6 	bl	8001fe6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	2300      	movs	r3, #0
 800207c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	f012 0f10 	tst.w	r2, #16
 8002086:	d012      	beq.n	80020ae <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	f012 0f10 	tst.w	r2, #16
 800208e:	d00e      	beq.n	80020ae <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002090:	f06f 0210 	mvn.w	r2, #16
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002096:	2308      	movs	r3, #8
 8002098:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80020a2:	d03d      	beq.n	8002120 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7ff ff9e 	bl	8001fe6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	2300      	movs	r3, #0
 80020ac:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	f012 0f01 	tst.w	r2, #1
 80020b6:	d003      	beq.n	80020c0 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	f012 0f01 	tst.w	r2, #1
 80020be:	d136      	bne.n	800212e <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020d0:	d134      	bne.n	800213c <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020da:	d003      	beq.n	80020e4 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020e2:	d132      	bne.n	800214a <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	f012 0f20 	tst.w	r2, #32
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	f012 0f20 	tst.w	r2, #32
 80020f4:	d130      	bne.n	8002158 <HAL_TIM_IRQHandler+0x16c>
 80020f6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f8:	f7ff ff74 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff ff73 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002102:	e78a      	b.n	800201a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff ff6d 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff ff6c 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002110:	e79b      	b.n	800204a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	4620      	mov	r0, r4
 8002114:	f7ff ff66 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002118:	4620      	mov	r0, r4
 800211a:	f7ff ff65 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
 800211e:	e7ac      	b.n	800207a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002120:	4620      	mov	r0, r4
 8002122:	f7ff ff5f 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002126:	4620      	mov	r0, r4
 8002128:	f7ff ff5e 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
 800212c:	e7bd      	b.n	80020aa <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800212e:	f06f 0201 	mvn.w	r2, #1
 8002132:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002134:	4620      	mov	r0, r4
 8002136:	f001 fd95 	bl	8003c64 <HAL_TIM_PeriodElapsedCallback>
 800213a:	e7c1      	b.n	80020c0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800213c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002140:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002142:	4620      	mov	r0, r4
 8002144:	f000 fa0c 	bl	8002560 <HAL_TIMEx_BreakCallback>
 8002148:	e7c3      	b.n	80020d2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800214a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800214e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff ff4a 	bl	8001fea <HAL_TIM_TriggerCallback>
 8002156:	e7c5      	b.n	80020e4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002158:	f06f 0220 	mvn.w	r2, #32
 800215c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800215e:	4620      	mov	r0, r4
 8002160:	f000 f9fd 	bl	800255e <HAL_TIMEx_CommutationCallback>
}
 8002164:	e7c7      	b.n	80020f6 <HAL_TIM_IRQHandler+0x10a>
	...

08002168 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002168:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800216a:	4a47      	ldr	r2, [pc, #284]	; (8002288 <TIM_Base_SetConfig+0x120>)
 800216c:	4290      	cmp	r0, r2
 800216e:	d04a      	beq.n	8002206 <TIM_Base_SetConfig+0x9e>
 8002170:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002174:	d049      	beq.n	800220a <TIM_Base_SetConfig+0xa2>
 8002176:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800217a:	4290      	cmp	r0, r2
 800217c:	d047      	beq.n	800220e <TIM_Base_SetConfig+0xa6>
 800217e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002182:	4290      	cmp	r0, r2
 8002184:	d045      	beq.n	8002212 <TIM_Base_SetConfig+0xaa>
 8002186:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800218a:	4290      	cmp	r0, r2
 800218c:	d043      	beq.n	8002216 <TIM_Base_SetConfig+0xae>
 800218e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002192:	4290      	cmp	r0, r2
 8002194:	d035      	beq.n	8002202 <TIM_Base_SetConfig+0x9a>
 8002196:	2200      	movs	r2, #0
 8002198:	b11a      	cbz	r2, 80021a2 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800219e:	684a      	ldr	r2, [r1, #4]
 80021a0:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021a2:	4a39      	ldr	r2, [pc, #228]	; (8002288 <TIM_Base_SetConfig+0x120>)
 80021a4:	4290      	cmp	r0, r2
 80021a6:	d03a      	beq.n	800221e <TIM_Base_SetConfig+0xb6>
 80021a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021ac:	d054      	beq.n	8002258 <TIM_Base_SetConfig+0xf0>
 80021ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021b2:	4290      	cmp	r0, r2
 80021b4:	d052      	beq.n	800225c <TIM_Base_SetConfig+0xf4>
 80021b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ba:	4290      	cmp	r0, r2
 80021bc:	d050      	beq.n	8002260 <TIM_Base_SetConfig+0xf8>
 80021be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021c2:	4290      	cmp	r0, r2
 80021c4:	d04e      	beq.n	8002264 <TIM_Base_SetConfig+0xfc>
 80021c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021ca:	4290      	cmp	r0, r2
 80021cc:	d04c      	beq.n	8002268 <TIM_Base_SetConfig+0x100>
 80021ce:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80021d2:	4290      	cmp	r0, r2
 80021d4:	d04a      	beq.n	800226c <TIM_Base_SetConfig+0x104>
 80021d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021da:	4290      	cmp	r0, r2
 80021dc:	d048      	beq.n	8002270 <TIM_Base_SetConfig+0x108>
 80021de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e2:	4290      	cmp	r0, r2
 80021e4:	d046      	beq.n	8002274 <TIM_Base_SetConfig+0x10c>
 80021e6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80021ea:	4290      	cmp	r0, r2
 80021ec:	d044      	beq.n	8002278 <TIM_Base_SetConfig+0x110>
 80021ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f2:	4290      	cmp	r0, r2
 80021f4:	d042      	beq.n	800227c <TIM_Base_SetConfig+0x114>
 80021f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fa:	4290      	cmp	r0, r2
 80021fc:	d00d      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021fe:	2200      	movs	r2, #0
 8002200:	e00e      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002202:	2201      	movs	r2, #1
 8002204:	e7c8      	b.n	8002198 <TIM_Base_SetConfig+0x30>
 8002206:	2201      	movs	r2, #1
 8002208:	e7c6      	b.n	8002198 <TIM_Base_SetConfig+0x30>
 800220a:	2201      	movs	r2, #1
 800220c:	e7c4      	b.n	8002198 <TIM_Base_SetConfig+0x30>
 800220e:	2201      	movs	r2, #1
 8002210:	e7c2      	b.n	8002198 <TIM_Base_SetConfig+0x30>
 8002212:	2201      	movs	r2, #1
 8002214:	e7c0      	b.n	8002198 <TIM_Base_SetConfig+0x30>
 8002216:	2201      	movs	r2, #1
 8002218:	e7be      	b.n	8002198 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800221a:	2201      	movs	r2, #1
 800221c:	e000      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 800221e:	2201      	movs	r2, #1
 8002220:	b11a      	cbz	r2, 800222a <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002226:	68ca      	ldr	r2, [r1, #12]
 8002228:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 800222a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800222e:	694a      	ldr	r2, [r1, #20]
 8002230:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002232:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002234:	688b      	ldr	r3, [r1, #8]
 8002236:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002238:	680b      	ldr	r3, [r1, #0]
 800223a:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <TIM_Base_SetConfig+0x120>)
 800223e:	4298      	cmp	r0, r3
 8002240:	d020      	beq.n	8002284 <TIM_Base_SetConfig+0x11c>
 8002242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002246:	4298      	cmp	r0, r3
 8002248:	d01a      	beq.n	8002280 <TIM_Base_SetConfig+0x118>
 800224a:	2300      	movs	r3, #0
 800224c:	b10b      	cbz	r3, 8002252 <TIM_Base_SetConfig+0xea>
    TIMx->RCR = Structure->RepetitionCounter;
 800224e:	690b      	ldr	r3, [r1, #16]
 8002250:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002252:	2301      	movs	r3, #1
 8002254:	6143      	str	r3, [r0, #20]
 8002256:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002258:	2201      	movs	r2, #1
 800225a:	e7e1      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 800225c:	2201      	movs	r2, #1
 800225e:	e7df      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 8002260:	2201      	movs	r2, #1
 8002262:	e7dd      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 8002264:	2201      	movs	r2, #1
 8002266:	e7db      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 8002268:	2201      	movs	r2, #1
 800226a:	e7d9      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 800226c:	2201      	movs	r2, #1
 800226e:	e7d7      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 8002270:	2201      	movs	r2, #1
 8002272:	e7d5      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 8002274:	2201      	movs	r2, #1
 8002276:	e7d3      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 8002278:	2201      	movs	r2, #1
 800227a:	e7d1      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
 800227c:	2201      	movs	r2, #1
 800227e:	e7cf      	b.n	8002220 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002280:	2301      	movs	r3, #1
 8002282:	e7e3      	b.n	800224c <TIM_Base_SetConfig+0xe4>
 8002284:	2301      	movs	r3, #1
 8002286:	e7e1      	b.n	800224c <TIM_Base_SetConfig+0xe4>
 8002288:	40010000 	.word	0x40010000

0800228c <HAL_TIM_Base_Init>:
  if(htim == NULL)
 800228c:	b1a8      	cbz	r0, 80022ba <HAL_TIM_Base_Init+0x2e>
{ 
 800228e:	b510      	push	{r4, lr}
 8002290:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002292:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002296:	b15b      	cbz	r3, 80022b0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002298:	2302      	movs	r3, #2
 800229a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800229e:	1d21      	adds	r1, r4, #4
 80022a0:	6820      	ldr	r0, [r4, #0]
 80022a2:	f7ff ff61 	bl	8002168 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022ac:	2000      	movs	r0, #0
 80022ae:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80022b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022b4:	f001 fed2 	bl	800405c <HAL_TIM_Base_MspInit>
 80022b8:	e7ee      	b.n	8002298 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80022ba:	2001      	movs	r0, #1
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80022be:	b1a8      	cbz	r0, 80022ec <HAL_TIM_PWM_Init+0x2e>
{
 80022c0:	b510      	push	{r4, lr}
 80022c2:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80022c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022c8:	b15b      	cbz	r3, 80022e2 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 80022ca:	2302      	movs	r3, #2
 80022cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022d0:	1d21      	adds	r1, r4, #4
 80022d2:	6820      	ldr	r0, [r4, #0]
 80022d4:	f7ff ff48 	bl	8002168 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022d8:	2301      	movs	r3, #1
 80022da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022de:	2000      	movs	r0, #0
 80022e0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80022e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80022e6:	f001 fea3 	bl	8004030 <HAL_TIM_PWM_MspInit>
 80022ea:	e7ee      	b.n	80022ca <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80022ec:	2001      	movs	r0, #1
 80022ee:	4770      	bx	lr

080022f0 <TIM_OC2_SetConfig>:
{
 80022f0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f2:	6a03      	ldr	r3, [r0, #32]
 80022f4:	f023 0310 	bic.w	r3, r3, #16
 80022f8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80022fa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80022fc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80022fe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002300:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002304:	680d      	ldr	r5, [r1, #0]
 8002306:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800230a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800230e:	688d      	ldr	r5, [r1, #8]
 8002310:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002314:	4d11      	ldr	r5, [pc, #68]	; (800235c <TIM_OC2_SetConfig+0x6c>)
 8002316:	42a8      	cmp	r0, r5
 8002318:	d01d      	beq.n	8002356 <TIM_OC2_SetConfig+0x66>
 800231a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800231e:	42a8      	cmp	r0, r5
 8002320:	d017      	beq.n	8002352 <TIM_OC2_SetConfig+0x62>
 8002322:	2500      	movs	r5, #0
 8002324:	b175      	cbz	r5, 8002344 <TIM_OC2_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800232a:	68cd      	ldr	r5, [r1, #12]
 800232c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002334:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002338:	694d      	ldr	r5, [r1, #20]
 800233a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800233e:	698d      	ldr	r5, [r1, #24]
 8002340:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002344:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002346:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002348:	684a      	ldr	r2, [r1, #4]
 800234a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800234c:	6203      	str	r3, [r0, #32]
}
 800234e:	bc30      	pop	{r4, r5}
 8002350:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002352:	2501      	movs	r5, #1
 8002354:	e7e6      	b.n	8002324 <TIM_OC2_SetConfig+0x34>
 8002356:	2501      	movs	r5, #1
 8002358:	e7e4      	b.n	8002324 <TIM_OC2_SetConfig+0x34>
 800235a:	bf00      	nop
 800235c:	40010000 	.word	0x40010000

08002360 <HAL_TIM_PWM_ConfigChannel>:
{
 8002360:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002362:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d066      	beq.n	8002438 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800236a:	460d      	mov	r5, r1
 800236c:	4604      	mov	r4, r0
 800236e:	2301      	movs	r3, #1
 8002370:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	2302      	movs	r3, #2
 8002376:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800237a:	2a0c      	cmp	r2, #12
 800237c:	d81a      	bhi.n	80023b4 <HAL_TIM_PWM_ConfigChannel+0x54>
 800237e:	e8df f002 	tbb	[pc, r2]
 8002382:	1907      	.short	0x1907
 8002384:	19201919 	.word	0x19201919
 8002388:	19341919 	.word	0x19341919
 800238c:	1919      	.short	0x1919
 800238e:	47          	.byte	0x47
 800238f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002390:	6800      	ldr	r0, [r0, #0]
 8002392:	f7ff fcc9 	bl	8001d28 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002396:	6822      	ldr	r2, [r4, #0]
 8002398:	6993      	ldr	r3, [r2, #24]
 800239a:	f043 0308 	orr.w	r3, r3, #8
 800239e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	6993      	ldr	r3, [r2, #24]
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023aa:	6822      	ldr	r2, [r4, #0]
 80023ac:	6993      	ldr	r3, [r2, #24]
 80023ae:	6929      	ldr	r1, [r5, #16]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80023c0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023c2:	6800      	ldr	r0, [r0, #0]
 80023c4:	f7ff ff94 	bl	80022f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6993      	ldr	r3, [r2, #24]
 80023cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023d0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	6993      	ldr	r3, [r2, #24]
 80023d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023dc:	6822      	ldr	r2, [r4, #0]
 80023de:	6993      	ldr	r3, [r2, #24]
 80023e0:	6929      	ldr	r1, [r5, #16]
 80023e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023e6:	6193      	str	r3, [r2, #24]
    break;
 80023e8:	e7e4      	b.n	80023b4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ea:	6800      	ldr	r0, [r0, #0]
 80023ec:	f7ff fcce 	bl	8001d8c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023f0:	6822      	ldr	r2, [r4, #0]
 80023f2:	69d3      	ldr	r3, [r2, #28]
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023fa:	6822      	ldr	r2, [r4, #0]
 80023fc:	69d3      	ldr	r3, [r2, #28]
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002404:	6822      	ldr	r2, [r4, #0]
 8002406:	69d3      	ldr	r3, [r2, #28]
 8002408:	6929      	ldr	r1, [r5, #16]
 800240a:	430b      	orrs	r3, r1
 800240c:	61d3      	str	r3, [r2, #28]
    break;
 800240e:	e7d1      	b.n	80023b4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002410:	6800      	ldr	r0, [r0, #0]
 8002412:	f7ff fcf1 	bl	8001df8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002416:	6822      	ldr	r2, [r4, #0]
 8002418:	69d3      	ldr	r3, [r2, #28]
 800241a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800241e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	69d3      	ldr	r3, [r2, #28]
 8002424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002428:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	69d3      	ldr	r3, [r2, #28]
 800242e:	6929      	ldr	r1, [r5, #16]
 8002430:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002434:	61d3      	str	r3, [r2, #28]
    break;
 8002436:	e7bd      	b.n	80023b4 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8002438:	2002      	movs	r0, #2
}
 800243a:	bd38      	pop	{r3, r4, r5, pc}

0800243c <TIM_CCxChannelCmd>:
{
 800243c:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 800243e:	2301      	movs	r3, #1
 8002440:	fa03 f401 	lsl.w	r4, r3, r1
  TIMx->CCER &= ~tmp;
 8002444:	6a03      	ldr	r3, [r0, #32]
 8002446:	ea23 0304 	bic.w	r3, r3, r4
 800244a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800244c:	6a03      	ldr	r3, [r0, #32]
 800244e:	408a      	lsls	r2, r1
 8002450:	4313      	orrs	r3, r2
 8002452:	6203      	str	r3, [r0, #32]
}
 8002454:	bc10      	pop	{r4}
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_PWM_Start>:
{
 8002458:	b510      	push	{r4, lr}
 800245a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800245c:	2201      	movs	r2, #1
 800245e:	6800      	ldr	r0, [r0, #0]
 8002460:	f7ff ffec 	bl	800243c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_TIM_PWM_Start+0x40>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d012      	beq.n	8002492 <HAL_TIM_PWM_Start+0x3a>
 800246c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002470:	4293      	cmp	r3, r2
 8002472:	d00c      	beq.n	800248e <HAL_TIM_PWM_Start+0x36>
 8002474:	2200      	movs	r2, #0
 8002476:	b11a      	cbz	r2, 8002480 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_MOE_ENABLE(htim);
 8002478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800247a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002480:	6822      	ldr	r2, [r4, #0]
 8002482:	6813      	ldr	r3, [r2, #0]
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6013      	str	r3, [r2, #0]
} 
 800248a:	2000      	movs	r0, #0
 800248c:	bd10      	pop	{r4, pc}
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800248e:	2201      	movs	r2, #1
 8002490:	e7f1      	b.n	8002476 <HAL_TIM_PWM_Start+0x1e>
 8002492:	2201      	movs	r2, #1
 8002494:	e7ef      	b.n	8002476 <HAL_TIM_PWM_Start+0x1e>
 8002496:	bf00      	nop
 8002498:	40010000 	.word	0x40010000

0800249c <HAL_TIM_PWM_Stop>:
{ 
 800249c:	b510      	push	{r4, lr}
 800249e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6800      	ldr	r0, [r0, #0]
 80024a4:	f7ff ffca 	bl	800243c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_TIM_PWM_Stop+0x6c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d029      	beq.n	8002504 <HAL_TIM_PWM_Stop+0x68>
 80024b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d023      	beq.n	8002500 <HAL_TIM_PWM_Stop+0x64>
 80024b8:	2200      	movs	r2, #0
 80024ba:	b16a      	cbz	r2, 80024d8 <HAL_TIM_PWM_Stop+0x3c>
    __HAL_TIM_MOE_DISABLE(htim);
 80024bc:	6a19      	ldr	r1, [r3, #32]
 80024be:	f241 1211 	movw	r2, #4369	; 0x1111
 80024c2:	4211      	tst	r1, r2
 80024c4:	d108      	bne.n	80024d8 <HAL_TIM_PWM_Stop+0x3c>
 80024c6:	6a19      	ldr	r1, [r3, #32]
 80024c8:	f240 4244 	movw	r2, #1092	; 0x444
 80024cc:	4211      	tst	r1, r2
 80024ce:	d103      	bne.n	80024d8 <HAL_TIM_PWM_Stop+0x3c>
 80024d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	6a19      	ldr	r1, [r3, #32]
 80024dc:	f241 1211 	movw	r2, #4369	; 0x1111
 80024e0:	4211      	tst	r1, r2
 80024e2:	d108      	bne.n	80024f6 <HAL_TIM_PWM_Stop+0x5a>
 80024e4:	6a19      	ldr	r1, [r3, #32]
 80024e6:	f240 4244 	movw	r2, #1092	; 0x444
 80024ea:	4211      	tst	r1, r2
 80024ec:	d103      	bne.n	80024f6 <HAL_TIM_PWM_Stop+0x5a>
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
} 
 80024fc:	2000      	movs	r0, #0
 80024fe:	bd10      	pop	{r4, pc}
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002500:	2201      	movs	r2, #1
 8002502:	e7da      	b.n	80024ba <HAL_TIM_PWM_Stop+0x1e>
 8002504:	2201      	movs	r2, #1
 8002506:	e7d8      	b.n	80024ba <HAL_TIM_PWM_Stop+0x1e>
 8002508:	40010000 	.word	0x40010000

0800250c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800250c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d022      	beq.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8002514:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002516:	2201      	movs	r2, #1
 8002518:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	2302      	movs	r3, #2
 800251e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002522:	6804      	ldr	r4, [r0, #0]
 8002524:	6863      	ldr	r3, [r4, #4]
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800252c:	6804      	ldr	r4, [r0, #0]
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	680d      	ldr	r5, [r1, #0]
 8002532:	432b      	orrs	r3, r5
 8002534:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002536:	6804      	ldr	r4, [r0, #0]
 8002538:	68a3      	ldr	r3, [r4, #8]
 800253a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800253e:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002540:	6804      	ldr	r4, [r0, #0]
 8002542:	68a3      	ldr	r3, [r4, #8]
 8002544:	6849      	ldr	r1, [r1, #4]
 8002546:	430b      	orrs	r3, r1
 8002548:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800254a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 800254e:	2300      	movs	r3, #0
 8002550:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002554:	4618      	mov	r0, r3
} 
 8002556:	bc30      	pop	{r4, r5}
 8002558:	4770      	bx	lr
  __HAL_LOCK(htim);
 800255a:	2002      	movs	r0, #2
 800255c:	4770      	bx	lr

0800255e <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800255e:	4770      	bx	lr

08002560 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002560:	4770      	bx	lr
	...

08002564 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002568:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800256a:	6802      	ldr	r2, [r0, #0]
 800256c:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800256e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002572:	68c1      	ldr	r1, [r0, #12]
 8002574:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002576:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002578:	6801      	ldr	r1, [r0, #0]
 800257a:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800257c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002580:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002584:	6882      	ldr	r2, [r0, #8]
 8002586:	6900      	ldr	r0, [r0, #16]
 8002588:	4302      	orrs	r2, r0
 800258a:	6960      	ldr	r0, [r4, #20]
 800258c:	4302      	orrs	r2, r0
 800258e:	69e0      	ldr	r0, [r4, #28]
 8002590:	4302      	orrs	r2, r0
 8002592:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002594:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002596:	6822      	ldr	r2, [r4, #0]
 8002598:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800259a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800259e:	69a1      	ldr	r1, [r4, #24]
 80025a0:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80025a2:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025a4:	69e3      	ldr	r3, [r4, #28]
 80025a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025aa:	d062      	beq.n	8002672 <UART_SetConfig+0x10e>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80025ac:	f8d4 8000 	ldr.w	r8, [r4]
 80025b0:	4bbb      	ldr	r3, [pc, #748]	; (80028a0 <UART_SetConfig+0x33c>)
 80025b2:	4598      	cmp	r8, r3
 80025b4:	f000 811b 	beq.w	80027ee <UART_SetConfig+0x28a>
 80025b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025bc:	4598      	cmp	r8, r3
 80025be:	f000 8116 	beq.w	80027ee <UART_SetConfig+0x28a>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025c2:	f7ff f8f3 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 80025c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ce:	6865      	ldr	r5, [r4, #4]
 80025d0:	00ad      	lsls	r5, r5, #2
 80025d2:	fbb0 f5f5 	udiv	r5, r0, r5
 80025d6:	4fb3      	ldr	r7, [pc, #716]	; (80028a4 <UART_SetConfig+0x340>)
 80025d8:	fba7 3505 	umull	r3, r5, r7, r5
 80025dc:	096d      	lsrs	r5, r5, #5
 80025de:	012e      	lsls	r6, r5, #4
 80025e0:	f7ff f8e4 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 80025e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ec:	6865      	ldr	r5, [r4, #4]
 80025ee:	00ad      	lsls	r5, r5, #2
 80025f0:	fbb0 faf5 	udiv	sl, r0, r5
 80025f4:	f7ff f8da 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 80025f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002600:	6865      	ldr	r5, [r4, #4]
 8002602:	00ad      	lsls	r5, r5, #2
 8002604:	fbb0 f5f5 	udiv	r5, r0, r5
 8002608:	fba7 3505 	umull	r3, r5, r7, r5
 800260c:	096d      	lsrs	r5, r5, #5
 800260e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002612:	fb09 a515 	mls	r5, r9, r5, sl
 8002616:	012d      	lsls	r5, r5, #4
 8002618:	3532      	adds	r5, #50	; 0x32
 800261a:	fba7 3505 	umull	r3, r5, r7, r5
 800261e:	096d      	lsrs	r5, r5, #5
 8002620:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002624:	4435      	add	r5, r6
 8002626:	f7ff f8c1 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 800262a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800262e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002632:	6866      	ldr	r6, [r4, #4]
 8002634:	00b6      	lsls	r6, r6, #2
 8002636:	fbb0 f6f6 	udiv	r6, r0, r6
 800263a:	f7ff f8b7 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 800263e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002642:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002646:	6863      	ldr	r3, [r4, #4]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	fbb0 f0f3 	udiv	r0, r0, r3
 800264e:	fba7 3000 	umull	r3, r0, r7, r0
 8002652:	0940      	lsrs	r0, r0, #5
 8002654:	fb09 6910 	mls	r9, r9, r0, r6
 8002658:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800265c:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002660:	fba7 3709 	umull	r3, r7, r7, r9
 8002664:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002668:	442f      	add	r7, r5
 800266a:	f8c8 7008 	str.w	r7, [r8, #8]
 800266e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002672:	f8d4 8000 	ldr.w	r8, [r4]
 8002676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800267a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800267e:	4598      	cmp	r8, r3
 8002680:	d05c      	beq.n	800273c <UART_SetConfig+0x1d8>
 8002682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002686:	4598      	cmp	r8, r3
 8002688:	d058      	beq.n	800273c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800268a:	f7ff f88f 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 800268e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002696:	6865      	ldr	r5, [r4, #4]
 8002698:	006d      	lsls	r5, r5, #1
 800269a:	fbb0 f5f5 	udiv	r5, r0, r5
 800269e:	4f81      	ldr	r7, [pc, #516]	; (80028a4 <UART_SetConfig+0x340>)
 80026a0:	fba7 3505 	umull	r3, r5, r7, r5
 80026a4:	096d      	lsrs	r5, r5, #5
 80026a6:	012e      	lsls	r6, r5, #4
 80026a8:	f7ff f880 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 80026ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026b4:	6865      	ldr	r5, [r4, #4]
 80026b6:	006d      	lsls	r5, r5, #1
 80026b8:	fbb0 faf5 	udiv	sl, r0, r5
 80026bc:	f7ff f876 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 80026c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026c8:	6865      	ldr	r5, [r4, #4]
 80026ca:	006d      	lsls	r5, r5, #1
 80026cc:	fbb0 f5f5 	udiv	r5, r0, r5
 80026d0:	fba7 3505 	umull	r3, r5, r7, r5
 80026d4:	096d      	lsrs	r5, r5, #5
 80026d6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80026da:	fb09 a515 	mls	r5, r9, r5, sl
 80026de:	00ed      	lsls	r5, r5, #3
 80026e0:	3532      	adds	r5, #50	; 0x32
 80026e2:	fba7 3505 	umull	r3, r5, r7, r5
 80026e6:	096d      	lsrs	r5, r5, #5
 80026e8:	006d      	lsls	r5, r5, #1
 80026ea:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80026ee:	4435      	add	r5, r6
 80026f0:	f7ff f85c 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 80026f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026fc:	6866      	ldr	r6, [r4, #4]
 80026fe:	0076      	lsls	r6, r6, #1
 8002700:	fbb0 f6f6 	udiv	r6, r0, r6
 8002704:	f7ff f852 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 8002708:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800270c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002710:	6863      	ldr	r3, [r4, #4]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fbb0 f3f3 	udiv	r3, r0, r3
 8002718:	fba7 2303 	umull	r2, r3, r7, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	fb09 6913 	mls	r9, r9, r3, r6
 8002722:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002726:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800272a:	fba7 3709 	umull	r3, r7, r7, r9
 800272e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002732:	442f      	add	r7, r5
 8002734:	f8c8 7008 	str.w	r7, [r8, #8]
 8002738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800273c:	f7ff f84c 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 8002740:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002744:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002748:	6865      	ldr	r5, [r4, #4]
 800274a:	006d      	lsls	r5, r5, #1
 800274c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002750:	4f54      	ldr	r7, [pc, #336]	; (80028a4 <UART_SetConfig+0x340>)
 8002752:	fba7 3505 	umull	r3, r5, r7, r5
 8002756:	096d      	lsrs	r5, r5, #5
 8002758:	012e      	lsls	r6, r5, #4
 800275a:	f7ff f83d 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 800275e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002762:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002766:	6865      	ldr	r5, [r4, #4]
 8002768:	006d      	lsls	r5, r5, #1
 800276a:	fbb0 faf5 	udiv	sl, r0, r5
 800276e:	f7ff f833 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 8002772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002776:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800277a:	6865      	ldr	r5, [r4, #4]
 800277c:	006d      	lsls	r5, r5, #1
 800277e:	fbb0 f5f5 	udiv	r5, r0, r5
 8002782:	fba7 3505 	umull	r3, r5, r7, r5
 8002786:	096d      	lsrs	r5, r5, #5
 8002788:	f04f 0964 	mov.w	r9, #100	; 0x64
 800278c:	fb09 a515 	mls	r5, r9, r5, sl
 8002790:	00ed      	lsls	r5, r5, #3
 8002792:	3532      	adds	r5, #50	; 0x32
 8002794:	fba7 3505 	umull	r3, r5, r7, r5
 8002798:	096d      	lsrs	r5, r5, #5
 800279a:	006d      	lsls	r5, r5, #1
 800279c:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80027a0:	4435      	add	r5, r6
 80027a2:	f7ff f819 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 80027a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ae:	6866      	ldr	r6, [r4, #4]
 80027b0:	0076      	lsls	r6, r6, #1
 80027b2:	fbb0 f6f6 	udiv	r6, r0, r6
 80027b6:	f7ff f80f 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 80027ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027c2:	6863      	ldr	r3, [r4, #4]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	fba7 2303 	umull	r2, r3, r7, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	fb09 6913 	mls	r9, r9, r3, r6
 80027d4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80027d8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80027dc:	fba7 3709 	umull	r3, r7, r7, r9
 80027e0:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80027e4:	442f      	add	r7, r5
 80027e6:	f8c8 7008 	str.w	r7, [r8, #8]
 80027ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027ee:	f7fe fff3 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 80027f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027fa:	6865      	ldr	r5, [r4, #4]
 80027fc:	00ad      	lsls	r5, r5, #2
 80027fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8002802:	4f28      	ldr	r7, [pc, #160]	; (80028a4 <UART_SetConfig+0x340>)
 8002804:	fba7 3505 	umull	r3, r5, r7, r5
 8002808:	096d      	lsrs	r5, r5, #5
 800280a:	012e      	lsls	r6, r5, #4
 800280c:	f7fe ffe4 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 8002810:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002814:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002818:	6865      	ldr	r5, [r4, #4]
 800281a:	00ad      	lsls	r5, r5, #2
 800281c:	fbb0 faf5 	udiv	sl, r0, r5
 8002820:	f7fe ffda 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 8002824:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002828:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800282c:	6865      	ldr	r5, [r4, #4]
 800282e:	00ad      	lsls	r5, r5, #2
 8002830:	fbb0 f5f5 	udiv	r5, r0, r5
 8002834:	fba7 3505 	umull	r3, r5, r7, r5
 8002838:	096d      	lsrs	r5, r5, #5
 800283a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800283e:	fb09 a515 	mls	r5, r9, r5, sl
 8002842:	012d      	lsls	r5, r5, #4
 8002844:	3532      	adds	r5, #50	; 0x32
 8002846:	fba7 3505 	umull	r3, r5, r7, r5
 800284a:	096d      	lsrs	r5, r5, #5
 800284c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002850:	4435      	add	r5, r6
 8002852:	f7fe ffc1 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 8002856:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800285a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800285e:	6866      	ldr	r6, [r4, #4]
 8002860:	00b6      	lsls	r6, r6, #2
 8002862:	fbb0 f6f6 	udiv	r6, r0, r6
 8002866:	f7fe ffb7 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 800286a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800286e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002872:	6863      	ldr	r3, [r4, #4]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	fba7 2303 	umull	r2, r3, r7, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	fb09 6913 	mls	r9, r9, r3, r6
 8002884:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002888:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800288c:	fba7 3709 	umull	r3, r7, r7, r9
 8002890:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002894:	442f      	add	r7, r5
 8002896:	f8c8 7008 	str.w	r7, [r8, #8]
 800289a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800289e:	bf00      	nop
 80028a0:	40011000 	.word	0x40011000
 80028a4:	51eb851f 	.word	0x51eb851f

080028a8 <UART_WaitOnFlagUntilTimeout>:
{
 80028a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ac:	4605      	mov	r5, r0
 80028ae:	460f      	mov	r7, r1
 80028b0:	4616      	mov	r6, r2
 80028b2:	4698      	mov	r8, r3
 80028b4:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80028b6:	682b      	ldr	r3, [r5, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	ea37 0303 	bics.w	r3, r7, r3
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	42b3      	cmp	r3, r6
 80028c6:	d11e      	bne.n	8002906 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80028c8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80028cc:	d0f3      	beq.n	80028b6 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80028ce:	b12c      	cbz	r4, 80028dc <UART_WaitOnFlagUntilTimeout+0x34>
 80028d0:	f7fe fb30 	bl	8000f34 <HAL_GetTick>
 80028d4:	eba0 0008 	sub.w	r0, r0, r8
 80028d8:	4284      	cmp	r4, r0
 80028da:	d2ec      	bcs.n	80028b6 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028dc:	682a      	ldr	r2, [r5, #0]
 80028de:	68d3      	ldr	r3, [r2, #12]
 80028e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028e4:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e6:	682a      	ldr	r2, [r5, #0]
 80028e8:	6953      	ldr	r3, [r2, #20]
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80028f0:	2320      	movs	r3, #32
 80028f2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028f6:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80028fa:	2300      	movs	r3, #0
 80028fc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002900:	2003      	movs	r0, #3
 8002902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002906:	2000      	movs	r0, #0
}
 8002908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800290c <HAL_UART_Init>:
  if(huart == NULL)
 800290c:	b358      	cbz	r0, 8002966 <HAL_UART_Init+0x5a>
{
 800290e:	b510      	push	{r4, lr}
 8002910:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002912:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002916:	b30b      	cbz	r3, 800295c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002918:	2324      	movs	r3, #36	; 0x24
 800291a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800291e:	6822      	ldr	r2, [r4, #0]
 8002920:	68d3      	ldr	r3, [r2, #12]
 8002922:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002926:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002928:	4620      	mov	r0, r4
 800292a:	f7ff fe1b 	bl	8002564 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	6913      	ldr	r3, [r2, #16]
 8002932:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002936:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002938:	6822      	ldr	r2, [r4, #0]
 800293a:	6953      	ldr	r3, [r2, #20]
 800293c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002940:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	68d3      	ldr	r3, [r2, #12]
 8002946:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800294a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294c:	2000      	movs	r0, #0
 800294e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002950:	2320      	movs	r3, #32
 8002952:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002956:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800295a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800295c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002960:	f001 fbc0 	bl	80040e4 <HAL_UART_MspInit>
 8002964:	e7d8      	b.n	8002918 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002966:	2001      	movs	r0, #1
 8002968:	4770      	bx	lr

0800296a <HAL_UART_Transmit>:
{
 800296a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002972:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b20      	cmp	r3, #32
 800297a:	d004      	beq.n	8002986 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
}
 800297e:	4618      	mov	r0, r3
 8002980:	b002      	add	sp, #8
 8002982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002986:	4604      	mov	r4, r0
 8002988:	460d      	mov	r5, r1
 800298a:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 800298c:	2900      	cmp	r1, #0
 800298e:	d055      	beq.n	8002a3c <HAL_UART_Transmit+0xd2>
 8002990:	2a00      	cmp	r2, #0
 8002992:	d055      	beq.n	8002a40 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8002994:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_UART_Transmit+0x36>
 800299c:	2302      	movs	r3, #2
 800299e:	e7ee      	b.n	800297e <HAL_UART_Transmit+0x14>
 80029a0:	2301      	movs	r3, #1
 80029a2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029aa:	2321      	movs	r3, #33	; 0x21
 80029ac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80029b0:	f7fe fac0 	bl	8000f34 <HAL_GetTick>
 80029b4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80029b6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ba:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0)
 80029be:	e010      	b.n	80029e2 <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c0:	9600      	str	r6, [sp, #0]
 80029c2:	463b      	mov	r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff ff6d 	bl	80028a8 <UART_WaitOnFlagUntilTimeout>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d138      	bne.n	8002a44 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	882b      	ldrh	r3, [r5, #0]
 80029d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029da:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80029dc:	6923      	ldr	r3, [r4, #16]
 80029de:	b9cb      	cbnz	r3, 8002a14 <HAL_UART_Transmit+0xaa>
          pData +=2;
 80029e0:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0)
 80029e2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b1bb      	cbz	r3, 8002a18 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 80029e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029f2:	68a3      	ldr	r3, [r4, #8]
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f8:	d0e2      	beq.n	80029c0 <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029fa:	9600      	str	r6, [sp, #0]
 80029fc:	463b      	mov	r3, r7
 80029fe:	2200      	movs	r2, #0
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7ff ff50 	bl	80028a8 <UART_WaitOnFlagUntilTimeout>
 8002a08:	b9f0      	cbnz	r0, 8002a48 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	782a      	ldrb	r2, [r5, #0]
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	3501      	adds	r5, #1
 8002a12:	e7e6      	b.n	80029e2 <HAL_UART_Transmit+0x78>
          pData +=1;
 8002a14:	3501      	adds	r5, #1
 8002a16:	e7e4      	b.n	80029e2 <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a18:	9600      	str	r6, [sp, #0]
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2140      	movs	r1, #64	; 0x40
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7ff ff41 	bl	80028a8 <UART_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	b108      	cbz	r0, 8002a2e <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e7a7      	b.n	800297e <HAL_UART_Transmit+0x14>
      huart->gState = HAL_UART_STATE_READY;
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002a34:	2200      	movs	r2, #0
 8002a36:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002a3a:	e7a0      	b.n	800297e <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e79e      	b.n	800297e <HAL_UART_Transmit+0x14>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e79c      	b.n	800297e <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e79a      	b.n	800297e <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e798      	b.n	800297e <HAL_UART_Transmit+0x14>

08002a4c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002a4c:	2884      	cmp	r0, #132	; 0x84
 8002a4e:	d001      	beq.n	8002a54 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002a50:	3003      	adds	r0, #3
 8002a52:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a54:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8002a56:	4770      	bx	lr

08002a58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a58:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002a5a:	f000 fc1d 	bl	8003298 <vTaskStartScheduler>
  
  return osOK;
}
 8002a5e:	2000      	movs	r0, #0
 8002a60:	bd08      	pop	{r3, pc}

08002a62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a64:	b085      	sub	sp, #20
 8002a66:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a68:	6844      	ldr	r4, [r0, #4]
 8002a6a:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a6c:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a6e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002a72:	f7ff ffeb 	bl	8002a4c <makeFreeRtosPriority>
 8002a76:	ab03      	add	r3, sp, #12
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	9000      	str	r0, [sp, #0]
 8002a7c:	463b      	mov	r3, r7
 8002a7e:	b2b2      	uxth	r2, r6
 8002a80:	4629      	mov	r1, r5
 8002a82:	4620      	mov	r0, r4
 8002a84:	f000 fbd6 	bl	8003234 <xTaskCreate>
 8002a88:	2801      	cmp	r0, #1
 8002a8a:	d102      	bne.n	8002a92 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a8c:	9803      	ldr	r0, [sp, #12]
}
 8002a8e:	b005      	add	sp, #20
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8002a92:	2000      	movs	r0, #0
 8002a94:	e7fb      	b.n	8002a8e <osThreadCreate+0x2c>

08002a96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a96:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a98:	4603      	mov	r3, r0
 8002a9a:	b900      	cbnz	r0, 8002a9e <osDelay+0x8>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fd4e 	bl	8003540 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	bd08      	pop	{r3, pc}

08002aa8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002aa8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002aaa:	f000 fdff 	bl	80036ac <xTaskGetSchedulerState>
 8002aae:	2801      	cmp	r0, #1
 8002ab0:	d001      	beq.n	8002ab6 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8002ab2:	f000 f8f7 	bl	8002ca4 <xPortSysTickHandler>
 8002ab6:	bd08      	pop	{r3, pc}

08002ab8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ab8:	f100 0308 	add.w	r3, r0, #8
 8002abc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ac2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ac4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ac6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6003      	str	r3, [r0, #0]
 8002acc:	4770      	bx	lr

08002ace <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	6103      	str	r3, [r0, #16]
 8002ad2:	4770      	bx	lr

08002ad4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ad4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ad6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ae0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ae2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002ae4:	6803      	ldr	r3, [r0, #0]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	6003      	str	r3, [r0, #0]
 8002aea:	4770      	bx	lr

08002aec <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aec:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002aee:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002af0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002af4:	d002      	beq.n	8002afc <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af6:	f100 0208 	add.w	r2, r0, #8
 8002afa:	e002      	b.n	8002b02 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8002afc:	6902      	ldr	r2, [r0, #16]
 8002afe:	e004      	b.n	8002b0a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b00:	461a      	mov	r2, r3
 8002b02:	6853      	ldr	r3, [r2, #4]
 8002b04:	681c      	ldr	r4, [r3, #0]
 8002b06:	42a5      	cmp	r5, r4
 8002b08:	d2fa      	bcs.n	8002b00 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b0a:	6853      	ldr	r3, [r2, #4]
 8002b0c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b0e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b10:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b12:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b14:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002b16:	6803      	ldr	r3, [r0, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	6003      	str	r3, [r0, #0]
}
 8002b1c:	bc30      	pop	{r4, r5}
 8002b1e:	4770      	bx	lr

08002b20 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b20:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b22:	6842      	ldr	r2, [r0, #4]
 8002b24:	6881      	ldr	r1, [r0, #8]
 8002b26:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b28:	6882      	ldr	r2, [r0, #8]
 8002b2a:	6841      	ldr	r1, [r0, #4]
 8002b2c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4290      	cmp	r0, r2
 8002b32:	d005      	beq.n	8002b40 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b34:	2200      	movs	r2, #0
 8002b36:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	3801      	subs	r0, #1
 8002b3c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002b3e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b40:	6882      	ldr	r2, [r0, #8]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	e7f6      	b.n	8002b34 <uxListRemove+0x14>
	...

08002b48 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <prvTaskExitError+0x30>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b50:	d008      	beq.n	8002b64 <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	e7fe      	b.n	8002b62 <prvTaskExitError+0x1a>
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	e7fe      	b.n	8002b74 <prvTaskExitError+0x2c>
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000

08002b7c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002b7c:	4806      	ldr	r0, [pc, #24]	; (8002b98 <prvPortStartFirstTask+0x1c>)
 8002b7e:	6800      	ldr	r0, [r0, #0]
 8002b80:	6800      	ldr	r0, [r0, #0]
 8002b82:	f380 8808 	msr	MSP, r0
 8002b86:	b662      	cpsie	i
 8002b88:	b661      	cpsie	f
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	df00      	svc	0
 8002b94:	bf00      	nop
 8002b96:	0000      	.short	0x0000
 8002b98:	e000ed08 	.word	0xe000ed08

08002b9c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ba4:	f021 0101 	bic.w	r1, r1, #1
 8002ba8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <pxPortInitialiseStack+0x20>)
 8002bae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002bb2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002bb6:	3840      	subs	r0, #64	; 0x40
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	08002b49 	.word	0x08002b49

08002bc0 <SVC_Handler>:
	__asm volatile (
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <pxCurrentTCBConst2>)
 8002bc2:	6819      	ldr	r1, [r3, #0]
 8002bc4:	6808      	ldr	r0, [r1, #0]
 8002bc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002bca:	f380 8809 	msr	PSP, r0
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f380 8811 	msr	BASEPRI, r0
 8002bda:	f04e 0e0d 	orr.w	lr, lr, #13
 8002bde:	4770      	bx	lr

08002be0 <pxCurrentTCBConst2>:
 8002be0:	20003ca8 	.word	0x20003ca8

08002be4 <vPortEnterCritical>:
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <vPortEnterCritical+0x3c>)
 8002bf6:	6813      	ldr	r3, [r2, #0]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10d      	bne.n	8002c1c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <vPortEnterCritical+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002c08:	d008      	beq.n	8002c1c <vPortEnterCritical+0x38>
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	e7fe      	b.n	8002c1a <vPortEnterCritical+0x36>
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000000 	.word	0x20000000
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <vPortExitCritical+0x28>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	b943      	cbnz	r3, 8002c40 <vPortExitCritical+0x18>
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	e7fe      	b.n	8002c3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002c40:	3b01      	subs	r3, #1
 8002c42:	4a03      	ldr	r2, [pc, #12]	; (8002c50 <vPortExitCritical+0x28>)
 8002c44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002c46:	b90b      	cbnz	r3, 8002c4c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000000 	.word	0x20000000
	...

08002c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002c60:	f3ef 8009 	mrs	r0, PSP
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <pxCurrentTCBConst>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c70:	6010      	str	r0, [r2, #0]
 8002c72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002c76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c7a:	f380 8811 	msr	BASEPRI, r0
 8002c7e:	f000 fcc9 	bl	8003614 <vTaskSwitchContext>
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f380 8811 	msr	BASEPRI, r0
 8002c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	6808      	ldr	r0, [r1, #0]
 8002c92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c96:	f380 8809 	msr	PSP, r0
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	4770      	bx	lr

08002ca0 <pxCurrentTCBConst>:
 8002ca0:	20003ca8 	.word	0x20003ca8

08002ca4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ca4:	b508      	push	{r3, lr}
	__asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002cb6:	f000 fb35 	bl	8003324 <xTaskIncrementTick>
 8002cba:	b118      	cbz	r0, 8002cc4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <xPortSysTickHandler+0x28>)
 8002cc2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	bd08      	pop	{r3, pc}
 8002ccc:	e000ed04 	.word	0xe000ed04

08002cd0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <vPortSetupTimerInterrupt+0x1c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <vPortSetupTimerInterrupt+0x20>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <vPortSetupTimerInterrupt+0x24>)
 8002ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <vPortSetupTimerInterrupt+0x28>)
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000004 	.word	0x20000004
 8002cf0:	10624dd3 	.word	0x10624dd3
 8002cf4:	e000e014 	.word	0xe000e014
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <xPortStartScheduler>:
{
 8002cfc:	b500      	push	{lr}
 8002cfe:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d00:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <xPortStartScheduler+0x84>)
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d08:	22ff      	movs	r2, #255	; 0xff
 8002d0a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002d18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <xPortStartScheduler+0x88>)
 8002d1e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d20:	2207      	movs	r2, #7
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <xPortStartScheduler+0x8c>)
 8002d24:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d26:	e009      	b.n	8002d3c <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8002d28:	4a17      	ldr	r2, [pc, #92]	; (8002d88 <xPortStartScheduler+0x8c>)
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d30:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002d40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d44:	d1f0      	bne.n	8002d28 <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d46:	4a10      	ldr	r2, [pc, #64]	; (8002d88 <xPortStartScheduler+0x8c>)
 8002d48:	6813      	ldr	r3, [r2, #0]
 8002d4a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d50:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d52:	9b01      	ldr	r3, [sp, #4]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <xPortStartScheduler+0x84>)
 8002d58:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <xPortStartScheduler+0x90>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002d62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002d6a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002d6c:	f7ff ffb0 	bl	8002cd0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002d70:	2200      	movs	r2, #0
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <xPortStartScheduler+0x94>)
 8002d74:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 8002d76:	f7ff ff01 	bl	8002b7c <prvPortStartFirstTask>
	prvTaskExitError();
 8002d7a:	f7ff fee5 	bl	8002b48 <prvTaskExitError>
 8002d7e:	bf00      	nop
 8002d80:	e000e400 	.word	0xe000e400
 8002d84:	20000088 	.word	0x20000088
 8002d88:	2000008c 	.word	0x2000008c
 8002d8c:	e000ed20 	.word	0xe000ed20
 8002d90:	20000000 	.word	0x20000000

08002d94 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d94:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d96:	f012 0f07 	tst.w	r2, #7
 8002d9a:	d01e      	beq.n	8002dda <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d9c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d9e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002da2:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002da6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002da8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002daa:	480e      	ldr	r0, [pc, #56]	; (8002de4 <prvHeapInit+0x50>)
 8002dac:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002dae:	2100      	movs	r1, #0
 8002db0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002db2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002db4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002db6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002dba:	480b      	ldr	r0, [pc, #44]	; (8002de8 <prvHeapInit+0x54>)
 8002dbc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002dbe:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002dc0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002dc2:	1a99      	subs	r1, r3, r2
 8002dc4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002dc6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <prvHeapInit+0x58>)
 8002dca:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <prvHeapInit+0x5c>)
 8002dce:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002dd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <prvHeapInit+0x60>)
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002dde:	e7e4      	b.n	8002daa <prvHeapInit+0x16>
 8002de0:	20000094 	.word	0x20000094
 8002de4:	20003ca0 	.word	0x20003ca0
 8002de8:	20000090 	.word	0x20000090
 8002dec:	20003c9c 	.word	0x20003c9c
 8002df0:	20003c98 	.word	0x20003c98
 8002df4:	20003c94 	.word	0x20003c94

08002df8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002df8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <prvInsertBlockIntoFreeList+0x4c>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4282      	cmp	r2, r0
 8002e00:	d31a      	bcc.n	8002e38 <prvInsertBlockIntoFreeList+0x40>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	185c      	adds	r4, r3, r1
 8002e06:	42a0      	cmp	r0, r4
 8002e08:	d103      	bne.n	8002e12 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e0a:	6840      	ldr	r0, [r0, #4]
 8002e0c:	4401      	add	r1, r0
 8002e0e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002e10:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e12:	6841      	ldr	r1, [r0, #4]
 8002e14:	1844      	adds	r4, r0, r1
 8002e16:	42a2      	cmp	r2, r4
 8002e18:	d112      	bne.n	8002e40 <prvInsertBlockIntoFreeList+0x48>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e1a:	4c0b      	ldr	r4, [pc, #44]	; (8002e48 <prvInsertBlockIntoFreeList+0x50>)
 8002e1c:	6824      	ldr	r4, [r4, #0]
 8002e1e:	42a2      	cmp	r2, r4
 8002e20:	d00c      	beq.n	8002e3c <prvInsertBlockIntoFreeList+0x44>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e22:	6852      	ldr	r2, [r2, #4]
 8002e24:	4411      	add	r1, r2
 8002e26:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e2e:	4298      	cmp	r0, r3
 8002e30:	d000      	beq.n	8002e34 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e32:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e34:	bc10      	pop	{r4}
 8002e36:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002e38:	4613      	mov	r3, r2
 8002e3a:	e7df      	b.n	8002dfc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e3c:	6004      	str	r4, [r0, #0]
 8002e3e:	e7f6      	b.n	8002e2e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e40:	6002      	str	r2, [r0, #0]
 8002e42:	e7f4      	b.n	8002e2e <prvInsertBlockIntoFreeList+0x36>
 8002e44:	20003ca0 	.word	0x20003ca0
 8002e48:	20000090 	.word	0x20000090

08002e4c <pvPortMalloc>:
{
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002e50:	f000 fa60 	bl	8003314 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002e54:	4b3a      	ldr	r3, [pc, #232]	; (8002f40 <pvPortMalloc+0xf4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	b1bb      	cbz	r3, 8002e8a <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e5a:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <pvPortMalloc+0xf8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	421c      	tst	r4, r3
 8002e60:	d163      	bne.n	8002f2a <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8002e62:	b1ac      	cbz	r4, 8002e90 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8002e64:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e66:	f014 0f07 	tst.w	r4, #7
 8002e6a:	d011      	beq.n	8002e90 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e6c:	f024 0407 	bic.w	r4, r4, #7
 8002e70:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e72:	f004 0307 	and.w	r3, r4, #7
 8002e76:	b15b      	cbz	r3, 8002e90 <pvPortMalloc+0x44>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	e7fe      	b.n	8002e88 <pvPortMalloc+0x3c>
			prvHeapInit();
 8002e8a:	f7ff ff83 	bl	8002d94 <prvHeapInit>
 8002e8e:	e7e4      	b.n	8002e5a <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e90:	2c00      	cmp	r4, #0
 8002e92:	d04c      	beq.n	8002f2e <pvPortMalloc+0xe2>
 8002e94:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <pvPortMalloc+0xfc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	d84a      	bhi.n	8002f32 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <pvPortMalloc+0x100>)
 8002e9e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ea0:	e001      	b.n	8002ea6 <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8002ea2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ea4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ea6:	686a      	ldr	r2, [r5, #4]
 8002ea8:	4294      	cmp	r4, r2
 8002eaa:	d902      	bls.n	8002eb2 <pvPortMalloc+0x66>
 8002eac:	682a      	ldr	r2, [r5, #0]
 8002eae:	2a00      	cmp	r2, #0
 8002eb0:	d1f7      	bne.n	8002ea2 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8002eb2:	4a23      	ldr	r2, [pc, #140]	; (8002f40 <pvPortMalloc+0xf4>)
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	4295      	cmp	r5, r2
 8002eb8:	d03d      	beq.n	8002f36 <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002eba:	681e      	ldr	r6, [r3, #0]
 8002ebc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ebe:	682a      	ldr	r2, [r5, #0]
 8002ec0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ec2:	686b      	ldr	r3, [r5, #4]
 8002ec4:	1b1b      	subs	r3, r3, r4
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d910      	bls.n	8002eec <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002eca:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ecc:	f010 0f07 	tst.w	r0, #7
 8002ed0:	d008      	beq.n	8002ee4 <pvPortMalloc+0x98>
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	e7fe      	b.n	8002ee2 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ee4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ee6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ee8:	f7ff ff86 	bl	8002df8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002eec:	686a      	ldr	r2, [r5, #4]
 8002eee:	4916      	ldr	r1, [pc, #88]	; (8002f48 <pvPortMalloc+0xfc>)
 8002ef0:	680b      	ldr	r3, [r1, #0]
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ef6:	4916      	ldr	r1, [pc, #88]	; (8002f50 <pvPortMalloc+0x104>)
 8002ef8:	6809      	ldr	r1, [r1, #0]
 8002efa:	428b      	cmp	r3, r1
 8002efc:	d201      	bcs.n	8002f02 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002efe:	4914      	ldr	r1, [pc, #80]	; (8002f50 <pvPortMalloc+0x104>)
 8002f00:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <pvPortMalloc+0xf8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002f0e:	f000 fa99 	bl	8003444 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f12:	f016 0f07 	tst.w	r6, #7
 8002f16:	d010      	beq.n	8002f3a <pvPortMalloc+0xee>
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	e7fe      	b.n	8002f28 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8002f2a:	2600      	movs	r6, #0
 8002f2c:	e7ef      	b.n	8002f0e <pvPortMalloc+0xc2>
 8002f2e:	2600      	movs	r6, #0
 8002f30:	e7ed      	b.n	8002f0e <pvPortMalloc+0xc2>
 8002f32:	2600      	movs	r6, #0
 8002f34:	e7eb      	b.n	8002f0e <pvPortMalloc+0xc2>
 8002f36:	2600      	movs	r6, #0
 8002f38:	e7e9      	b.n	8002f0e <pvPortMalloc+0xc2>
}
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000090 	.word	0x20000090
 8002f44:	20003c94 	.word	0x20003c94
 8002f48:	20003c98 	.word	0x20003c98
 8002f4c:	20003ca0 	.word	0x20003ca0
 8002f50:	20003c9c 	.word	0x20003c9c

08002f54 <vPortFree>:
	if( pv != NULL )
 8002f54:	b380      	cbz	r0, 8002fb8 <vPortFree+0x64>
{
 8002f56:	b538      	push	{r3, r4, r5, lr}
 8002f58:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002f5a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f5e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8002f62:	4916      	ldr	r1, [pc, #88]	; (8002fbc <vPortFree+0x68>)
 8002f64:	6809      	ldr	r1, [r1, #0]
 8002f66:	420a      	tst	r2, r1
 8002f68:	d108      	bne.n	8002f7c <vPortFree+0x28>
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	e7fe      	b.n	8002f7a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f7c:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8002f80:	b140      	cbz	r0, 8002f94 <vPortFree+0x40>
 8002f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	e7fe      	b.n	8002f92 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f94:	ea22 0201 	bic.w	r2, r2, r1
 8002f98:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8002f9c:	f000 f9ba 	bl	8003314 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002fa0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002fa4:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <vPortFree+0x6c>)
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	440b      	add	r3, r1
 8002faa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002fac:	4628      	mov	r0, r5
 8002fae:	f7ff ff23 	bl	8002df8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002fb2:	f000 fa47 	bl	8003444 <xTaskResumeAll>
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20003c94 	.word	0x20003c94
 8002fc0:	20003c98 	.word	0x20003c98

08002fc4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <prvResetNextTaskUnblockTime+0x2c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b94b      	cbnz	r3, 8002fe0 <prvResetNextTaskUnblockTime+0x1c>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	b94b      	cbnz	r3, 8002fe4 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <prvResetNextTaskUnblockTime+0x2c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <prvResetNextTaskUnblockTime+0x30>)
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e7f4      	b.n	8002fce <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fe8:	4b02      	ldr	r3, [pc, #8]	; (8002ff4 <prvResetNextTaskUnblockTime+0x30>)
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20003cac 	.word	0x20003cac
 8002ff4:	20003d84 	.word	0x20003d84

08002ff8 <prvDeleteTCB>:
	{
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8002ffc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002ffe:	f7ff ffa9 	bl	8002f54 <vPortFree>
			vPortFree( pxTCB );
 8003002:	4620      	mov	r0, r4
 8003004:	f7ff ffa6 	bl	8002f54 <vPortFree>
 8003008:	bd10      	pop	{r4, pc}

0800300a <prvInitialiseNewTask>:
{
 800300a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800300e:	4680      	mov	r8, r0
 8003010:	4699      	mov	r9, r3
 8003012:	9d08      	ldr	r5, [sp, #32]
 8003014:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003016:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003018:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800301a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800301e:	3a01      	subs	r2, #1
 8003020:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003024:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003028:	2300      	movs	r3, #0
 800302a:	2b0f      	cmp	r3, #15
 800302c:	d807      	bhi.n	800303e <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800302e:	5cc8      	ldrb	r0, [r1, r3]
 8003030:	18e2      	adds	r2, r4, r3
 8003032:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8003036:	5cca      	ldrb	r2, [r1, r3]
 8003038:	b10a      	cbz	r2, 800303e <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800303a:	3301      	adds	r3, #1
 800303c:	e7f5      	b.n	800302a <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800303e:	2300      	movs	r3, #0
 8003040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003044:	2d06      	cmp	r5, #6
 8003046:	d900      	bls.n	800304a <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003048:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800304a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800304c:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800304e:	f04f 0a00 	mov.w	sl, #0
 8003052:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003056:	1d20      	adds	r0, r4, #4
 8003058:	f7ff fd39 	bl	8002ace <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800305c:	f104 0018 	add.w	r0, r4, #24
 8003060:	f7ff fd35 	bl	8002ace <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003064:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003066:	f1c5 0507 	rsb	r5, r5, #7
 800306a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800306c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800306e:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003072:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003076:	464a      	mov	r2, r9
 8003078:	4641      	mov	r1, r8
 800307a:	4630      	mov	r0, r6
 800307c:	f7ff fd8e 	bl	8002b9c <pxPortInitialiseStack>
 8003080:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003082:	b107      	cbz	r7, 8003086 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003084:	603c      	str	r4, [r7, #0]
 8003086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800308c <prvInitialiseTaskLists>:
{
 800308c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800308e:	2400      	movs	r4, #0
 8003090:	e007      	b.n	80030a2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003092:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003096:	0093      	lsls	r3, r2, #2
 8003098:	480e      	ldr	r0, [pc, #56]	; (80030d4 <prvInitialiseTaskLists+0x48>)
 800309a:	4418      	add	r0, r3
 800309c:	f7ff fd0c 	bl	8002ab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030a0:	3401      	adds	r4, #1
 80030a2:	2c06      	cmp	r4, #6
 80030a4:	d9f5      	bls.n	8003092 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80030a6:	4d0c      	ldr	r5, [pc, #48]	; (80030d8 <prvInitialiseTaskLists+0x4c>)
 80030a8:	4628      	mov	r0, r5
 80030aa:	f7ff fd05 	bl	8002ab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030ae:	4c0b      	ldr	r4, [pc, #44]	; (80030dc <prvInitialiseTaskLists+0x50>)
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7ff fd01 	bl	8002ab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030b6:	480a      	ldr	r0, [pc, #40]	; (80030e0 <prvInitialiseTaskLists+0x54>)
 80030b8:	f7ff fcfe 	bl	8002ab8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80030bc:	4809      	ldr	r0, [pc, #36]	; (80030e4 <prvInitialiseTaskLists+0x58>)
 80030be:	f7ff fcfb 	bl	8002ab8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80030c2:	4809      	ldr	r0, [pc, #36]	; (80030e8 <prvInitialiseTaskLists+0x5c>)
 80030c4:	f7ff fcf8 	bl	8002ab8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <prvInitialiseTaskLists+0x60>)
 80030ca:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <prvInitialiseTaskLists+0x64>)
 80030ce:	601c      	str	r4, [r3, #0]
 80030d0:	bd38      	pop	{r3, r4, r5, pc}
 80030d2:	bf00      	nop
 80030d4:	20003cb4 	.word	0x20003cb4
 80030d8:	20003d58 	.word	0x20003d58
 80030dc:	20003d6c 	.word	0x20003d6c
 80030e0:	20003d8c 	.word	0x20003d8c
 80030e4:	20003db8 	.word	0x20003db8
 80030e8:	20003da4 	.word	0x20003da4
 80030ec:	20003cac 	.word	0x20003cac
 80030f0:	20003cb0 	.word	0x20003cb0

080030f4 <prvAddNewTaskToReadyList>:
{
 80030f4:	b510      	push	{r4, lr}
 80030f6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80030f8:	f7ff fd74 	bl	8002be4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80030fc:	4a20      	ldr	r2, [pc, #128]	; (8003180 <prvAddNewTaskToReadyList+0x8c>)
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	3301      	adds	r3, #1
 8003102:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003104:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <prvAddNewTaskToReadyList+0x90>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d031      	beq.n	8003170 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <prvAddNewTaskToReadyList+0x94>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	b93b      	cbnz	r3, 8003122 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <prvAddNewTaskToReadyList+0x90>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800311a:	429a      	cmp	r2, r3
 800311c:	d801      	bhi.n	8003122 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <prvAddNewTaskToReadyList+0x90>)
 8003120:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8003122:	4a1a      	ldr	r2, [pc, #104]	; (800318c <prvAddNewTaskToReadyList+0x98>)
 8003124:	6813      	ldr	r3, [r2, #0]
 8003126:	3301      	adds	r3, #1
 8003128:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800312a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	4917      	ldr	r1, [pc, #92]	; (8003190 <prvAddNewTaskToReadyList+0x9c>)
 8003132:	6808      	ldr	r0, [r1, #0]
 8003134:	4302      	orrs	r2, r0
 8003136:	600a      	str	r2, [r1, #0]
 8003138:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800313c:	009a      	lsls	r2, r3, #2
 800313e:	1d21      	adds	r1, r4, #4
 8003140:	4814      	ldr	r0, [pc, #80]	; (8003194 <prvAddNewTaskToReadyList+0xa0>)
 8003142:	4410      	add	r0, r2
 8003144:	f7ff fcc6 	bl	8002ad4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003148:	f7ff fd6e 	bl	8002c28 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <prvAddNewTaskToReadyList+0x94>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b16b      	cbz	r3, 800316e <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <prvAddNewTaskToReadyList+0x90>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800315a:	429a      	cmp	r2, r3
 800315c:	d207      	bcs.n	800316e <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 800315e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <prvAddNewTaskToReadyList+0xa4>)
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <prvAddNewTaskToReadyList+0x90>)
 8003172:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003174:	6813      	ldr	r3, [r2, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d1d3      	bne.n	8003122 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 800317a:	f7ff ff87 	bl	800308c <prvInitialiseTaskLists>
 800317e:	e7d0      	b.n	8003122 <prvAddNewTaskToReadyList+0x2e>
 8003180:	20003d40 	.word	0x20003d40
 8003184:	20003ca8 	.word	0x20003ca8
 8003188:	20003da0 	.word	0x20003da0
 800318c:	20003d50 	.word	0x20003d50
 8003190:	20003d54 	.word	0x20003d54
 8003194:	20003cb4 	.word	0x20003cb4
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4604      	mov	r4, r0
 80031a0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031a2:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <prvAddCurrentTaskToDelayedList+0x7c>)
 80031a4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <prvAddCurrentTaskToDelayedList+0x80>)
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	3004      	adds	r0, #4
 80031ac:	f7ff fcb8 	bl	8002b20 <uxListRemove>
 80031b0:	b950      	cbnz	r0, 80031c8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <prvAddCurrentTaskToDelayedList+0x80>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	2301      	movs	r3, #1
 80031ba:	fa03 f202 	lsl.w	r2, r3, r2
 80031be:	4918      	ldr	r1, [pc, #96]	; (8003220 <prvAddCurrentTaskToDelayedList+0x84>)
 80031c0:	680b      	ldr	r3, [r1, #0]
 80031c2:	ea23 0302 	bic.w	r3, r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031c8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80031cc:	d013      	beq.n	80031f6 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80031ce:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <prvAddCurrentTaskToDelayedList+0x80>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80031d6:	42a5      	cmp	r5, r4
 80031d8:	d816      	bhi.n	8003208 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <prvAddCurrentTaskToDelayedList+0x88>)
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <prvAddCurrentTaskToDelayedList+0x80>)
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	3104      	adds	r1, #4
 80031e4:	f7ff fc82 	bl	8002aec <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <prvAddCurrentTaskToDelayedList+0x8c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	429c      	cmp	r4, r3
 80031ee:	d201      	bcs.n	80031f4 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <prvAddCurrentTaskToDelayedList+0x8c>)
 80031f2:	601c      	str	r4, [r3, #0]
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031f6:	2e00      	cmp	r6, #0
 80031f8:	d0e9      	beq.n	80031ce <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031fa:	4b08      	ldr	r3, [pc, #32]	; (800321c <prvAddCurrentTaskToDelayedList+0x80>)
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	3104      	adds	r1, #4
 8003200:	480a      	ldr	r0, [pc, #40]	; (800322c <prvAddCurrentTaskToDelayedList+0x90>)
 8003202:	f7ff fc67 	bl	8002ad4 <vListInsertEnd>
 8003206:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <prvAddCurrentTaskToDelayedList+0x94>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <prvAddCurrentTaskToDelayedList+0x80>)
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	3104      	adds	r1, #4
 8003212:	f7ff fc6b 	bl	8002aec <vListInsert>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	20003dcc 	.word	0x20003dcc
 800321c:	20003ca8 	.word	0x20003ca8
 8003220:	20003d54 	.word	0x20003d54
 8003224:	20003cac 	.word	0x20003cac
 8003228:	20003d84 	.word	0x20003d84
 800322c:	20003da4 	.word	0x20003da4
 8003230:	20003cb0 	.word	0x20003cb0

08003234 <xTaskCreate>:
	{
 8003234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003238:	b085      	sub	sp, #20
 800323a:	4606      	mov	r6, r0
 800323c:	460f      	mov	r7, r1
 800323e:	4615      	mov	r5, r2
 8003240:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003242:	0090      	lsls	r0, r2, #2
 8003244:	f7ff fe02 	bl	8002e4c <pvPortMalloc>
			if( pxStack != NULL )
 8003248:	b300      	cbz	r0, 800328c <xTaskCreate+0x58>
 800324a:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800324c:	2054      	movs	r0, #84	; 0x54
 800324e:	f7ff fdfd 	bl	8002e4c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003252:	4604      	mov	r4, r0
 8003254:	b1b0      	cbz	r0, 8003284 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8003256:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800325a:	b1cc      	cbz	r4, 8003290 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800325c:	2300      	movs	r3, #0
 800325e:	9303      	str	r3, [sp, #12]
 8003260:	9402      	str	r4, [sp, #8]
 8003262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	4643      	mov	r3, r8
 800326c:	462a      	mov	r2, r5
 800326e:	4639      	mov	r1, r7
 8003270:	4630      	mov	r0, r6
 8003272:	f7ff feca 	bl	800300a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003276:	4620      	mov	r0, r4
 8003278:	f7ff ff3c 	bl	80030f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800327c:	2001      	movs	r0, #1
	}
 800327e:	b005      	add	sp, #20
 8003280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003284:	4648      	mov	r0, r9
 8003286:	f7ff fe65 	bl	8002f54 <vPortFree>
 800328a:	e7e6      	b.n	800325a <xTaskCreate+0x26>
				pxNewTCB = NULL;
 800328c:	2400      	movs	r4, #0
 800328e:	e7e4      	b.n	800325a <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8003294:	e7f3      	b.n	800327e <xTaskCreate+0x4a>
	...

08003298 <vTaskStartScheduler>:
{
 8003298:	b500      	push	{lr}
 800329a:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <vTaskStartScheduler+0x64>)
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	2300      	movs	r3, #0
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	4916      	ldr	r1, [pc, #88]	; (8003300 <vTaskStartScheduler+0x68>)
 80032a8:	4816      	ldr	r0, [pc, #88]	; (8003304 <vTaskStartScheduler+0x6c>)
 80032aa:	f7ff ffc3 	bl	8003234 <xTaskCreate>
	if( xReturn == pdPASS )
 80032ae:	2801      	cmp	r0, #1
 80032b0:	d005      	beq.n	80032be <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80032b6:	d017      	beq.n	80032e8 <vTaskStartScheduler+0x50>
}
 80032b8:	b003      	add	sp, #12
 80032ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80032ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <vTaskStartScheduler+0x70>)
 80032d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032d6:	2201      	movs	r2, #1
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <vTaskStartScheduler+0x74>)
 80032da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80032dc:	2200      	movs	r2, #0
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <vTaskStartScheduler+0x78>)
 80032e0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80032e2:	f7ff fd0b 	bl	8002cfc <xPortStartScheduler>
 80032e6:	e7e7      	b.n	80032b8 <vTaskStartScheduler+0x20>
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	e7fe      	b.n	80032f8 <vTaskStartScheduler+0x60>
 80032fa:	bf00      	nop
 80032fc:	20003d80 	.word	0x20003d80
 8003300:	08004b5c 	.word	0x08004b5c
 8003304:	080035ed 	.word	0x080035ed
 8003308:	20003d84 	.word	0x20003d84
 800330c:	20003da0 	.word	0x20003da0
 8003310:	20003dcc 	.word	0x20003dcc

08003314 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003314:	4a02      	ldr	r2, [pc, #8]	; (8003320 <vTaskSuspendAll+0xc>)
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20003d4c 	.word	0x20003d4c

08003324 <xTaskIncrementTick>:
{
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003326:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <xTaskIncrementTick+0xf4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d168      	bne.n	8003400 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + 1;
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <xTaskIncrementTick+0xf8>)
 8003330:	681d      	ldr	r5, [r3, #0]
 8003332:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003334:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003336:	b9c5      	cbnz	r5, 800336a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003338:	4b39      	ldr	r3, [pc, #228]	; (8003420 <xTaskIncrementTick+0xfc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	b143      	cbz	r3, 8003352 <xTaskIncrementTick+0x2e>
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	e7fe      	b.n	8003350 <xTaskIncrementTick+0x2c>
 8003352:	4a33      	ldr	r2, [pc, #204]	; (8003420 <xTaskIncrementTick+0xfc>)
 8003354:	6811      	ldr	r1, [r2, #0]
 8003356:	4b33      	ldr	r3, [pc, #204]	; (8003424 <xTaskIncrementTick+0x100>)
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	6010      	str	r0, [r2, #0]
 800335c:	6019      	str	r1, [r3, #0]
 800335e:	4a32      	ldr	r2, [pc, #200]	; (8003428 <xTaskIncrementTick+0x104>)
 8003360:	6813      	ldr	r3, [r2, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	f7ff fe2d 	bl	8002fc4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800336a:	4b30      	ldr	r3, [pc, #192]	; (800342c <xTaskIncrementTick+0x108>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	429d      	cmp	r5, r3
 8003370:	d23a      	bcs.n	80033e8 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8003372:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003374:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <xTaskIncrementTick+0x10c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800337e:	009a      	lsls	r2, r3, #2
 8003380:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <xTaskIncrementTick+0x110>)
 8003382:	589b      	ldr	r3, [r3, r2]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d940      	bls.n	800340a <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8003388:	2401      	movs	r4, #1
 800338a:	e03e      	b.n	800340a <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 800338c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800338e:	4b24      	ldr	r3, [pc, #144]	; (8003420 <xTaskIncrementTick+0xfc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b353      	cbz	r3, 80033ec <xTaskIncrementTick+0xc8>
 8003396:	2300      	movs	r3, #0
 8003398:	bb53      	cbnz	r3, 80033f0 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800339a:	4b21      	ldr	r3, [pc, #132]	; (8003420 <xTaskIncrementTick+0xfc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033a2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80033a4:	429d      	cmp	r5, r3
 80033a6:	d328      	bcc.n	80033fa <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033a8:	1d37      	adds	r7, r6, #4
 80033aa:	4638      	mov	r0, r7
 80033ac:	f7ff fbb8 	bl	8002b20 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033b0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80033b2:	b11b      	cbz	r3, 80033bc <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b4:	f106 0018 	add.w	r0, r6, #24
 80033b8:	f7ff fbb2 	bl	8002b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033bc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80033be:	2201      	movs	r2, #1
 80033c0:	409a      	lsls	r2, r3
 80033c2:	491d      	ldr	r1, [pc, #116]	; (8003438 <xTaskIncrementTick+0x114>)
 80033c4:	6808      	ldr	r0, [r1, #0]
 80033c6:	4302      	orrs	r2, r0
 80033c8:	600a      	str	r2, [r1, #0]
 80033ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033ce:	009a      	lsls	r2, r3, #2
 80033d0:	4639      	mov	r1, r7
 80033d2:	4818      	ldr	r0, [pc, #96]	; (8003434 <xTaskIncrementTick+0x110>)
 80033d4:	4410      	add	r0, r2
 80033d6:	f7ff fb7d 	bl	8002ad4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033da:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <xTaskIncrementTick+0x10c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d2d2      	bcs.n	800338c <xTaskIncrementTick+0x68>
 80033e6:	e7d2      	b.n	800338e <xTaskIncrementTick+0x6a>
 80033e8:	2400      	movs	r4, #0
 80033ea:	e7d0      	b.n	800338e <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ec:	2301      	movs	r3, #1
 80033ee:	e7d3      	b.n	8003398 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <xTaskIncrementTick+0x108>)
 80033f6:	601a      	str	r2, [r3, #0]
					break;
 80033f8:	e7bc      	b.n	8003374 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80033fa:	4a0c      	ldr	r2, [pc, #48]	; (800342c <xTaskIncrementTick+0x108>)
 80033fc:	6013      	str	r3, [r2, #0]
						break;
 80033fe:	e7b9      	b.n	8003374 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <xTaskIncrementTick+0x118>)
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003408:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <xTaskIncrementTick+0x11c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b103      	cbz	r3, 8003412 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 8003410:	2401      	movs	r4, #1
}
 8003412:	4620      	mov	r0, r4
 8003414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003416:	bf00      	nop
 8003418:	20003d4c 	.word	0x20003d4c
 800341c:	20003dcc 	.word	0x20003dcc
 8003420:	20003cac 	.word	0x20003cac
 8003424:	20003cb0 	.word	0x20003cb0
 8003428:	20003d88 	.word	0x20003d88
 800342c:	20003d84 	.word	0x20003d84
 8003430:	20003ca8 	.word	0x20003ca8
 8003434:	20003cb4 	.word	0x20003cb4
 8003438:	20003d54 	.word	0x20003d54
 800343c:	20003d48 	.word	0x20003d48
 8003440:	20003dd0 	.word	0x20003dd0

08003444 <xTaskResumeAll>:
{
 8003444:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8003446:	4b35      	ldr	r3, [pc, #212]	; (800351c <xTaskResumeAll+0xd8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b943      	cbnz	r3, 800345e <xTaskResumeAll+0x1a>
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	e7fe      	b.n	800345c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800345e:	f7ff fbc1 	bl	8002be4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003462:	4b2e      	ldr	r3, [pc, #184]	; (800351c <xTaskResumeAll+0xd8>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	3a01      	subs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d150      	bne.n	8003512 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <xTaskResumeAll+0xdc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	b923      	cbnz	r3, 8003480 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8003476:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003478:	f7ff fbd6 	bl	8002c28 <vPortExitCritical>
}
 800347c:	4620      	mov	r0, r4
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003482:	4b28      	ldr	r3, [pc, #160]	; (8003524 <xTaskResumeAll+0xe0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b31b      	cbz	r3, 80034d0 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003488:	4b26      	ldr	r3, [pc, #152]	; (8003524 <xTaskResumeAll+0xe0>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800348e:	f104 0018 	add.w	r0, r4, #24
 8003492:	f7ff fb45 	bl	8002b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003496:	1d25      	adds	r5, r4, #4
 8003498:	4628      	mov	r0, r5
 800349a:	f7ff fb41 	bl	8002b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800349e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034a0:	2201      	movs	r2, #1
 80034a2:	409a      	lsls	r2, r3
 80034a4:	4920      	ldr	r1, [pc, #128]	; (8003528 <xTaskResumeAll+0xe4>)
 80034a6:	6808      	ldr	r0, [r1, #0]
 80034a8:	4302      	orrs	r2, r0
 80034aa:	600a      	str	r2, [r1, #0]
 80034ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034b0:	009a      	lsls	r2, r3, #2
 80034b2:	4629      	mov	r1, r5
 80034b4:	481d      	ldr	r0, [pc, #116]	; (800352c <xTaskResumeAll+0xe8>)
 80034b6:	4410      	add	r0, r2
 80034b8:	f7ff fb0c 	bl	8002ad4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034be:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <xTaskResumeAll+0xec>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3dc      	bcc.n	8003482 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80034c8:	2201      	movs	r2, #1
 80034ca:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <xTaskResumeAll+0xf0>)
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e7d8      	b.n	8003482 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80034d0:	b10c      	cbz	r4, 80034d6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80034d2:	f7ff fd77 	bl	8002fc4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <xTaskResumeAll+0xf4>)
 80034d8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034da:	b974      	cbnz	r4, 80034fa <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <xTaskResumeAll+0xf0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	b1cb      	cbz	r3, 8003516 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 80034e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <xTaskResumeAll+0xf8>)
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80034f2:	2401      	movs	r4, #1
 80034f4:	e7c0      	b.n	8003478 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034f6:	3c01      	subs	r4, #1
 80034f8:	d007      	beq.n	800350a <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 80034fa:	f7ff ff13 	bl	8003324 <xTaskIncrementTick>
 80034fe:	2800      	cmp	r0, #0
 8003500:	d0f9      	beq.n	80034f6 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8003502:	2201      	movs	r2, #1
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <xTaskResumeAll+0xf0>)
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e7f5      	b.n	80034f6 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 800350a:	2200      	movs	r2, #0
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <xTaskResumeAll+0xf4>)
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e7e4      	b.n	80034dc <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 8003512:	2400      	movs	r4, #0
 8003514:	e7b0      	b.n	8003478 <xTaskResumeAll+0x34>
 8003516:	2400      	movs	r4, #0
 8003518:	e7ae      	b.n	8003478 <xTaskResumeAll+0x34>
 800351a:	bf00      	nop
 800351c:	20003d4c 	.word	0x20003d4c
 8003520:	20003d40 	.word	0x20003d40
 8003524:	20003d8c 	.word	0x20003d8c
 8003528:	20003d54 	.word	0x20003d54
 800352c:	20003cb4 	.word	0x20003cb4
 8003530:	20003ca8 	.word	0x20003ca8
 8003534:	20003dd0 	.word	0x20003dd0
 8003538:	20003d48 	.word	0x20003d48
 800353c:	e000ed04 	.word	0xe000ed04

08003540 <vTaskDelay>:
	{
 8003540:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003542:	b1a8      	cbz	r0, 8003570 <vTaskDelay+0x30>
 8003544:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <vTaskDelay+0x48>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	b143      	cbz	r3, 800355e <vTaskDelay+0x1e>
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	e7fe      	b.n	800355c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800355e:	f7ff fed9 	bl	8003314 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003562:	2100      	movs	r1, #0
 8003564:	4620      	mov	r0, r4
 8003566:	f7ff fe19 	bl	800319c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800356a:	f7ff ff6b 	bl	8003444 <xTaskResumeAll>
 800356e:	e000      	b.n	8003572 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003570:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003572:	b938      	cbnz	r0, 8003584 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8003574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <vTaskDelay+0x4c>)
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	bd10      	pop	{r4, pc}
 8003586:	bf00      	nop
 8003588:	20003d4c 	.word	0x20003d4c
 800358c:	e000ed04 	.word	0xe000ed04

08003590 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <prvCheckTasksWaitingTermination+0x50>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b313      	cbz	r3, 80035dc <prvCheckTasksWaitingTermination+0x4c>
{
 8003596:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8003598:	f7ff febc 	bl	8003314 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <prvCheckTasksWaitingTermination+0x54>)
 800359e:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 80035a0:	f7ff ff50 	bl	8003444 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80035a4:	b924      	cbnz	r4, 80035b0 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035a6:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <prvCheckTasksWaitingTermination+0x50>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f4      	bne.n	8003598 <prvCheckTasksWaitingTermination+0x8>
}
 80035ae:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 80035b0:	f7ff fb18 	bl	8002be4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <prvCheckTasksWaitingTermination+0x54>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ba:	1d20      	adds	r0, r4, #4
 80035bc:	f7ff fab0 	bl	8002b20 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80035c0:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <prvCheckTasksWaitingTermination+0x58>)
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80035c8:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <prvCheckTasksWaitingTermination+0x50>)
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 80035d0:	f7ff fb2a 	bl	8002c28 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80035d4:	4620      	mov	r0, r4
 80035d6:	f7ff fd0f 	bl	8002ff8 <prvDeleteTCB>
 80035da:	e7e4      	b.n	80035a6 <prvCheckTasksWaitingTermination+0x16>
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20003d44 	.word	0x20003d44
 80035e4:	20003db8 	.word	0x20003db8
 80035e8:	20003d40 	.word	0x20003d40

080035ec <prvIdleTask>:
{
 80035ec:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80035ee:	f7ff ffcf 	bl	8003590 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <prvIdleTask+0x20>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d9f9      	bls.n	80035ee <prvIdleTask+0x2>
				taskYIELD();
 80035fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <prvIdleTask+0x24>)
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	e7f0      	b.n	80035ee <prvIdleTask+0x2>
 800360c:	20003cb4 	.word	0x20003cb4
 8003610:	e000ed04 	.word	0xe000ed04

08003614 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <vTaskSwitchContext+0x84>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b9c3      	cbnz	r3, 800364c <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 800361a:	2200      	movs	r2, #0
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <vTaskSwitchContext+0x88>)
 800361e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003620:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <vTaskSwitchContext+0x8c>)
 8003622:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f1c3 031f 	rsb	r3, r3, #31
 800362e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003632:	008a      	lsls	r2, r1, #2
 8003634:	491b      	ldr	r1, [pc, #108]	; (80036a4 <vTaskSwitchContext+0x90>)
 8003636:	588a      	ldr	r2, [r1, r2]
 8003638:	b962      	cbnz	r2, 8003654 <vTaskSwitchContext+0x40>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	e7fe      	b.n	800364a <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 800364c:	2201      	movs	r2, #1
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <vTaskSwitchContext+0x88>)
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	4770      	bx	lr
{
 8003654:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003656:	4813      	ldr	r0, [pc, #76]	; (80036a4 <vTaskSwitchContext+0x90>)
 8003658:	009a      	lsls	r2, r3, #2
 800365a:	18d4      	adds	r4, r2, r3
 800365c:	00a1      	lsls	r1, r4, #2
 800365e:	4401      	add	r1, r0
 8003660:	684c      	ldr	r4, [r1, #4]
 8003662:	6864      	ldr	r4, [r4, #4]
 8003664:	604c      	str	r4, [r1, #4]
 8003666:	441a      	add	r2, r3
 8003668:	0091      	lsls	r1, r2, #2
 800366a:	3108      	adds	r1, #8
 800366c:	4408      	add	r0, r1
 800366e:	4284      	cmp	r4, r0
 8003670:	d00a      	beq.n	8003688 <vTaskSwitchContext+0x74>
 8003672:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003676:	009a      	lsls	r2, r3, #2
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <vTaskSwitchContext+0x90>)
 800367a:	4413      	add	r3, r2
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <vTaskSwitchContext+0x94>)
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	bc10      	pop	{r4}
 8003686:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003688:	6860      	ldr	r0, [r4, #4]
 800368a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800368e:	0091      	lsls	r1, r2, #2
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <vTaskSwitchContext+0x90>)
 8003692:	440a      	add	r2, r1
 8003694:	6050      	str	r0, [r2, #4]
 8003696:	e7ec      	b.n	8003672 <vTaskSwitchContext+0x5e>
 8003698:	20003d4c 	.word	0x20003d4c
 800369c:	20003dd0 	.word	0x20003dd0
 80036a0:	20003d54 	.word	0x20003d54
 80036a4:	20003cb4 	.word	0x20003cb4
 80036a8:	20003ca8 	.word	0x20003ca8

080036ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <xTaskGetSchedulerState+0x18>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b123      	cbz	r3, 80036bc <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <xTaskGetSchedulerState+0x1c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	b91b      	cbnz	r3, 80036c0 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 80036b8:	2002      	movs	r0, #2
 80036ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80036bc:	2001      	movs	r0, #1
 80036be:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 80036c0:	2000      	movs	r0, #0
	}
 80036c2:	4770      	bx	lr
 80036c4:	20003da0 	.word	0x20003da0
 80036c8:	20003d4c 	.word	0x20003d4c
 80036cc:	00000000 	.word	0x00000000

080036d0 <HE_PID>:
 * @param[in] i16_tTemp		Target Temperature
 * @param[in] reset			Resets all the internal PID loop values to zero (effectively restarting PID)
 * @retval		0			Cut the Heating element off
 * @retval		non-zero	Cut the Heating element On
 */
uint8_t HE_PID(int16_t i16_bTemp, int16_t i16_tTemp, uint8_t reset) {
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static float f_Integral;
	static float f_Derivative;
	int16_t i16_PWM;

	/* Calculate Proportional component */
	f_Error = i16_tTemp - i16_bTemp;
 80036d2:	1a08      	subs	r0, r1, r0
 80036d4:	f7fd fa30 	bl	8000b38 <__aeabi_i2f>
 80036d8:	4604      	mov	r4, r0
	/* Calculate Integral component */
	f_Integral += f_Error;
 80036da:	4e1f      	ldr	r6, [pc, #124]	; (8003758 <HE_PID+0x88>)
 80036dc:	6831      	ldr	r1, [r6, #0]
 80036de:	f7fd f977 	bl	80009d0 <__addsf3>
 80036e2:	4605      	mov	r5, r0
 80036e4:	6030      	str	r0, [r6, #0]
	/* Calculate Derivative component */
	f_Derivative = f_Error - f_lastError;

	i16_PWM = (Kp * f_Error) + (Ki * f_Integral) + (Kd * f_Derivative);
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7fc fede 	bl	80004a8 <__aeabi_f2d>
 80036ec:	2200      	movs	r2, #0
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HE_PID+0x8c>)
 80036f0:	f7fc ff2e 	bl	8000550 <__aeabi_dmul>
 80036f4:	4606      	mov	r6, r0
 80036f6:	460f      	mov	r7, r1
 80036f8:	4628      	mov	r0, r5
 80036fa:	f7fc fed5 	bl	80004a8 <__aeabi_f2d>
 80036fe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HE_PID+0x90>)
 8003704:	f7fc ff24 	bl	8000550 <__aeabi_dmul>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4630      	mov	r0, r6
 800370e:	4639      	mov	r1, r7
 8003710:	f7fc fd6c 	bl	80001ec <__adddf3>
 8003714:	4606      	mov	r6, r0
 8003716:	460f      	mov	r7, r1
 8003718:	4620      	mov	r0, r4
 800371a:	f7fc fec5 	bl	80004a8 <__aeabi_f2d>
 800371e:	a30c      	add	r3, pc, #48	; (adr r3, 8003750 <HE_PID+0x80>)
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	f7fc ff14 	bl	8000550 <__aeabi_dmul>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4630      	mov	r0, r6
 800372e:	4639      	mov	r1, r7
 8003730:	f7fc fd5c 	bl	80001ec <__adddf3>
 8003734:	f7fd f91e 	bl	8000974 <__aeabi_d2iz>
 8003738:	b200      	sxth	r0, r0

	if (i16_PWM > 255) i16_PWM = 255;
 800373a:	28ff      	cmp	r0, #255	; 0xff
 800373c:	dd00      	ble.n	8003740 <HE_PID+0x70>
 800373e:	20ff      	movs	r0, #255	; 0xff
	if (i16_PWM < 0) i16_PWM = 0;
 8003740:	2800      	cmp	r0, #0
 8003742:	db01      	blt.n	8003748 <HE_PID+0x78>

	return (uint8_t) i16_PWM;
}
 8003744:	b2c0      	uxtb	r0, r0
 8003746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (i16_PWM < 0) i16_PWM = 0;
 8003748:	2000      	movs	r0, #0
 800374a:	e7fb      	b.n	8003744 <HE_PID+0x74>
 800374c:	f3af 8000 	nop.w
 8003750:	9999999a 	.word	0x9999999a
 8003754:	3fc99999 	.word	0x3fc99999
 8003758:	20003dd4 	.word	0x20003dd4
 800375c:	3fe00000 	.word	0x3fe00000
 8003760:	3fb33333 	.word	0x3fb33333

08003764 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
static void MX_GPIO_Init(void)
{
 8003764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003768:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800376a:	2400      	movs	r4, #0
 800376c:	9400      	str	r4, [sp, #0]
 800376e:	4b6d      	ldr	r3, [pc, #436]	; (8003924 <MX_GPIO_Init+0x1c0>)
 8003770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003772:	f042 0204 	orr.w	r2, r2, #4
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
 8003778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377a:	f002 0204 	and.w	r2, r2, #4
 800377e:	9200      	str	r2, [sp, #0]
 8003780:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003782:	9401      	str	r4, [sp, #4]
 8003784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003786:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
 800378c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800378e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003792:	9201      	str	r2, [sp, #4]
 8003794:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003796:	9402      	str	r4, [sp, #8]
 8003798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
 80037a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a2:	f002 0201 	and.w	r2, r2, #1
 80037a6:	9202      	str	r2, [sp, #8]
 80037a8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037aa:	9403      	str	r4, [sp, #12]
 80037ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ae:	f042 0220 	orr.w	r2, r2, #32
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
 80037b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b6:	f002 0220 	and.w	r2, r2, #32
 80037ba:	9203      	str	r2, [sp, #12]
 80037bc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037be:	9404      	str	r4, [sp, #16]
 80037c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c2:	f042 0202 	orr.w	r2, r2, #2
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
 80037c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ca:	f002 0202 	and.w	r2, r2, #2
 80037ce:	9204      	str	r2, [sp, #16]
 80037d0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037d2:	9405      	str	r4, [sp, #20]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d6:	f042 0208 	orr.w	r2, r2, #8
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
 80037dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037de:	f002 0208 	and.w	r2, r2, #8
 80037e2:	9205      	str	r2, [sp, #20]
 80037e4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037e6:	9406      	str	r4, [sp, #24]
 80037e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	9306      	str	r3, [sp, #24]
 80037f8:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI1_CS0_Pin|SPI1_CS1_Pin, GPIO_PIN_RESET);
 80037fa:	4622      	mov	r2, r4
 80037fc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003800:	4849      	ldr	r0, [pc, #292]	; (8003928 <MX_GPIO_Init+0x1c4>)
 8003802:	f7fd fcff 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003806:	f8df a130 	ldr.w	sl, [pc, #304]	; 8003938 <MX_GPIO_Init+0x1d4>
 800380a:	4622      	mov	r2, r4
 800380c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003810:	4650      	mov	r0, sl
 8003812:	f7fd fcf7 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003816:	4f45      	ldr	r7, [pc, #276]	; (800392c <MX_GPIO_Init+0x1c8>)
 8003818:	4622      	mov	r2, r4
 800381a:	2140      	movs	r1, #64	; 0x40
 800381c:	4638      	mov	r0, r7
 800381e:	f7fd fcf1 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003822:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8003826:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800382a:	4b41      	ldr	r3, [pc, #260]	; (8003930 <MX_GPIO_Init+0x1cc>)
 800382c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003830:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800393c <MX_GPIO_Init+0x1d8>
 8003834:	a907      	add	r1, sp, #28
 8003836:	4648      	mov	r0, r9
 8003838:	f7fd fbf8 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800383c:	2332      	movs	r3, #50	; 0x32
 800383e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2602      	movs	r6, #2
 8003842:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003846:	2503      	movs	r5, #3
 8003848:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800384a:	f04f 080b 	mov.w	r8, #11
 800384e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003852:	a907      	add	r1, sp, #28
 8003854:	4648      	mov	r0, r9
 8003856:	f7fd fbe9 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 800385a:	2386      	movs	r3, #134	; 0x86
 800385c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003862:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003864:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003868:	a907      	add	r1, sp, #28
 800386a:	4832      	ldr	r0, [pc, #200]	; (8003934 <MX_GPIO_Init+0x1d0>)
 800386c:	f7fd fbde 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS0_Pin SPI1_CS1_Pin */
  GPIO_InitStruct.Pin = SPI1_CS0_Pin|SPI1_CS1_Pin;
 8003870:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003874:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003876:	f04f 0901 	mov.w	r9, #1
 800387a:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800387e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003882:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003884:	a907      	add	r1, sp, #28
 8003886:	4828      	ldr	r0, [pc, #160]	; (8003928 <MX_GPIO_Init+0x1c4>)
 8003888:	f7fd fbd0 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800388c:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003890:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003896:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800389a:	a907      	add	r1, sp, #28
 800389c:	4650      	mov	r0, sl
 800389e:	f7fd fbc5 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80038a2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80038a6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a8:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b0:	a907      	add	r1, sp, #28
 80038b2:	4650      	mov	r0, sl
 80038b4:	f7fd fbba 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80038b8:	2340      	movs	r3, #64	; 0x40
 80038ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038bc:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80038c4:	a907      	add	r1, sp, #28
 80038c6:	4638      	mov	r0, r7
 80038c8:	f7fd fbb0 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038d0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80038d4:	a907      	add	r1, sp, #28
 80038d6:	4638      	mov	r0, r7
 80038d8:	f7fd fba8 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80038dc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80038e0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80038e8:	230a      	movs	r3, #10
 80038ea:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ec:	a907      	add	r1, sp, #28
 80038ee:	4811      	ldr	r0, [pc, #68]	; (8003934 <MX_GPIO_Init+0x1d0>)
 80038f0:	f7fd fb9c 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80038f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038fa:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80038fe:	a907      	add	r1, sp, #28
 8003900:	480c      	ldr	r0, [pc, #48]	; (8003934 <MX_GPIO_Init+0x1d0>)
 8003902:	f7fd fb93 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003906:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800390a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003910:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003912:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003916:	a907      	add	r1, sp, #28
 8003918:	4638      	mov	r0, r7
 800391a:	f7fd fb87 	bl	800102c <HAL_GPIO_Init>

}
 800391e:	b00d      	add	sp, #52	; 0x34
 8003920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	40021400 	.word	0x40021400
 800392c:	40021800 	.word	0x40021800
 8003930:	10110000 	.word	0x10110000
 8003934:	40020000 	.word	0x40020000
 8003938:	40020400 	.word	0x40020400
 800393c:	40020800 	.word	0x40020800

08003940 <setPWM>:

/* USER CODE BEGIN 4 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse) {
 8003940:	b084      	sub	sp, #16
 8003942:	b500      	push	{lr}
 8003944:	b089      	sub	sp, #36	; 0x24
 8003946:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800394a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel);
 800394e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003950:	4670      	mov	r0, lr
 8003952:	f7fe fda3 	bl	800249c <HAL_TIM_PWM_Stop>
	// stop generation of pwm
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period;
 8003956:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800395a:	930d      	str	r3, [sp, #52]	; 0x34
	// set the period duration
	HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 800395c:	a80a      	add	r0, sp, #40	; 0x28
 800395e:	f7fe fcae 	bl	80022be <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003962:	2360      	movs	r3, #96	; 0x60
 8003964:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pulse;
 8003966:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800396a:	9302      	str	r3, [sp, #8]
	// set the pulse duration
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800396c:	2300      	movs	r3, #0
 800396e:	9303      	str	r3, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003970:	9305      	str	r3, [sp, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8003972:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003974:	a901      	add	r1, sp, #4
 8003976:	a80a      	add	r0, sp, #40	; 0x28
 8003978:	f7fe fcf2 	bl	8002360 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel);
 800397c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800397e:	a80a      	add	r0, sp, #40	; 0x28
 8003980:	f7fe fd6a 	bl	8002458 <HAL_TIM_PWM_Start>
}
 8003984:	b009      	add	sp, #36	; 0x24
 8003986:	f85d eb04 	ldr.w	lr, [sp], #4
 800398a:	b004      	add	sp, #16
 800398c:	4770      	bx	lr
	...

08003990 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	b0c5      	sub	sp, #276	; 0x114

  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003994:	2200      	movs	r2, #0
 8003996:	2180      	movs	r1, #128	; 0x80
 8003998:	48a1      	ldr	r0, [pc, #644]	; (8003c20 <StartDefaultTask+0x290>)
 800399a:	f7fd fc33 	bl	8001204 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, SPI1_CS0_Pin, GPIO_PIN_SET);
 800399e:	4ca1      	ldr	r4, [pc, #644]	; (8003c24 <StartDefaultTask+0x294>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039a6:	4620      	mov	r0, r4
 80039a8:	f7fd fc2c 	bl	8001204 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, SPI1_CS1_Pin, GPIO_PIN_SET);
 80039ac:	2201      	movs	r2, #1
 80039ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039b2:	4620      	mov	r0, r4
 80039b4:	f7fd fc26 	bl	8001204 <HAL_GPIO_WritePin>

  uint8_t spi_data[4] = {0};
 80039b8:	2100      	movs	r1, #0
 80039ba:	9143      	str	r1, [sp, #268]	; 0x10c
  int16_t bean_temp;
  int16_t element_temp;
  uint8_t heDutyCycle;
  char temp_msg[80] = {0};
 80039bc:	2250      	movs	r2, #80	; 0x50
 80039be:	a82f      	add	r0, sp, #188	; 0xbc
 80039c0:	f000 fc7f 	bl	80042c2 <memset>
  char tcError_msg[80];

  char init_msg[] = "IntelliRoast initializing...\r\n\r\n\r\n\r\n";
 80039c4:	ac11      	add	r4, sp, #68	; 0x44
 80039c6:	4d98      	ldr	r5, [pc, #608]	; (8003c28 <StartDefaultTask+0x298>)
 80039c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80039d4:	f844 0b04 	str.w	r0, [r4], #4
 80039d8:	7021      	strb	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)init_msg, strlen(init_msg), 0xFFF);
 80039da:	a811      	add	r0, sp, #68	; 0x44
 80039dc:	f7fc fbf8 	bl	80001d0 <strlen>
 80039e0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80039e4:	b282      	uxth	r2, r0
 80039e6:	a911      	add	r1, sp, #68	; 0x44
 80039e8:	4890      	ldr	r0, [pc, #576]	; (8003c2c <StartDefaultTask+0x29c>)
 80039ea:	f7fe ffbe 	bl	800296a <HAL_UART_Transmit>
 80039ee:	e0a7      	b.n	8003b40 <StartDefaultTask+0x1b0>
	HAL_GPIO_WritePin(GPIOF, SPI1_CS0_Pin, GPIO_PIN_RESET);
	HAL_SPI_Receive(&hspi1, spi_data, 4, 0xFF);
	osDelay(10);
	HAL_GPIO_WritePin(GPIOF, SPI1_CS0_Pin, GPIO_PIN_SET);
	if(max31855_Error(spi_data)) {
	  if (max31855_Disconnected(spi_data)) {
 80039f0:	a843      	add	r0, sp, #268	; 0x10c
 80039f2:	f000 fa9b 	bl	8003f2c <max31855_Disconnected>
 80039f6:	b1a0      	cbz	r0, 8003a22 <StartDefaultTask+0x92>
		  sprintf(tcError_msg, "ERROR: Bean Thermocouple Disconnected\r\n");
 80039f8:	ac1b      	add	r4, sp, #108	; 0x6c
 80039fa:	4d8d      	ldr	r5, [pc, #564]	; (8003c30 <StartDefaultTask+0x2a0>)
 80039fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a08:	e884 0003 	stmia.w	r4, {r0, r1}
	  } else if (max31855_ShortGND(spi_data)) {
		  sprintf(tcError_msg, "ERROR: Bean Thermocouple Shorted to GND\r\n");
	  } else {
		  sprintf(tcError_msg, "ERROR: Bean Thermocouple has unknown error\r\n");
	  }
	  HAL_UART_Transmit(&huart3, (uint8_t*)tcError_msg, strlen(tcError_msg), 0xFFF);
 8003a0c:	a81b      	add	r0, sp, #108	; 0x6c
 8003a0e:	f7fc fbdf 	bl	80001d0 <strlen>
 8003a12:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a16:	b282      	uxth	r2, r0
 8003a18:	a91b      	add	r1, sp, #108	; 0x6c
 8003a1a:	4884      	ldr	r0, [pc, #528]	; (8003c2c <StartDefaultTask+0x29c>)
 8003a1c:	f7fe ffa5 	bl	800296a <HAL_UART_Transmit>
 8003a20:	e0ae      	b.n	8003b80 <StartDefaultTask+0x1f0>
	  } else if (max31855_ShortVCC(spi_data)) {
 8003a22:	a843      	add	r0, sp, #268	; 0x10c
 8003a24:	f000 fa8a 	bl	8003f3c <max31855_ShortVCC>
 8003a28:	b150      	cbz	r0, 8003a40 <StartDefaultTask+0xb0>
		  sprintf(tcError_msg, "ERROR: Bean Thermocouple Shorted to VCC\r\n");
 8003a2a:	ac1b      	add	r4, sp, #108	; 0x6c
 8003a2c:	4d81      	ldr	r5, [pc, #516]	; (8003c34 <StartDefaultTask+0x2a4>)
 8003a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a3a:	c403      	stmia	r4!, {r0, r1}
 8003a3c:	8022      	strh	r2, [r4, #0]
 8003a3e:	e7e5      	b.n	8003a0c <StartDefaultTask+0x7c>
	  } else if (max31855_ShortGND(spi_data)) {
 8003a40:	a843      	add	r0, sp, #268	; 0x10c
 8003a42:	f000 fa77 	bl	8003f34 <max31855_ShortGND>
 8003a46:	b150      	cbz	r0, 8003a5e <StartDefaultTask+0xce>
		  sprintf(tcError_msg, "ERROR: Bean Thermocouple Shorted to GND\r\n");
 8003a48:	ac1b      	add	r4, sp, #108	; 0x6c
 8003a4a:	4d7b      	ldr	r5, [pc, #492]	; (8003c38 <StartDefaultTask+0x2a8>)
 8003a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a58:	c403      	stmia	r4!, {r0, r1}
 8003a5a:	8022      	strh	r2, [r4, #0]
 8003a5c:	e7d6      	b.n	8003a0c <StartDefaultTask+0x7c>
		  sprintf(tcError_msg, "ERROR: Bean Thermocouple has unknown error\r\n");
 8003a5e:	ac1b      	add	r4, sp, #108	; 0x6c
 8003a60:	4d76      	ldr	r5, [pc, #472]	; (8003c3c <StartDefaultTask+0x2ac>)
 8003a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a6e:	c407      	stmia	r4!, {r0, r1, r2}
 8003a70:	7023      	strb	r3, [r4, #0]
 8003a72:	e7cb      	b.n	8003a0c <StartDefaultTask+0x7c>
	HAL_SPI_Receive(&hspi1, spi_data, 4, 0xFF);
	HAL_GPIO_WritePin(GPIOF, SPI1_CS1_Pin, GPIO_PIN_SET);
	if(max31855_Error(spi_data)) {
		  if (max31855_Disconnected(spi_data)) {
			  sprintf(tcError_msg, "ERROR: HE Thermocouple Disconnected\r\n");
		} else if (max31855_ShortVCC(spi_data)) {
 8003a74:	a843      	add	r0, sp, #268	; 0x10c
 8003a76:	f000 fa61 	bl	8003f3c <max31855_ShortVCC>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	f000 80b2 	beq.w	8003be4 <StartDefaultTask+0x254>
		  sprintf(tcError_msg, "ERROR: HE Thermocouple Shorted to VCC\r\n");
 8003a80:	ad1b      	add	r5, sp, #108	; 0x6c
 8003a82:	4e6f      	ldr	r6, [pc, #444]	; (8003c40 <StartDefaultTask+0x2b0>)
 8003a84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a8c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003a90:	e885 0003 	stmia.w	r5, {r0, r1}
		} else if (max31855_ShortGND(spi_data)) {
		  sprintf(tcError_msg, "ERROR: HE Thermocouple Shorted to GND\r\n");
		} else {
		  sprintf(tcError_msg, "ERROR: HE Thermocouple has unknown error\r\n");
		}
		  HAL_UART_Transmit(&huart3, (uint8_t*)tcError_msg, strlen(tcError_msg), 0xFFF);
 8003a94:	a81b      	add	r0, sp, #108	; 0x6c
 8003a96:	f7fc fb9b 	bl	80001d0 <strlen>
 8003a9a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a9e:	b282      	uxth	r2, r0
 8003aa0:	a91b      	add	r1, sp, #108	; 0x6c
 8003aa2:	4862      	ldr	r0, [pc, #392]	; (8003c2c <StartDefaultTask+0x29c>)
 8003aa4:	f7fe ff61 	bl	800296a <HAL_UART_Transmit>
	}
	element_temp = max31855toCelcius(spi_data);
 8003aa8:	a843      	add	r0, sp, #268	; 0x10c
 8003aaa:	f000 fa31 	bl	8003f10 <max31855toCelcius>
 8003aae:	4605      	mov	r5, r0

	sprintf(temp_msg, "Bean Temp: %dC\r\n Element Temp: %dC\r\n\r\n",bean_temp, element_temp);
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	4963      	ldr	r1, [pc, #396]	; (8003c44 <StartDefaultTask+0x2b4>)
 8003ab6:	a82f      	add	r0, sp, #188	; 0xbc
 8003ab8:	f000 fc0c 	bl	80042d4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)temp_msg, strlen(temp_msg), 0xFFF);
 8003abc:	a82f      	add	r0, sp, #188	; 0xbc
 8003abe:	f7fc fb87 	bl	80001d0 <strlen>
 8003ac2:	4f5a      	ldr	r7, [pc, #360]	; (8003c2c <StartDefaultTask+0x29c>)
 8003ac4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003ac8:	b282      	uxth	r2, r0
 8003aca:	a92f      	add	r1, sp, #188	; 0xbc
 8003acc:	4638      	mov	r0, r7
 8003ace:	f7fe ff4c 	bl	800296a <HAL_UART_Transmit>

	heDutyCycle = HE_PID(bean_temp, element_temp, 0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7ff fdfa 	bl	80036d0 <HE_PID>
 8003adc:	4604      	mov	r4, r0
	sprintf(temp_msg, "Heating Element Duty Cycle: %d\r\n\r\n", heDutyCycle);
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4959      	ldr	r1, [pc, #356]	; (8003c48 <StartDefaultTask+0x2b8>)
 8003ae2:	a82f      	add	r0, sp, #188	; 0xbc
 8003ae4:	f000 fbf6 	bl	80042d4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)temp_msg, strlen(temp_msg), 0xFFF);
 8003ae8:	a82f      	add	r0, sp, #188	; 0xbc
 8003aea:	f7fc fb71 	bl	80001d0 <strlen>
 8003aee:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003af2:	b282      	uxth	r2, r0
 8003af4:	a92f      	add	r1, sp, #188	; 0xbc
 8003af6:	4638      	mov	r0, r7
 8003af8:	f7fe ff37 	bl	800296a <HAL_UART_Transmit>

	setPWM(htim2, TIM_CHANNEL_1, 999, heDutyCycle);
 8003afc:	4e53      	ldr	r6, [pc, #332]	; (8003c4c <StartDefaultTask+0x2bc>)
 8003afe:	b2a4      	uxth	r4, r4
 8003b00:	940e      	str	r4, [sp, #56]	; 0x38
 8003b02:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003b06:	930d      	str	r3, [sp, #52]	; 0x34
 8003b08:	2300      	movs	r3, #0
 8003b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8003b0c:	466c      	mov	r4, sp
 8003b0e:	f106 0510 	add.w	r5, r6, #16
 8003b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003b22:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003b26:	f7ff ff0b 	bl	8003940 <setPWM>
	HAL_UART_Transmit(&huart3, (uint8_t*)"Heating Element Duty Cycle set...\r\n\r\n", 37, 0xFFF);
 8003b2a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003b2e:	2225      	movs	r2, #37	; 0x25
 8003b30:	4947      	ldr	r1, [pc, #284]	; (8003c50 <StartDefaultTask+0x2c0>)
 8003b32:	4638      	mov	r0, r7
 8003b34:	f7fe ff19 	bl	800296a <HAL_UART_Transmit>

	osDelay(1000);
 8003b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b3c:	f7fe ffab 	bl	8002a96 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	4837      	ldr	r0, [pc, #220]	; (8003c20 <StartDefaultTask+0x290>)
 8003b44:	f7fd fb64 	bl	8001210 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOF, SPI1_CS0_Pin, GPIO_PIN_RESET);
 8003b48:	4c36      	ldr	r4, [pc, #216]	; (8003c24 <StartDefaultTask+0x294>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b50:	4620      	mov	r0, r4
 8003b52:	f7fd fb57 	bl	8001204 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, spi_data, 4, 0xFF);
 8003b56:	23ff      	movs	r3, #255	; 0xff
 8003b58:	2204      	movs	r2, #4
 8003b5a:	a943      	add	r1, sp, #268	; 0x10c
 8003b5c:	483d      	ldr	r0, [pc, #244]	; (8003c54 <StartDefaultTask+0x2c4>)
 8003b5e:	f7fe f82e 	bl	8001bbe <HAL_SPI_Receive>
	osDelay(10);
 8003b62:	200a      	movs	r0, #10
 8003b64:	f7fe ff97 	bl	8002a96 <osDelay>
	HAL_GPIO_WritePin(GPIOF, SPI1_CS0_Pin, GPIO_PIN_SET);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7fd fb48 	bl	8001204 <HAL_GPIO_WritePin>
	if(max31855_Error(spi_data)) {
 8003b74:	a843      	add	r0, sp, #268	; 0x10c
 8003b76:	f000 f9e5 	bl	8003f44 <max31855_Error>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	f47f af38 	bne.w	80039f0 <StartDefaultTask+0x60>
	bean_temp = max31855toCelcius(spi_data);
 8003b80:	a843      	add	r0, sp, #268	; 0x10c
 8003b82:	f000 f9c5 	bl	8003f10 <max31855toCelcius>
 8003b86:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOF, SPI1_CS1_Pin, GPIO_PIN_RESET);
 8003b88:	4d26      	ldr	r5, [pc, #152]	; (8003c24 <StartDefaultTask+0x294>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b90:	4628      	mov	r0, r5
 8003b92:	f7fd fb37 	bl	8001204 <HAL_GPIO_WritePin>
	osDelay(1);
 8003b96:	2001      	movs	r0, #1
 8003b98:	f7fe ff7d 	bl	8002a96 <osDelay>
	HAL_SPI_Receive(&hspi1, spi_data, 4, 0xFF);
 8003b9c:	23ff      	movs	r3, #255	; 0xff
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	a943      	add	r1, sp, #268	; 0x10c
 8003ba2:	482c      	ldr	r0, [pc, #176]	; (8003c54 <StartDefaultTask+0x2c4>)
 8003ba4:	f7fe f80b 	bl	8001bbe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOF, SPI1_CS1_Pin, GPIO_PIN_SET);
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bae:	4628      	mov	r0, r5
 8003bb0:	f7fd fb28 	bl	8001204 <HAL_GPIO_WritePin>
	if(max31855_Error(spi_data)) {
 8003bb4:	a843      	add	r0, sp, #268	; 0x10c
 8003bb6:	f000 f9c5 	bl	8003f44 <max31855_Error>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	f43f af74 	beq.w	8003aa8 <StartDefaultTask+0x118>
		  if (max31855_Disconnected(spi_data)) {
 8003bc0:	a843      	add	r0, sp, #268	; 0x10c
 8003bc2:	f000 f9b3 	bl	8003f2c <max31855_Disconnected>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	f43f af54 	beq.w	8003a74 <StartDefaultTask+0xe4>
			  sprintf(tcError_msg, "ERROR: HE Thermocouple Disconnected\r\n");
 8003bcc:	ad1b      	add	r5, sp, #108	; 0x6c
 8003bce:	4e22      	ldr	r6, [pc, #136]	; (8003c58 <StartDefaultTask+0x2c8>)
 8003bd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003bdc:	f845 0b04 	str.w	r0, [r5], #4
 8003be0:	8029      	strh	r1, [r5, #0]
 8003be2:	e757      	b.n	8003a94 <StartDefaultTask+0x104>
		} else if (max31855_ShortGND(spi_data)) {
 8003be4:	a843      	add	r0, sp, #268	; 0x10c
 8003be6:	f000 f9a5 	bl	8003f34 <max31855_ShortGND>
 8003bea:	b150      	cbz	r0, 8003c02 <StartDefaultTask+0x272>
		  sprintf(tcError_msg, "ERROR: HE Thermocouple Shorted to GND\r\n");
 8003bec:	ad1b      	add	r5, sp, #108	; 0x6c
 8003bee:	4e1b      	ldr	r6, [pc, #108]	; (8003c5c <StartDefaultTask+0x2cc>)
 8003bf0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003bfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c00:	e748      	b.n	8003a94 <StartDefaultTask+0x104>
		  sprintf(tcError_msg, "ERROR: HE Thermocouple has unknown error\r\n");
 8003c02:	ad1b      	add	r5, sp, #108	; 0x6c
 8003c04:	4e16      	ldr	r6, [pc, #88]	; (8003c60 <StartDefaultTask+0x2d0>)
 8003c06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003c12:	c503      	stmia	r5!, {r0, r1}
 8003c14:	f825 2b02 	strh.w	r2, [r5], #2
 8003c18:	0c12      	lsrs	r2, r2, #16
 8003c1a:	702a      	strb	r2, [r5, #0]
 8003c1c:	e73a      	b.n	8003a94 <StartDefaultTask+0x104>
 8003c1e:	bf00      	nop
 8003c20:	40020400 	.word	0x40020400
 8003c24:	40021400 	.word	0x40021400
 8003c28:	08004d3c 	.word	0x08004d3c
 8003c2c:	20003dec 	.word	0x20003dec
 8003c30:	08004b74 	.word	0x08004b74
 8003c34:	08004b9c 	.word	0x08004b9c
 8003c38:	08004bc8 	.word	0x08004bc8
 8003c3c:	08004bf4 	.word	0x08004bf4
 8003c40:	08004c4c 	.word	0x08004c4c
 8003c44:	08004cc8 	.word	0x08004cc8
 8003c48:	08004cf0 	.word	0x08004cf0
 8003c4c:	20003ec4 	.word	0x20003ec4
 8003c50:	08004d14 	.word	0x08004d14
 8003c54:	20003e6c 	.word	0x20003e6c
 8003c58:	08004c24 	.word	0x08004c24
 8003c5c:	08004c74 	.word	0x08004c74
 8003c60:	08004c9c 	.word	0x08004c9c

08003c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003c66:	6802      	ldr	r2, [r0, #0]
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d000      	beq.n	8003c70 <HAL_TIM_PeriodElapsedCallback+0xc>
 8003c6e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8003c70:	f7fd f958 	bl	8000f24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003c74:	e7fb      	b.n	8003c6e <HAL_TIM_PeriodElapsedCallback+0xa>
 8003c76:	bf00      	nop
 8003c78:	40010000 	.word	0x40010000

08003c7c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003c7c:	e7fe      	b.n	8003c7c <_Error_Handler>
	...

08003c80 <MX_USART3_UART_Init>:
{
 8003c80:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8003c82:	480b      	ldr	r0, [pc, #44]	; (8003cb0 <MX_USART3_UART_Init+0x30>)
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <MX_USART3_UART_Init+0x34>)
 8003c86:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8003c88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003c8c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c92:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c94:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c96:	220c      	movs	r2, #12
 8003c98:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c9a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c9c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c9e:	f7fe fe35 	bl	800290c <HAL_UART_Init>
 8003ca2:	b900      	cbnz	r0, 8003ca6 <MX_USART3_UART_Init+0x26>
 8003ca4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003ca6:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8003caa:	4803      	ldr	r0, [pc, #12]	; (8003cb8 <MX_USART3_UART_Init+0x38>)
 8003cac:	f7ff ffe6 	bl	8003c7c <_Error_Handler>
 8003cb0:	20003dec 	.word	0x20003dec
 8003cb4:	40004800 	.word	0x40004800
 8003cb8:	08004b64 	.word	0x08004b64

08003cbc <MX_SPI1_Init>:
{
 8003cbc:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8003cbe:	4810      	ldr	r0, [pc, #64]	; (8003d00 <MX_SPI1_Init+0x44>)
 8003cc0:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <MX_SPI1_Init+0x48>)
 8003cc2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cc4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003cc8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cce:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cd8:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003cda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003cde:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003ce0:	2228      	movs	r2, #40	; 0x28
 8003ce2:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ce4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ce6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cea:	230a      	movs	r3, #10
 8003cec:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cee:	f7fd fe05 	bl	80018fc <HAL_SPI_Init>
 8003cf2:	b900      	cbnz	r0, 8003cf6 <MX_SPI1_Init+0x3a>
 8003cf4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003cf6:	21f9      	movs	r1, #249	; 0xf9
 8003cf8:	4803      	ldr	r0, [pc, #12]	; (8003d08 <MX_SPI1_Init+0x4c>)
 8003cfa:	f7ff ffbf 	bl	8003c7c <_Error_Handler>
 8003cfe:	bf00      	nop
 8003d00:	20003e6c 	.word	0x20003e6c
 8003d04:	40013000 	.word	0x40013000
 8003d08:	08004b64 	.word	0x08004b64

08003d0c <MX_TIM3_Init>:
{
 8003d0c:	b500      	push	{lr}
 8003d0e:	b08f      	sub	sp, #60	; 0x3c
  htim3.Instance = TIM3;
 8003d10:	4826      	ldr	r0, [pc, #152]	; (8003dac <MX_TIM3_Init+0xa0>)
 8003d12:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <MX_TIM3_Init+0xa4>)
 8003d14:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 29999;
 8003d16:	f247 532f 	movw	r3, #29999	; 0x752f
 8003d1a:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 0;
 8003d20:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d22:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d24:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d26:	f7fe fab1 	bl	800228c <HAL_TIM_Base_Init>
 8003d2a:	bb28      	cbnz	r0, 8003d78 <MX_TIM3_Init+0x6c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d2c:	a90e      	add	r1, sp, #56	; 0x38
 8003d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d32:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d36:	481d      	ldr	r0, [pc, #116]	; (8003dac <MX_TIM3_Init+0xa0>)
 8003d38:	f7fe f8d0 	bl	8001edc <HAL_TIM_ConfigClockSource>
 8003d3c:	bb08      	cbnz	r0, 8003d82 <MX_TIM3_Init+0x76>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d3e:	481b      	ldr	r0, [pc, #108]	; (8003dac <MX_TIM3_Init+0xa0>)
 8003d40:	f7fe fabd 	bl	80022be <HAL_TIM_PWM_Init>
 8003d44:	bb10      	cbnz	r0, 8003d8c <MX_TIM3_Init+0x80>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d4a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d4c:	a908      	add	r1, sp, #32
 8003d4e:	4817      	ldr	r0, [pc, #92]	; (8003dac <MX_TIM3_Init+0xa0>)
 8003d50:	f7fe fbdc 	bl	800250c <HAL_TIMEx_MasterConfigSynchronization>
 8003d54:	b9f8      	cbnz	r0, 8003d96 <MX_TIM3_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d56:	2360      	movs	r3, #96	; 0x60
 8003d58:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d5e:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d60:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d62:	a901      	add	r1, sp, #4
 8003d64:	4811      	ldr	r0, [pc, #68]	; (8003dac <MX_TIM3_Init+0xa0>)
 8003d66:	f7fe fafb 	bl	8002360 <HAL_TIM_PWM_ConfigChannel>
 8003d6a:	b9c8      	cbnz	r0, 8003da0 <MX_TIM3_Init+0x94>
  HAL_TIM_MspPostInit(&htim3);
 8003d6c:	480f      	ldr	r0, [pc, #60]	; (8003dac <MX_TIM3_Init+0xa0>)
 8003d6e:	f000 f98d 	bl	800408c <HAL_TIM_MspPostInit>
}
 8003d72:	b00f      	add	sp, #60	; 0x3c
 8003d74:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003d78:	f44f 719a 	mov.w	r1, #308	; 0x134
 8003d7c:	480d      	ldr	r0, [pc, #52]	; (8003db4 <MX_TIM3_Init+0xa8>)
 8003d7e:	f7ff ff7d 	bl	8003c7c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003d82:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8003d86:	480b      	ldr	r0, [pc, #44]	; (8003db4 <MX_TIM3_Init+0xa8>)
 8003d88:	f7ff ff78 	bl	8003c7c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003d8c:	f240 113f 	movw	r1, #319	; 0x13f
 8003d90:	4808      	ldr	r0, [pc, #32]	; (8003db4 <MX_TIM3_Init+0xa8>)
 8003d92:	f7ff ff73 	bl	8003c7c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003d96:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003d9a:	4806      	ldr	r0, [pc, #24]	; (8003db4 <MX_TIM3_Init+0xa8>)
 8003d9c:	f7ff ff6e 	bl	8003c7c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003da0:	f240 114f 	movw	r1, #335	; 0x14f
 8003da4:	4803      	ldr	r0, [pc, #12]	; (8003db4 <MX_TIM3_Init+0xa8>)
 8003da6:	f7ff ff69 	bl	8003c7c <_Error_Handler>
 8003daa:	bf00      	nop
 8003dac:	20003e2c 	.word	0x20003e2c
 8003db0:	40000400 	.word	0x40000400
 8003db4:	08004b64 	.word	0x08004b64

08003db8 <MX_TIM2_Init>:
{
 8003db8:	b500      	push	{lr}
 8003dba:	b08b      	sub	sp, #44	; 0x2c
  htim2.Instance = TIM2;
 8003dbc:	481c      	ldr	r0, [pc, #112]	; (8003e30 <MX_TIM2_Init+0x78>)
 8003dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dc2:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 59999;
 8003dc4:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8003dc8:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 999;
 8003dce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003dd2:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dd4:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003dd8:	f7fe fa71 	bl	80022be <HAL_TIM_PWM_Init>
 8003ddc:	b9c0      	cbnz	r0, 8003e10 <MX_TIM2_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003de4:	a908      	add	r1, sp, #32
 8003de6:	4812      	ldr	r0, [pc, #72]	; (8003e30 <MX_TIM2_Init+0x78>)
 8003de8:	f7fe fb90 	bl	800250c <HAL_TIMEx_MasterConfigSynchronization>
 8003dec:	b9a8      	cbnz	r0, 8003e1a <MX_TIM2_Init+0x62>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dee:	2360      	movs	r3, #96	; 0x60
 8003df0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003df2:	2200      	movs	r2, #0
 8003df4:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003df6:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003df8:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dfa:	a901      	add	r1, sp, #4
 8003dfc:	480c      	ldr	r0, [pc, #48]	; (8003e30 <MX_TIM2_Init+0x78>)
 8003dfe:	f7fe faaf 	bl	8002360 <HAL_TIM_PWM_ConfigChannel>
 8003e02:	b978      	cbnz	r0, 8003e24 <MX_TIM2_Init+0x6c>
  HAL_TIM_MspPostInit(&htim2);
 8003e04:	480a      	ldr	r0, [pc, #40]	; (8003e30 <MX_TIM2_Init+0x78>)
 8003e06:	f000 f941 	bl	800408c <HAL_TIM_MspPostInit>
}
 8003e0a:	b00b      	add	sp, #44	; 0x2c
 8003e0c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003e10:	f240 110d 	movw	r1, #269	; 0x10d
 8003e14:	4807      	ldr	r0, [pc, #28]	; (8003e34 <MX_TIM2_Init+0x7c>)
 8003e16:	f7ff ff31 	bl	8003c7c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003e1a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003e1e:	4805      	ldr	r0, [pc, #20]	; (8003e34 <MX_TIM2_Init+0x7c>)
 8003e20:	f7ff ff2c 	bl	8003c7c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003e24:	f240 111d 	movw	r1, #285	; 0x11d
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <MX_TIM2_Init+0x7c>)
 8003e2a:	f7ff ff27 	bl	8003c7c <_Error_Handler>
 8003e2e:	bf00      	nop
 8003e30:	20003ec4 	.word	0x20003ec4
 8003e34:	08004b64 	.word	0x08004b64

08003e38 <SystemClock_Config>:
{
 8003e38:	b500      	push	{lr}
 8003e3a:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e40:	2201      	movs	r2, #1
 8003e42:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003e44:	2210      	movs	r2, #16
 8003e46:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e48:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8003e4e:	220d      	movs	r2, #13
 8003e50:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8003e52:	22c3      	movs	r2, #195	; 0xc3
 8003e54:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e56:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8003e58:	2305      	movs	r3, #5
 8003e5a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e5c:	a806      	add	r0, sp, #24
 8003e5e:	f7fd f9db 	bl	8001218 <HAL_RCC_OscConfig>
 8003e62:	bb20      	cbnz	r0, 8003eae <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e64:	230f      	movs	r3, #15
 8003e66:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e74:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e7a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003e7c:	2103      	movs	r1, #3
 8003e7e:	a801      	add	r0, sp, #4
 8003e80:	f7fd fbdc 	bl	800163c <HAL_RCC_ClockConfig>
 8003e84:	b9b8      	cbnz	r0, 8003eb6 <SystemClock_Config+0x7e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003e86:	f7fd fc8b 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <SystemClock_Config+0x88>)
 8003e8c:	fba3 3000 	umull	r3, r0, r3, r0
 8003e90:	0980      	lsrs	r0, r0, #6
 8003e92:	f7fd f8a5 	bl	8000fe0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003e96:	2004      	movs	r0, #4
 8003e98:	f7fd f8b8 	bl	800100c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	210f      	movs	r1, #15
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ea4:	f7fd f85e 	bl	8000f64 <HAL_NVIC_SetPriority>
}
 8003ea8:	b013      	add	sp, #76	; 0x4c
 8003eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003eae:	21c9      	movs	r1, #201	; 0xc9
 8003eb0:	4804      	ldr	r0, [pc, #16]	; (8003ec4 <SystemClock_Config+0x8c>)
 8003eb2:	f7ff fee3 	bl	8003c7c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003eb6:	21d7      	movs	r1, #215	; 0xd7
 8003eb8:	4802      	ldr	r0, [pc, #8]	; (8003ec4 <SystemClock_Config+0x8c>)
 8003eba:	f7ff fedf 	bl	8003c7c <_Error_Handler>
 8003ebe:	bf00      	nop
 8003ec0:	10624dd3 	.word	0x10624dd3
 8003ec4:	08004b64 	.word	0x08004b64

08003ec8 <main>:
{
 8003ec8:	b500      	push	{lr}
 8003eca:	b087      	sub	sp, #28
  HAL_Init();
 8003ecc:	f7fd f810 	bl	8000ef0 <HAL_Init>
  SystemClock_Config();
 8003ed0:	f7ff ffb2 	bl	8003e38 <SystemClock_Config>
  MX_GPIO_Init();
 8003ed4:	f7ff fc46 	bl	8003764 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003ed8:	f7ff fed2 	bl	8003c80 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003edc:	f7ff feee 	bl	8003cbc <MX_SPI1_Init>
  MX_TIM3_Init();
 8003ee0:	f7ff ff14 	bl	8003d0c <MX_TIM3_Init>
  MX_TIM2_Init();
 8003ee4:	f7ff ff68 	bl	8003db8 <MX_TIM2_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8003ee8:	ac01      	add	r4, sp, #4
 8003eea:	4d07      	ldr	r5, [pc, #28]	; (8003f08 <main+0x40>)
 8003eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	a801      	add	r0, sp, #4
 8003ef8:	f7fe fdb3 	bl	8002a62 <osThreadCreate>
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <main+0x44>)
 8003efe:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003f00:	f7fe fdaa 	bl	8002a58 <osKernelStart>
 8003f04:	e7fe      	b.n	8003f04 <main+0x3c>
 8003f06:	bf00      	nop
 8003f08:	08004b48 	.word	0x08004b48
 8003f0c:	20003de8 	.word	0x20003de8

08003f10 <max31855toCelcius>:

int16_t max31855toCelcius(uint8_t *pu8Data) {
    uint16_t u16RawTemp;
    int16_t i16Celcius;

	u16RawTemp = pu8Data[0]; //The Thermocouple temperature is stored in the upper 14 bits, bit 16 & 17 are not needed.
 8003f10:	7803      	ldrb	r3, [r0, #0]
    u16RawTemp <<= 8;
    u16RawTemp |= pu8Data[1];
 8003f12:	7840      	ldrb	r0, [r0, #1]
 8003f14:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    
    if (u16RawTemp & 0x8000) { //temperature is negative
 8003f18:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003f1c:	d102      	bne.n	8003f24 <max31855toCelcius+0x14>
        u16RawTemp = 0xF000 | (u16RawTemp >> 4); // drop lower 4 bits and keep 2's complement

    } else { // temp is positive
        u16RawTemp >>= 4; //drop lower 4 bits.
 8003f1e:	0900      	lsrs	r0, r0, #4
    }
    i16Celcius = u16RawTemp & 0xFFFF;

    return i16Celcius;
}
 8003f20:	b200      	sxth	r0, r0
 8003f22:	4770      	bx	lr
        u16RawTemp = 0xF000 | (u16RawTemp >> 4); // drop lower 4 bits and keep 2's complement
 8003f24:	0900      	lsrs	r0, r0, #4
 8003f26:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000
 8003f2a:	e7f9      	b.n	8003f20 <max31855toCelcius+0x10>

08003f2c <max31855_Disconnected>:

int max31855_Disconnected(uint8_t * pu8Data) {
    // If the thermocouple is disconnected, then the first bit is set. 
    // So if you & the first byte with 0x01, then if its disconnected,
    // it will return true 
    return (pu8Data[3] & 0x01);
 8003f2c:	78c0      	ldrb	r0, [r0, #3]
}
 8003f2e:	f000 0001 	and.w	r0, r0, #1
 8003f32:	4770      	bx	lr

08003f34 <max31855_ShortGND>:
 * \brief Return true if the leads are shorted to ground.
 * @param pu8Data: array of bytes read from max31855 over SPI 
 * @retval int
 */
int max31855_ShortGND(uint8_t * pu8Data) {
    return (pu8Data[3] & 0x02);
 8003f34:	78c0      	ldrb	r0, [r0, #3]
}
 8003f36:	f000 0002 	and.w	r0, r0, #2
 8003f3a:	4770      	bx	lr

08003f3c <max31855_ShortVCC>:
 * \brief Return true if the leads are shorted to VCC.
 * @param pu8Data: array of bytes read from max31855 over SPI 
 * @retval int
 */
int max31855_ShortVCC(uint8_t * pu8Data) {
    return (pu8Data[3] & 0x04);
 8003f3c:	78c0      	ldrb	r0, [r0, #3]
}
 8003f3e:	f000 0004 	and.w	r0, r0, #4
 8003f42:	4770      	bx	lr

08003f44 <max31855_Error>:
 * @retval int
 */
int max31855_Error(uint8_t * pu8Data) {
    // bit 16 of the 32 bits is set if bit [0:2] are set,
    // indicating some kind of error.
    return (pu8Data[1] & 0x01); 
 8003f44:	7840      	ldrb	r0, [r0, #1]
}
 8003f46:	f000 0001 	and.w	r0, r0, #1
 8003f4a:	4770      	bx	lr

08003f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f4c:	b510      	push	{r4, lr}
 8003f4e:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f50:	2400      	movs	r4, #0
 8003f52:	9400      	str	r4, [sp, #0]
 8003f54:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_MspInit+0x90>)
 8003f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f60:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003f64:	9200      	str	r2, [sp, #0]
 8003f66:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f68:	9401      	str	r4, [sp, #4]
 8003f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	f7fc ffdf 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003f82:	4622      	mov	r2, r4
 8003f84:	4621      	mov	r1, r4
 8003f86:	f06f 000b 	mvn.w	r0, #11
 8003f8a:	f7fc ffeb 	bl	8000f64 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003f8e:	4622      	mov	r2, r4
 8003f90:	4621      	mov	r1, r4
 8003f92:	f06f 000a 	mvn.w	r0, #10
 8003f96:	f7fc ffe5 	bl	8000f64 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	f06f 0009 	mvn.w	r0, #9
 8003fa2:	f7fc ffdf 	bl	8000f64 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	4621      	mov	r1, r4
 8003faa:	f06f 0004 	mvn.w	r0, #4
 8003fae:	f7fc ffd9 	bl	8000f64 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	f06f 0003 	mvn.w	r0, #3
 8003fba:	f7fc ffd3 	bl	8000f64 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	210f      	movs	r1, #15
 8003fc2:	f06f 0001 	mvn.w	r0, #1
 8003fc6:	f7fc ffcd 	bl	8000f64 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003fca:	4622      	mov	r2, r4
 8003fcc:	210f      	movs	r1, #15
 8003fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd2:	f7fc ffc7 	bl	8000f64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fd6:	b002      	add	sp, #8
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800

08003fe0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003fe0:	6802      	ldr	r2, [r0, #0]
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_SPI_MspInit+0x48>)
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d000      	beq.n	8003fea <HAL_SPI_MspInit+0xa>
 8003fe8:	4770      	bx	lr
{
 8003fea:	b500      	push	{lr}
 8003fec:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fee:	2100      	movs	r1, #0
 8003ff0:	9100      	str	r1, [sp, #0]
 8003ff2:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004008:	2370      	movs	r3, #112	; 0x70
 800400a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	2302      	movs	r3, #2
 800400e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004012:	2303      	movs	r3, #3
 8004014:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004016:	2305      	movs	r3, #5
 8004018:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401a:	a901      	add	r1, sp, #4
 800401c:	4803      	ldr	r0, [pc, #12]	; (800402c <HAL_SPI_MspInit+0x4c>)
 800401e:	f7fd f805 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004022:	b007      	add	sp, #28
 8004024:	f85d fb04 	ldr.w	pc, [sp], #4
 8004028:	40013000 	.word	0x40013000
 800402c:	40020000 	.word	0x40020000

08004030 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8004030:	6803      	ldr	r3, [r0, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d000      	beq.n	800403a <HAL_TIM_PWM_MspInit+0xa>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004038:	4770      	bx	lr
{
 800403a:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 800403c:	2300      	movs	r3, #0
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_TIM_PWM_MspInit+0x28>)
 8004042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	9b01      	ldr	r3, [sp, #4]
}
 8004054:	b002      	add	sp, #8
 8004056:	e7ef      	b.n	8004038 <HAL_TIM_PWM_MspInit+0x8>
 8004058:	40023800 	.word	0x40023800

0800405c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM3)
 800405c:	6802      	ldr	r2, [r0, #0]
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_TIM_Base_MspInit+0x28>)
 8004060:	429a      	cmp	r2, r3
 8004062:	d000      	beq.n	8004066 <HAL_TIM_Base_MspInit+0xa>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004064:	4770      	bx	lr
{
 8004066:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004068:	2300      	movs	r3, #0
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_TIM_Base_MspInit+0x2c>)
 800406e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004070:	f042 0202 	orr.w	r2, r2, #2
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	9b01      	ldr	r3, [sp, #4]
}
 8004080:	b002      	add	sp, #8
 8004082:	e7ef      	b.n	8004064 <HAL_TIM_Base_MspInit+0x8>
 8004084:	40000400 	.word	0x40000400
 8004088:	40023800 	.word	0x40023800

0800408c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800408c:	b500      	push	{lr}
 800408e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8004090:	6803      	ldr	r3, [r0, #0]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d005      	beq.n	80040a4 <HAL_TIM_MspPostInit+0x18>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8004098:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <HAL_TIM_MspPostInit+0x4c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <HAL_TIM_MspPostInit+0x32>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800409e:	b007      	add	sp, #28
 80040a0:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040a4:	2301      	movs	r3, #1
 80040a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2202      	movs	r2, #2
 80040aa:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2200      	movs	r2, #0
 80040ae:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b0:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b4:	a901      	add	r1, sp, #4
 80040b6:	4809      	ldr	r0, [pc, #36]	; (80040dc <HAL_TIM_MspPostInit+0x50>)
 80040b8:	f7fc ffb8 	bl	800102c <HAL_GPIO_Init>
 80040bc:	e7ef      	b.n	800409e <HAL_TIM_MspPostInit+0x12>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040be:	2340      	movs	r3, #64	; 0x40
 80040c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c2:	2302      	movs	r3, #2
 80040c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c6:	2200      	movs	r2, #0
 80040c8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ca:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ce:	a901      	add	r1, sp, #4
 80040d0:	4803      	ldr	r0, [pc, #12]	; (80040e0 <HAL_TIM_MspPostInit+0x54>)
 80040d2:	f7fc ffab 	bl	800102c <HAL_GPIO_Init>
}
 80040d6:	e7e2      	b.n	800409e <HAL_TIM_MspPostInit+0x12>
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40020000 	.word	0x40020000
 80040e0:	40020800 	.word	0x40020800

080040e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 80040e4:	6802      	ldr	r2, [r0, #0]
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_UART_MspInit+0x4c>)
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d000      	beq.n	80040ee <HAL_UART_MspInit+0xa>
 80040ec:	4770      	bx	lr
{
 80040ee:	b500      	push	{lr}
 80040f0:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <HAL_UART_MspInit+0x50>)
 80040f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	9b00      	ldr	r3, [sp, #0]
  
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800410a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800410e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2302      	movs	r3, #2
 8004112:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004114:	2301      	movs	r3, #1
 8004116:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004118:	2303      	movs	r3, #3
 800411a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800411c:	2307      	movs	r3, #7
 800411e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004120:	a901      	add	r1, sp, #4
 8004122:	4805      	ldr	r0, [pc, #20]	; (8004138 <HAL_UART_MspInit+0x54>)
 8004124:	f7fc ff82 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004128:	b007      	add	sp, #28
 800412a:	f85d fb04 	ldr.w	pc, [sp], #4
 800412e:	bf00      	nop
 8004130:	40004800 	.word	0x40004800
 8004134:	40023800 	.word	0x40023800
 8004138:	40020c00 	.word	0x40020c00

0800413c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800413c:	b510      	push	{r4, lr}
 800413e:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004140:	2200      	movs	r2, #0
 8004142:	4601      	mov	r1, r0
 8004144:	2019      	movs	r0, #25
 8004146:	f7fc ff0d 	bl	8000f64 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800414a:	2019      	movs	r0, #25
 800414c:	f7fc ff3c 	bl	8000fc8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004150:	2400      	movs	r4, #0
 8004152:	9401      	str	r4, [sp, #4]
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_InitTick+0x6c>)
 8004156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004168:	a902      	add	r1, sp, #8
 800416a:	a803      	add	r0, sp, #12
 800416c:	f7fd fb4a 	bl	8001804 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004170:	f7fd fb32 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 8004174:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004176:	480d      	ldr	r0, [pc, #52]	; (80041ac <HAL_InitTick+0x70>)
 8004178:	fba0 2303 	umull	r2, r3, r0, r3
 800417c:	0c9b      	lsrs	r3, r3, #18
 800417e:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004180:	480b      	ldr	r0, [pc, #44]	; (80041b0 <HAL_InitTick+0x74>)
 8004182:	4a0c      	ldr	r2, [pc, #48]	; (80041b4 <HAL_InitTick+0x78>)
 8004184:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800418a:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800418c:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800418e:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004190:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004192:	f7fe f87b 	bl	800228c <HAL_TIM_Base_Init>
 8004196:	b110      	cbz	r0, 800419e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004198:	2001      	movs	r0, #1
}
 800419a:	b008      	add	sp, #32
 800419c:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800419e:	4804      	ldr	r0, [pc, #16]	; (80041b0 <HAL_InitTick+0x74>)
 80041a0:	f7fd fe90 	bl	8001ec4 <HAL_TIM_Base_Start_IT>
 80041a4:	e7f9      	b.n	800419a <HAL_InitTick+0x5e>
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	431bde83 	.word	0x431bde83
 80041b0:	20003f04 	.word	0x20003f04
 80041b4:	40010000 	.word	0x40010000

080041b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80041b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80041ba:	f7fe fc75 	bl	8002aa8 <osSystickHandler>
 80041be:	bd08      	pop	{r3, pc}

080041c0 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041c2:	4802      	ldr	r0, [pc, #8]	; (80041cc <TIM1_UP_TIM10_IRQHandler+0xc>)
 80041c4:	f7fd ff12 	bl	8001fec <HAL_TIM_IRQHandler>
 80041c8:	bd08      	pop	{r3, pc}
 80041ca:	bf00      	nop
 80041cc:	20003f04 	.word	0x20003f04

080041d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <SystemInit+0x34>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041da:	2100      	movs	r1, #0
 80041dc:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80041e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041e8:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80041ea:	4a07      	ldr	r2, [pc, #28]	; (8004208 <SystemInit+0x38>)
 80041ec:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041f4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041f6:	60d9      	str	r1, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <SystemInit+0x3c>)
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
 8004208:	24003010 	.word	0x24003010
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004248 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004216:	e003      	b.n	8004220 <LoopCopyDataInit>

08004218 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800421a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800421c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800421e:	3104      	adds	r1, #4

08004220 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004220:	480b      	ldr	r0, [pc, #44]	; (8004250 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004224:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004226:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004228:	d3f6      	bcc.n	8004218 <CopyDataInit>
  ldr  r2, =_sbss
 800422a:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800422c:	e002      	b.n	8004234 <LoopFillZerobss>

0800422e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800422e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004230:	f842 3b04 	str.w	r3, [r2], #4

08004234 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004236:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004238:	d3f9      	bcc.n	800422e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800423a:	f7ff ffc9 	bl	80041d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800423e:	f000 f811 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004242:	f7ff fe41 	bl	8003ec8 <main>
  bx  lr
 8004246:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004248:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800424c:	08004dcc 	.word	0x08004dcc
  ldr  r0, =_sdata
 8004250:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004254:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8004258:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 800425c:	20003f48 	.word	0x20003f48

08004260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004260:	e7fe      	b.n	8004260 <ADC_IRQHandler>
	...

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	2500      	movs	r5, #0
 8004268:	4e0c      	ldr	r6, [pc, #48]	; (800429c <__libc_init_array+0x38>)
 800426a:	4c0d      	ldr	r4, [pc, #52]	; (80042a0 <__libc_init_array+0x3c>)
 800426c:	1ba4      	subs	r4, r4, r6
 800426e:	10a4      	asrs	r4, r4, #2
 8004270:	42a5      	cmp	r5, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	f000 fc5c 	bl	8004b30 <_init>
 8004278:	2500      	movs	r5, #0
 800427a:	4e0a      	ldr	r6, [pc, #40]	; (80042a4 <__libc_init_array+0x40>)
 800427c:	4c0a      	ldr	r4, [pc, #40]	; (80042a8 <__libc_init_array+0x44>)
 800427e:	1ba4      	subs	r4, r4, r6
 8004280:	10a4      	asrs	r4, r4, #2
 8004282:	42a5      	cmp	r5, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800428c:	4798      	blx	r3
 800428e:	3501      	adds	r5, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004296:	4798      	blx	r3
 8004298:	3501      	adds	r5, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	08004dc4 	.word	0x08004dc4
 80042a0:	08004dc4 	.word	0x08004dc4
 80042a4:	08004dc4 	.word	0x08004dc4
 80042a8:	08004dc8 	.word	0x08004dc8

080042ac <memcpy>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	1e43      	subs	r3, r0, #1
 80042b0:	440a      	add	r2, r1
 80042b2:	4291      	cmp	r1, r2
 80042b4:	d100      	bne.n	80042b8 <memcpy+0xc>
 80042b6:	bd10      	pop	{r4, pc}
 80042b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c0:	e7f7      	b.n	80042b2 <memcpy+0x6>

080042c2 <memset>:
 80042c2:	4603      	mov	r3, r0
 80042c4:	4402      	add	r2, r0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d100      	bne.n	80042cc <memset+0xa>
 80042ca:	4770      	bx	lr
 80042cc:	f803 1b01 	strb.w	r1, [r3], #1
 80042d0:	e7f9      	b.n	80042c6 <memset+0x4>
	...

080042d4 <siprintf>:
 80042d4:	b40e      	push	{r1, r2, r3}
 80042d6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80042da:	b500      	push	{lr}
 80042dc:	b09c      	sub	sp, #112	; 0x70
 80042de:	f8ad 1014 	strh.w	r1, [sp, #20]
 80042e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042e6:	9104      	str	r1, [sp, #16]
 80042e8:	9107      	str	r1, [sp, #28]
 80042ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80042ee:	ab1d      	add	r3, sp, #116	; 0x74
 80042f0:	9002      	str	r0, [sp, #8]
 80042f2:	9006      	str	r0, [sp, #24]
 80042f4:	4808      	ldr	r0, [pc, #32]	; (8004318 <siprintf+0x44>)
 80042f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80042fa:	f8ad 1016 	strh.w	r1, [sp, #22]
 80042fe:	6800      	ldr	r0, [r0, #0]
 8004300:	a902      	add	r1, sp, #8
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	f000 f866 	bl	80043d4 <_svfiprintf_r>
 8004308:	2200      	movs	r2, #0
 800430a:	9b02      	ldr	r3, [sp, #8]
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	b01c      	add	sp, #112	; 0x70
 8004310:	f85d eb04 	ldr.w	lr, [sp], #4
 8004314:	b003      	add	sp, #12
 8004316:	4770      	bx	lr
 8004318:	20000008 	.word	0x20000008

0800431c <__ssputs_r>:
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	688e      	ldr	r6, [r1, #8]
 8004322:	4682      	mov	sl, r0
 8004324:	429e      	cmp	r6, r3
 8004326:	460c      	mov	r4, r1
 8004328:	4691      	mov	r9, r2
 800432a:	4698      	mov	r8, r3
 800432c:	d835      	bhi.n	800439a <__ssputs_r+0x7e>
 800432e:	898a      	ldrh	r2, [r1, #12]
 8004330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004334:	d031      	beq.n	800439a <__ssputs_r+0x7e>
 8004336:	2302      	movs	r3, #2
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	6909      	ldr	r1, [r1, #16]
 800433c:	1a6f      	subs	r7, r5, r1
 800433e:	6965      	ldr	r5, [r4, #20]
 8004340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004344:	fb95 f5f3 	sdiv	r5, r5, r3
 8004348:	f108 0301 	add.w	r3, r8, #1
 800434c:	443b      	add	r3, r7
 800434e:	429d      	cmp	r5, r3
 8004350:	bf38      	it	cc
 8004352:	461d      	movcc	r5, r3
 8004354:	0553      	lsls	r3, r2, #21
 8004356:	d531      	bpl.n	80043bc <__ssputs_r+0xa0>
 8004358:	4629      	mov	r1, r5
 800435a:	f000 fb3b 	bl	80049d4 <_malloc_r>
 800435e:	4606      	mov	r6, r0
 8004360:	b950      	cbnz	r0, 8004378 <__ssputs_r+0x5c>
 8004362:	230c      	movs	r3, #12
 8004364:	f8ca 3000 	str.w	r3, [sl]
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800436e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004372:	81a3      	strh	r3, [r4, #12]
 8004374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004378:	463a      	mov	r2, r7
 800437a:	6921      	ldr	r1, [r4, #16]
 800437c:	f7ff ff96 	bl	80042ac <memcpy>
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	6126      	str	r6, [r4, #16]
 800438e:	443e      	add	r6, r7
 8004390:	6026      	str	r6, [r4, #0]
 8004392:	4646      	mov	r6, r8
 8004394:	6165      	str	r5, [r4, #20]
 8004396:	1bed      	subs	r5, r5, r7
 8004398:	60a5      	str	r5, [r4, #8]
 800439a:	4546      	cmp	r6, r8
 800439c:	bf28      	it	cs
 800439e:	4646      	movcs	r6, r8
 80043a0:	4649      	mov	r1, r9
 80043a2:	4632      	mov	r2, r6
 80043a4:	6820      	ldr	r0, [r4, #0]
 80043a6:	f000 faaf 	bl	8004908 <memmove>
 80043aa:	68a3      	ldr	r3, [r4, #8]
 80043ac:	2000      	movs	r0, #0
 80043ae:	1b9b      	subs	r3, r3, r6
 80043b0:	60a3      	str	r3, [r4, #8]
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	441e      	add	r6, r3
 80043b6:	6026      	str	r6, [r4, #0]
 80043b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043bc:	462a      	mov	r2, r5
 80043be:	f000 fb67 	bl	8004a90 <_realloc_r>
 80043c2:	4606      	mov	r6, r0
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d1e1      	bne.n	800438c <__ssputs_r+0x70>
 80043c8:	6921      	ldr	r1, [r4, #16]
 80043ca:	4650      	mov	r0, sl
 80043cc:	f000 fab6 	bl	800493c <_free_r>
 80043d0:	e7c7      	b.n	8004362 <__ssputs_r+0x46>
	...

080043d4 <_svfiprintf_r>:
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	b09d      	sub	sp, #116	; 0x74
 80043da:	9303      	str	r3, [sp, #12]
 80043dc:	898b      	ldrh	r3, [r1, #12]
 80043de:	4680      	mov	r8, r0
 80043e0:	061c      	lsls	r4, r3, #24
 80043e2:	460d      	mov	r5, r1
 80043e4:	4616      	mov	r6, r2
 80043e6:	d50f      	bpl.n	8004408 <_svfiprintf_r+0x34>
 80043e8:	690b      	ldr	r3, [r1, #16]
 80043ea:	b96b      	cbnz	r3, 8004408 <_svfiprintf_r+0x34>
 80043ec:	2140      	movs	r1, #64	; 0x40
 80043ee:	f000 faf1 	bl	80049d4 <_malloc_r>
 80043f2:	6028      	str	r0, [r5, #0]
 80043f4:	6128      	str	r0, [r5, #16]
 80043f6:	b928      	cbnz	r0, 8004404 <_svfiprintf_r+0x30>
 80043f8:	230c      	movs	r3, #12
 80043fa:	f8c8 3000 	str.w	r3, [r8]
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004402:	e0c4      	b.n	800458e <_svfiprintf_r+0x1ba>
 8004404:	2340      	movs	r3, #64	; 0x40
 8004406:	616b      	str	r3, [r5, #20]
 8004408:	2300      	movs	r3, #0
 800440a:	9309      	str	r3, [sp, #36]	; 0x24
 800440c:	2320      	movs	r3, #32
 800440e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004412:	2330      	movs	r3, #48	; 0x30
 8004414:	f04f 0b01 	mov.w	fp, #1
 8004418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800441c:	4637      	mov	r7, r6
 800441e:	463c      	mov	r4, r7
 8004420:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d13c      	bne.n	80044a2 <_svfiprintf_r+0xce>
 8004428:	ebb7 0a06 	subs.w	sl, r7, r6
 800442c:	d00b      	beq.n	8004446 <_svfiprintf_r+0x72>
 800442e:	4653      	mov	r3, sl
 8004430:	4632      	mov	r2, r6
 8004432:	4629      	mov	r1, r5
 8004434:	4640      	mov	r0, r8
 8004436:	f7ff ff71 	bl	800431c <__ssputs_r>
 800443a:	3001      	adds	r0, #1
 800443c:	f000 80a2 	beq.w	8004584 <_svfiprintf_r+0x1b0>
 8004440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004442:	4453      	add	r3, sl
 8004444:	9309      	str	r3, [sp, #36]	; 0x24
 8004446:	783b      	ldrb	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 809b 	beq.w	8004584 <_svfiprintf_r+0x1b0>
 800444e:	2300      	movs	r3, #0
 8004450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004454:	9304      	str	r3, [sp, #16]
 8004456:	9307      	str	r3, [sp, #28]
 8004458:	9205      	str	r2, [sp, #20]
 800445a:	9306      	str	r3, [sp, #24]
 800445c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004460:	931a      	str	r3, [sp, #104]	; 0x68
 8004462:	2205      	movs	r2, #5
 8004464:	7821      	ldrb	r1, [r4, #0]
 8004466:	4850      	ldr	r0, [pc, #320]	; (80045a8 <_svfiprintf_r+0x1d4>)
 8004468:	f000 fa40 	bl	80048ec <memchr>
 800446c:	1c67      	adds	r7, r4, #1
 800446e:	9b04      	ldr	r3, [sp, #16]
 8004470:	b9d8      	cbnz	r0, 80044aa <_svfiprintf_r+0xd6>
 8004472:	06d9      	lsls	r1, r3, #27
 8004474:	bf44      	itt	mi
 8004476:	2220      	movmi	r2, #32
 8004478:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800447c:	071a      	lsls	r2, r3, #28
 800447e:	bf44      	itt	mi
 8004480:	222b      	movmi	r2, #43	; 0x2b
 8004482:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004486:	7822      	ldrb	r2, [r4, #0]
 8004488:	2a2a      	cmp	r2, #42	; 0x2a
 800448a:	d016      	beq.n	80044ba <_svfiprintf_r+0xe6>
 800448c:	2100      	movs	r1, #0
 800448e:	200a      	movs	r0, #10
 8004490:	9a07      	ldr	r2, [sp, #28]
 8004492:	4627      	mov	r7, r4
 8004494:	783b      	ldrb	r3, [r7, #0]
 8004496:	3401      	adds	r4, #1
 8004498:	3b30      	subs	r3, #48	; 0x30
 800449a:	2b09      	cmp	r3, #9
 800449c:	d950      	bls.n	8004540 <_svfiprintf_r+0x16c>
 800449e:	b1c9      	cbz	r1, 80044d4 <_svfiprintf_r+0x100>
 80044a0:	e011      	b.n	80044c6 <_svfiprintf_r+0xf2>
 80044a2:	2b25      	cmp	r3, #37	; 0x25
 80044a4:	d0c0      	beq.n	8004428 <_svfiprintf_r+0x54>
 80044a6:	4627      	mov	r7, r4
 80044a8:	e7b9      	b.n	800441e <_svfiprintf_r+0x4a>
 80044aa:	4a3f      	ldr	r2, [pc, #252]	; (80045a8 <_svfiprintf_r+0x1d4>)
 80044ac:	463c      	mov	r4, r7
 80044ae:	1a80      	subs	r0, r0, r2
 80044b0:	fa0b f000 	lsl.w	r0, fp, r0
 80044b4:	4318      	orrs	r0, r3
 80044b6:	9004      	str	r0, [sp, #16]
 80044b8:	e7d3      	b.n	8004462 <_svfiprintf_r+0x8e>
 80044ba:	9a03      	ldr	r2, [sp, #12]
 80044bc:	1d11      	adds	r1, r2, #4
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	9103      	str	r1, [sp, #12]
 80044c2:	2a00      	cmp	r2, #0
 80044c4:	db01      	blt.n	80044ca <_svfiprintf_r+0xf6>
 80044c6:	9207      	str	r2, [sp, #28]
 80044c8:	e004      	b.n	80044d4 <_svfiprintf_r+0x100>
 80044ca:	4252      	negs	r2, r2
 80044cc:	f043 0302 	orr.w	r3, r3, #2
 80044d0:	9207      	str	r2, [sp, #28]
 80044d2:	9304      	str	r3, [sp, #16]
 80044d4:	783b      	ldrb	r3, [r7, #0]
 80044d6:	2b2e      	cmp	r3, #46	; 0x2e
 80044d8:	d10d      	bne.n	80044f6 <_svfiprintf_r+0x122>
 80044da:	787b      	ldrb	r3, [r7, #1]
 80044dc:	1c79      	adds	r1, r7, #1
 80044de:	2b2a      	cmp	r3, #42	; 0x2a
 80044e0:	d132      	bne.n	8004548 <_svfiprintf_r+0x174>
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	3702      	adds	r7, #2
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	9203      	str	r2, [sp, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bfb8      	it	lt
 80044f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044f4:	9305      	str	r3, [sp, #20]
 80044f6:	4c2d      	ldr	r4, [pc, #180]	; (80045ac <_svfiprintf_r+0x1d8>)
 80044f8:	2203      	movs	r2, #3
 80044fa:	7839      	ldrb	r1, [r7, #0]
 80044fc:	4620      	mov	r0, r4
 80044fe:	f000 f9f5 	bl	80048ec <memchr>
 8004502:	b138      	cbz	r0, 8004514 <_svfiprintf_r+0x140>
 8004504:	2340      	movs	r3, #64	; 0x40
 8004506:	1b00      	subs	r0, r0, r4
 8004508:	fa03 f000 	lsl.w	r0, r3, r0
 800450c:	9b04      	ldr	r3, [sp, #16]
 800450e:	3701      	adds	r7, #1
 8004510:	4303      	orrs	r3, r0
 8004512:	9304      	str	r3, [sp, #16]
 8004514:	7839      	ldrb	r1, [r7, #0]
 8004516:	2206      	movs	r2, #6
 8004518:	4825      	ldr	r0, [pc, #148]	; (80045b0 <_svfiprintf_r+0x1dc>)
 800451a:	1c7e      	adds	r6, r7, #1
 800451c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004520:	f000 f9e4 	bl	80048ec <memchr>
 8004524:	2800      	cmp	r0, #0
 8004526:	d035      	beq.n	8004594 <_svfiprintf_r+0x1c0>
 8004528:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <_svfiprintf_r+0x1e0>)
 800452a:	b9fb      	cbnz	r3, 800456c <_svfiprintf_r+0x198>
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	3307      	adds	r3, #7
 8004530:	f023 0307 	bic.w	r3, r3, #7
 8004534:	3308      	adds	r3, #8
 8004536:	9303      	str	r3, [sp, #12]
 8004538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800453a:	444b      	add	r3, r9
 800453c:	9309      	str	r3, [sp, #36]	; 0x24
 800453e:	e76d      	b.n	800441c <_svfiprintf_r+0x48>
 8004540:	fb00 3202 	mla	r2, r0, r2, r3
 8004544:	2101      	movs	r1, #1
 8004546:	e7a4      	b.n	8004492 <_svfiprintf_r+0xbe>
 8004548:	2300      	movs	r3, #0
 800454a:	240a      	movs	r4, #10
 800454c:	4618      	mov	r0, r3
 800454e:	9305      	str	r3, [sp, #20]
 8004550:	460f      	mov	r7, r1
 8004552:	783a      	ldrb	r2, [r7, #0]
 8004554:	3101      	adds	r1, #1
 8004556:	3a30      	subs	r2, #48	; 0x30
 8004558:	2a09      	cmp	r2, #9
 800455a:	d903      	bls.n	8004564 <_svfiprintf_r+0x190>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ca      	beq.n	80044f6 <_svfiprintf_r+0x122>
 8004560:	9005      	str	r0, [sp, #20]
 8004562:	e7c8      	b.n	80044f6 <_svfiprintf_r+0x122>
 8004564:	fb04 2000 	mla	r0, r4, r0, r2
 8004568:	2301      	movs	r3, #1
 800456a:	e7f1      	b.n	8004550 <_svfiprintf_r+0x17c>
 800456c:	ab03      	add	r3, sp, #12
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	462a      	mov	r2, r5
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <_svfiprintf_r+0x1e4>)
 8004574:	a904      	add	r1, sp, #16
 8004576:	4640      	mov	r0, r8
 8004578:	f3af 8000 	nop.w
 800457c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004580:	4681      	mov	r9, r0
 8004582:	d1d9      	bne.n	8004538 <_svfiprintf_r+0x164>
 8004584:	89ab      	ldrh	r3, [r5, #12]
 8004586:	065b      	lsls	r3, r3, #25
 8004588:	f53f af39 	bmi.w	80043fe <_svfiprintf_r+0x2a>
 800458c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800458e:	b01d      	add	sp, #116	; 0x74
 8004590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004594:	ab03      	add	r3, sp, #12
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	462a      	mov	r2, r5
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <_svfiprintf_r+0x1e4>)
 800459c:	a904      	add	r1, sp, #16
 800459e:	4640      	mov	r0, r8
 80045a0:	f000 f884 	bl	80046ac <_printf_i>
 80045a4:	e7ea      	b.n	800457c <_svfiprintf_r+0x1a8>
 80045a6:	bf00      	nop
 80045a8:	08004d88 	.word	0x08004d88
 80045ac:	08004d8e 	.word	0x08004d8e
 80045b0:	08004d92 	.word	0x08004d92
 80045b4:	00000000 	.word	0x00000000
 80045b8:	0800431d 	.word	0x0800431d

080045bc <_printf_common>:
 80045bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	4691      	mov	r9, r2
 80045c2:	461f      	mov	r7, r3
 80045c4:	688a      	ldr	r2, [r1, #8]
 80045c6:	690b      	ldr	r3, [r1, #16]
 80045c8:	4606      	mov	r6, r0
 80045ca:	4293      	cmp	r3, r2
 80045cc:	bfb8      	it	lt
 80045ce:	4613      	movlt	r3, r2
 80045d0:	f8c9 3000 	str.w	r3, [r9]
 80045d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045d8:	460c      	mov	r4, r1
 80045da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045de:	b112      	cbz	r2, 80045e6 <_printf_common+0x2a>
 80045e0:	3301      	adds	r3, #1
 80045e2:	f8c9 3000 	str.w	r3, [r9]
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	0699      	lsls	r1, r3, #26
 80045ea:	bf42      	ittt	mi
 80045ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045f0:	3302      	addmi	r3, #2
 80045f2:	f8c9 3000 	strmi.w	r3, [r9]
 80045f6:	6825      	ldr	r5, [r4, #0]
 80045f8:	f015 0506 	ands.w	r5, r5, #6
 80045fc:	d107      	bne.n	800460e <_printf_common+0x52>
 80045fe:	f104 0a19 	add.w	sl, r4, #25
 8004602:	68e3      	ldr	r3, [r4, #12]
 8004604:	f8d9 2000 	ldr.w	r2, [r9]
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	429d      	cmp	r5, r3
 800460c:	db2a      	blt.n	8004664 <_printf_common+0xa8>
 800460e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	3300      	adds	r3, #0
 8004616:	bf18      	it	ne
 8004618:	2301      	movne	r3, #1
 800461a:	0692      	lsls	r2, r2, #26
 800461c:	d42f      	bmi.n	800467e <_printf_common+0xc2>
 800461e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004622:	4639      	mov	r1, r7
 8004624:	4630      	mov	r0, r6
 8004626:	47c0      	blx	r8
 8004628:	3001      	adds	r0, #1
 800462a:	d022      	beq.n	8004672 <_printf_common+0xb6>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	68e5      	ldr	r5, [r4, #12]
 8004630:	f003 0306 	and.w	r3, r3, #6
 8004634:	2b04      	cmp	r3, #4
 8004636:	bf18      	it	ne
 8004638:	2500      	movne	r5, #0
 800463a:	f8d9 2000 	ldr.w	r2, [r9]
 800463e:	f04f 0900 	mov.w	r9, #0
 8004642:	bf08      	it	eq
 8004644:	1aad      	subeq	r5, r5, r2
 8004646:	68a3      	ldr	r3, [r4, #8]
 8004648:	6922      	ldr	r2, [r4, #16]
 800464a:	bf08      	it	eq
 800464c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004650:	4293      	cmp	r3, r2
 8004652:	bfc4      	itt	gt
 8004654:	1a9b      	subgt	r3, r3, r2
 8004656:	18ed      	addgt	r5, r5, r3
 8004658:	341a      	adds	r4, #26
 800465a:	454d      	cmp	r5, r9
 800465c:	d11b      	bne.n	8004696 <_printf_common+0xda>
 800465e:	2000      	movs	r0, #0
 8004660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004664:	2301      	movs	r3, #1
 8004666:	4652      	mov	r2, sl
 8004668:	4639      	mov	r1, r7
 800466a:	4630      	mov	r0, r6
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d103      	bne.n	800467a <_printf_common+0xbe>
 8004672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467a:	3501      	adds	r5, #1
 800467c:	e7c1      	b.n	8004602 <_printf_common+0x46>
 800467e:	2030      	movs	r0, #48	; 0x30
 8004680:	18e1      	adds	r1, r4, r3
 8004682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800468c:	4422      	add	r2, r4
 800468e:	3302      	adds	r3, #2
 8004690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004694:	e7c3      	b.n	800461e <_printf_common+0x62>
 8004696:	2301      	movs	r3, #1
 8004698:	4622      	mov	r2, r4
 800469a:	4639      	mov	r1, r7
 800469c:	4630      	mov	r0, r6
 800469e:	47c0      	blx	r8
 80046a0:	3001      	adds	r0, #1
 80046a2:	d0e6      	beq.n	8004672 <_printf_common+0xb6>
 80046a4:	f109 0901 	add.w	r9, r9, #1
 80046a8:	e7d7      	b.n	800465a <_printf_common+0x9e>
	...

080046ac <_printf_i>:
 80046ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046b0:	4617      	mov	r7, r2
 80046b2:	7e0a      	ldrb	r2, [r1, #24]
 80046b4:	b085      	sub	sp, #20
 80046b6:	2a6e      	cmp	r2, #110	; 0x6e
 80046b8:	4698      	mov	r8, r3
 80046ba:	4606      	mov	r6, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046c0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80046c4:	f000 80bc 	beq.w	8004840 <_printf_i+0x194>
 80046c8:	d81a      	bhi.n	8004700 <_printf_i+0x54>
 80046ca:	2a63      	cmp	r2, #99	; 0x63
 80046cc:	d02e      	beq.n	800472c <_printf_i+0x80>
 80046ce:	d80a      	bhi.n	80046e6 <_printf_i+0x3a>
 80046d0:	2a00      	cmp	r2, #0
 80046d2:	f000 80c8 	beq.w	8004866 <_printf_i+0x1ba>
 80046d6:	2a58      	cmp	r2, #88	; 0x58
 80046d8:	f000 808a 	beq.w	80047f0 <_printf_i+0x144>
 80046dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80046e4:	e02a      	b.n	800473c <_printf_i+0x90>
 80046e6:	2a64      	cmp	r2, #100	; 0x64
 80046e8:	d001      	beq.n	80046ee <_printf_i+0x42>
 80046ea:	2a69      	cmp	r2, #105	; 0x69
 80046ec:	d1f6      	bne.n	80046dc <_printf_i+0x30>
 80046ee:	6821      	ldr	r1, [r4, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046f6:	d023      	beq.n	8004740 <_printf_i+0x94>
 80046f8:	1d11      	adds	r1, r2, #4
 80046fa:	6019      	str	r1, [r3, #0]
 80046fc:	6813      	ldr	r3, [r2, #0]
 80046fe:	e027      	b.n	8004750 <_printf_i+0xa4>
 8004700:	2a73      	cmp	r2, #115	; 0x73
 8004702:	f000 80b4 	beq.w	800486e <_printf_i+0x1c2>
 8004706:	d808      	bhi.n	800471a <_printf_i+0x6e>
 8004708:	2a6f      	cmp	r2, #111	; 0x6f
 800470a:	d02a      	beq.n	8004762 <_printf_i+0xb6>
 800470c:	2a70      	cmp	r2, #112	; 0x70
 800470e:	d1e5      	bne.n	80046dc <_printf_i+0x30>
 8004710:	680a      	ldr	r2, [r1, #0]
 8004712:	f042 0220 	orr.w	r2, r2, #32
 8004716:	600a      	str	r2, [r1, #0]
 8004718:	e003      	b.n	8004722 <_printf_i+0x76>
 800471a:	2a75      	cmp	r2, #117	; 0x75
 800471c:	d021      	beq.n	8004762 <_printf_i+0xb6>
 800471e:	2a78      	cmp	r2, #120	; 0x78
 8004720:	d1dc      	bne.n	80046dc <_printf_i+0x30>
 8004722:	2278      	movs	r2, #120	; 0x78
 8004724:	496f      	ldr	r1, [pc, #444]	; (80048e4 <_printf_i+0x238>)
 8004726:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800472a:	e064      	b.n	80047f6 <_printf_i+0x14a>
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004732:	1d11      	adds	r1, r2, #4
 8004734:	6019      	str	r1, [r3, #0]
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800473c:	2301      	movs	r3, #1
 800473e:	e0a3      	b.n	8004888 <_printf_i+0x1dc>
 8004740:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004744:	f102 0104 	add.w	r1, r2, #4
 8004748:	6019      	str	r1, [r3, #0]
 800474a:	d0d7      	beq.n	80046fc <_printf_i+0x50>
 800474c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004750:	2b00      	cmp	r3, #0
 8004752:	da03      	bge.n	800475c <_printf_i+0xb0>
 8004754:	222d      	movs	r2, #45	; 0x2d
 8004756:	425b      	negs	r3, r3
 8004758:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800475c:	4962      	ldr	r1, [pc, #392]	; (80048e8 <_printf_i+0x23c>)
 800475e:	220a      	movs	r2, #10
 8004760:	e017      	b.n	8004792 <_printf_i+0xe6>
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	f010 0f80 	tst.w	r0, #128	; 0x80
 800476a:	d003      	beq.n	8004774 <_printf_i+0xc8>
 800476c:	1d08      	adds	r0, r1, #4
 800476e:	6018      	str	r0, [r3, #0]
 8004770:	680b      	ldr	r3, [r1, #0]
 8004772:	e006      	b.n	8004782 <_printf_i+0xd6>
 8004774:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004778:	f101 0004 	add.w	r0, r1, #4
 800477c:	6018      	str	r0, [r3, #0]
 800477e:	d0f7      	beq.n	8004770 <_printf_i+0xc4>
 8004780:	880b      	ldrh	r3, [r1, #0]
 8004782:	2a6f      	cmp	r2, #111	; 0x6f
 8004784:	bf14      	ite	ne
 8004786:	220a      	movne	r2, #10
 8004788:	2208      	moveq	r2, #8
 800478a:	4957      	ldr	r1, [pc, #348]	; (80048e8 <_printf_i+0x23c>)
 800478c:	2000      	movs	r0, #0
 800478e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004792:	6865      	ldr	r5, [r4, #4]
 8004794:	2d00      	cmp	r5, #0
 8004796:	60a5      	str	r5, [r4, #8]
 8004798:	f2c0 809c 	blt.w	80048d4 <_printf_i+0x228>
 800479c:	6820      	ldr	r0, [r4, #0]
 800479e:	f020 0004 	bic.w	r0, r0, #4
 80047a2:	6020      	str	r0, [r4, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d13f      	bne.n	8004828 <_printf_i+0x17c>
 80047a8:	2d00      	cmp	r5, #0
 80047aa:	f040 8095 	bne.w	80048d8 <_printf_i+0x22c>
 80047ae:	4675      	mov	r5, lr
 80047b0:	2a08      	cmp	r2, #8
 80047b2:	d10b      	bne.n	80047cc <_printf_i+0x120>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	07da      	lsls	r2, r3, #31
 80047b8:	d508      	bpl.n	80047cc <_printf_i+0x120>
 80047ba:	6923      	ldr	r3, [r4, #16]
 80047bc:	6862      	ldr	r2, [r4, #4]
 80047be:	429a      	cmp	r2, r3
 80047c0:	bfde      	ittt	le
 80047c2:	2330      	movle	r3, #48	; 0x30
 80047c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047cc:	ebae 0305 	sub.w	r3, lr, r5
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	f8cd 8000 	str.w	r8, [sp]
 80047d6:	463b      	mov	r3, r7
 80047d8:	aa03      	add	r2, sp, #12
 80047da:	4621      	mov	r1, r4
 80047dc:	4630      	mov	r0, r6
 80047de:	f7ff feed 	bl	80045bc <_printf_common>
 80047e2:	3001      	adds	r0, #1
 80047e4:	d155      	bne.n	8004892 <_printf_i+0x1e6>
 80047e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ea:	b005      	add	sp, #20
 80047ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047f0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80047f4:	493c      	ldr	r1, [pc, #240]	; (80048e8 <_printf_i+0x23c>)
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047fe:	f100 0504 	add.w	r5, r0, #4
 8004802:	601d      	str	r5, [r3, #0]
 8004804:	d001      	beq.n	800480a <_printf_i+0x15e>
 8004806:	6803      	ldr	r3, [r0, #0]
 8004808:	e002      	b.n	8004810 <_printf_i+0x164>
 800480a:	0655      	lsls	r5, r2, #25
 800480c:	d5fb      	bpl.n	8004806 <_printf_i+0x15a>
 800480e:	8803      	ldrh	r3, [r0, #0]
 8004810:	07d0      	lsls	r0, r2, #31
 8004812:	bf44      	itt	mi
 8004814:	f042 0220 	orrmi.w	r2, r2, #32
 8004818:	6022      	strmi	r2, [r4, #0]
 800481a:	b91b      	cbnz	r3, 8004824 <_printf_i+0x178>
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	f022 0220 	bic.w	r2, r2, #32
 8004822:	6022      	str	r2, [r4, #0]
 8004824:	2210      	movs	r2, #16
 8004826:	e7b1      	b.n	800478c <_printf_i+0xe0>
 8004828:	4675      	mov	r5, lr
 800482a:	fbb3 f0f2 	udiv	r0, r3, r2
 800482e:	fb02 3310 	mls	r3, r2, r0, r3
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004838:	4603      	mov	r3, r0
 800483a:	2800      	cmp	r0, #0
 800483c:	d1f5      	bne.n	800482a <_printf_i+0x17e>
 800483e:	e7b7      	b.n	80047b0 <_printf_i+0x104>
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004848:	6949      	ldr	r1, [r1, #20]
 800484a:	d004      	beq.n	8004856 <_printf_i+0x1aa>
 800484c:	1d10      	adds	r0, r2, #4
 800484e:	6018      	str	r0, [r3, #0]
 8004850:	6813      	ldr	r3, [r2, #0]
 8004852:	6019      	str	r1, [r3, #0]
 8004854:	e007      	b.n	8004866 <_printf_i+0x1ba>
 8004856:	f010 0f40 	tst.w	r0, #64	; 0x40
 800485a:	f102 0004 	add.w	r0, r2, #4
 800485e:	6018      	str	r0, [r3, #0]
 8004860:	6813      	ldr	r3, [r2, #0]
 8004862:	d0f6      	beq.n	8004852 <_printf_i+0x1a6>
 8004864:	8019      	strh	r1, [r3, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	4675      	mov	r5, lr
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	e7b1      	b.n	80047d2 <_printf_i+0x126>
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	1d11      	adds	r1, r2, #4
 8004872:	6019      	str	r1, [r3, #0]
 8004874:	6815      	ldr	r5, [r2, #0]
 8004876:	2100      	movs	r1, #0
 8004878:	6862      	ldr	r2, [r4, #4]
 800487a:	4628      	mov	r0, r5
 800487c:	f000 f836 	bl	80048ec <memchr>
 8004880:	b108      	cbz	r0, 8004886 <_printf_i+0x1da>
 8004882:	1b40      	subs	r0, r0, r5
 8004884:	6060      	str	r0, [r4, #4]
 8004886:	6863      	ldr	r3, [r4, #4]
 8004888:	6123      	str	r3, [r4, #16]
 800488a:	2300      	movs	r3, #0
 800488c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004890:	e79f      	b.n	80047d2 <_printf_i+0x126>
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	462a      	mov	r2, r5
 8004896:	4639      	mov	r1, r7
 8004898:	4630      	mov	r0, r6
 800489a:	47c0      	blx	r8
 800489c:	3001      	adds	r0, #1
 800489e:	d0a2      	beq.n	80047e6 <_printf_i+0x13a>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	079b      	lsls	r3, r3, #30
 80048a4:	d507      	bpl.n	80048b6 <_printf_i+0x20a>
 80048a6:	2500      	movs	r5, #0
 80048a8:	f104 0919 	add.w	r9, r4, #25
 80048ac:	68e3      	ldr	r3, [r4, #12]
 80048ae:	9a03      	ldr	r2, [sp, #12]
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	429d      	cmp	r5, r3
 80048b4:	db05      	blt.n	80048c2 <_printf_i+0x216>
 80048b6:	68e0      	ldr	r0, [r4, #12]
 80048b8:	9b03      	ldr	r3, [sp, #12]
 80048ba:	4298      	cmp	r0, r3
 80048bc:	bfb8      	it	lt
 80048be:	4618      	movlt	r0, r3
 80048c0:	e793      	b.n	80047ea <_printf_i+0x13e>
 80048c2:	2301      	movs	r3, #1
 80048c4:	464a      	mov	r2, r9
 80048c6:	4639      	mov	r1, r7
 80048c8:	4630      	mov	r0, r6
 80048ca:	47c0      	blx	r8
 80048cc:	3001      	adds	r0, #1
 80048ce:	d08a      	beq.n	80047e6 <_printf_i+0x13a>
 80048d0:	3501      	adds	r5, #1
 80048d2:	e7eb      	b.n	80048ac <_printf_i+0x200>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1a7      	bne.n	8004828 <_printf_i+0x17c>
 80048d8:	780b      	ldrb	r3, [r1, #0]
 80048da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e2:	e765      	b.n	80047b0 <_printf_i+0x104>
 80048e4:	08004daa 	.word	0x08004daa
 80048e8:	08004d99 	.word	0x08004d99

080048ec <memchr>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	b2c9      	uxtb	r1, r1
 80048f0:	4402      	add	r2, r0
 80048f2:	4290      	cmp	r0, r2
 80048f4:	4603      	mov	r3, r0
 80048f6:	d101      	bne.n	80048fc <memchr+0x10>
 80048f8:	2000      	movs	r0, #0
 80048fa:	bd10      	pop	{r4, pc}
 80048fc:	781c      	ldrb	r4, [r3, #0]
 80048fe:	3001      	adds	r0, #1
 8004900:	428c      	cmp	r4, r1
 8004902:	d1f6      	bne.n	80048f2 <memchr+0x6>
 8004904:	4618      	mov	r0, r3
 8004906:	bd10      	pop	{r4, pc}

08004908 <memmove>:
 8004908:	4288      	cmp	r0, r1
 800490a:	b510      	push	{r4, lr}
 800490c:	eb01 0302 	add.w	r3, r1, r2
 8004910:	d803      	bhi.n	800491a <memmove+0x12>
 8004912:	1e42      	subs	r2, r0, #1
 8004914:	4299      	cmp	r1, r3
 8004916:	d10c      	bne.n	8004932 <memmove+0x2a>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	4298      	cmp	r0, r3
 800491c:	d2f9      	bcs.n	8004912 <memmove+0xa>
 800491e:	1881      	adds	r1, r0, r2
 8004920:	1ad2      	subs	r2, r2, r3
 8004922:	42d3      	cmn	r3, r2
 8004924:	d100      	bne.n	8004928 <memmove+0x20>
 8004926:	bd10      	pop	{r4, pc}
 8004928:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800492c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004930:	e7f7      	b.n	8004922 <memmove+0x1a>
 8004932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004936:	f802 4f01 	strb.w	r4, [r2, #1]!
 800493a:	e7eb      	b.n	8004914 <memmove+0xc>

0800493c <_free_r>:
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	4605      	mov	r5, r0
 8004940:	2900      	cmp	r1, #0
 8004942:	d043      	beq.n	80049cc <_free_r+0x90>
 8004944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004948:	1f0c      	subs	r4, r1, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfb8      	it	lt
 800494e:	18e4      	addlt	r4, r4, r3
 8004950:	f000 f8d4 	bl	8004afc <__malloc_lock>
 8004954:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <_free_r+0x94>)
 8004956:	6813      	ldr	r3, [r2, #0]
 8004958:	4610      	mov	r0, r2
 800495a:	b933      	cbnz	r3, 800496a <_free_r+0x2e>
 800495c:	6063      	str	r3, [r4, #4]
 800495e:	6014      	str	r4, [r2, #0]
 8004960:	4628      	mov	r0, r5
 8004962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004966:	f000 b8ca 	b.w	8004afe <__malloc_unlock>
 800496a:	42a3      	cmp	r3, r4
 800496c:	d90b      	bls.n	8004986 <_free_r+0x4a>
 800496e:	6821      	ldr	r1, [r4, #0]
 8004970:	1862      	adds	r2, r4, r1
 8004972:	4293      	cmp	r3, r2
 8004974:	bf01      	itttt	eq
 8004976:	681a      	ldreq	r2, [r3, #0]
 8004978:	685b      	ldreq	r3, [r3, #4]
 800497a:	1852      	addeq	r2, r2, r1
 800497c:	6022      	streq	r2, [r4, #0]
 800497e:	6063      	str	r3, [r4, #4]
 8004980:	6004      	str	r4, [r0, #0]
 8004982:	e7ed      	b.n	8004960 <_free_r+0x24>
 8004984:	4613      	mov	r3, r2
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	b10a      	cbz	r2, 800498e <_free_r+0x52>
 800498a:	42a2      	cmp	r2, r4
 800498c:	d9fa      	bls.n	8004984 <_free_r+0x48>
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	1858      	adds	r0, r3, r1
 8004992:	42a0      	cmp	r0, r4
 8004994:	d10b      	bne.n	80049ae <_free_r+0x72>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	4401      	add	r1, r0
 800499a:	1858      	adds	r0, r3, r1
 800499c:	4282      	cmp	r2, r0
 800499e:	6019      	str	r1, [r3, #0]
 80049a0:	d1de      	bne.n	8004960 <_free_r+0x24>
 80049a2:	6810      	ldr	r0, [r2, #0]
 80049a4:	6852      	ldr	r2, [r2, #4]
 80049a6:	4401      	add	r1, r0
 80049a8:	6019      	str	r1, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	e7d8      	b.n	8004960 <_free_r+0x24>
 80049ae:	d902      	bls.n	80049b6 <_free_r+0x7a>
 80049b0:	230c      	movs	r3, #12
 80049b2:	602b      	str	r3, [r5, #0]
 80049b4:	e7d4      	b.n	8004960 <_free_r+0x24>
 80049b6:	6820      	ldr	r0, [r4, #0]
 80049b8:	1821      	adds	r1, r4, r0
 80049ba:	428a      	cmp	r2, r1
 80049bc:	bf01      	itttt	eq
 80049be:	6811      	ldreq	r1, [r2, #0]
 80049c0:	6852      	ldreq	r2, [r2, #4]
 80049c2:	1809      	addeq	r1, r1, r0
 80049c4:	6021      	streq	r1, [r4, #0]
 80049c6:	6062      	str	r2, [r4, #4]
 80049c8:	605c      	str	r4, [r3, #4]
 80049ca:	e7c9      	b.n	8004960 <_free_r+0x24>
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
 80049ce:	bf00      	nop
 80049d0:	20003dd8 	.word	0x20003dd8

080049d4 <_malloc_r>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	1ccd      	adds	r5, r1, #3
 80049d8:	f025 0503 	bic.w	r5, r5, #3
 80049dc:	3508      	adds	r5, #8
 80049de:	2d0c      	cmp	r5, #12
 80049e0:	bf38      	it	cc
 80049e2:	250c      	movcc	r5, #12
 80049e4:	2d00      	cmp	r5, #0
 80049e6:	4606      	mov	r6, r0
 80049e8:	db01      	blt.n	80049ee <_malloc_r+0x1a>
 80049ea:	42a9      	cmp	r1, r5
 80049ec:	d903      	bls.n	80049f6 <_malloc_r+0x22>
 80049ee:	230c      	movs	r3, #12
 80049f0:	6033      	str	r3, [r6, #0]
 80049f2:	2000      	movs	r0, #0
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	f000 f881 	bl	8004afc <__malloc_lock>
 80049fa:	4a23      	ldr	r2, [pc, #140]	; (8004a88 <_malloc_r+0xb4>)
 80049fc:	6814      	ldr	r4, [r2, #0]
 80049fe:	4621      	mov	r1, r4
 8004a00:	b991      	cbnz	r1, 8004a28 <_malloc_r+0x54>
 8004a02:	4c22      	ldr	r4, [pc, #136]	; (8004a8c <_malloc_r+0xb8>)
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	b91b      	cbnz	r3, 8004a10 <_malloc_r+0x3c>
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f000 f867 	bl	8004adc <_sbrk_r>
 8004a0e:	6020      	str	r0, [r4, #0]
 8004a10:	4629      	mov	r1, r5
 8004a12:	4630      	mov	r0, r6
 8004a14:	f000 f862 	bl	8004adc <_sbrk_r>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d126      	bne.n	8004a6a <_malloc_r+0x96>
 8004a1c:	230c      	movs	r3, #12
 8004a1e:	4630      	mov	r0, r6
 8004a20:	6033      	str	r3, [r6, #0]
 8004a22:	f000 f86c 	bl	8004afe <__malloc_unlock>
 8004a26:	e7e4      	b.n	80049f2 <_malloc_r+0x1e>
 8004a28:	680b      	ldr	r3, [r1, #0]
 8004a2a:	1b5b      	subs	r3, r3, r5
 8004a2c:	d41a      	bmi.n	8004a64 <_malloc_r+0x90>
 8004a2e:	2b0b      	cmp	r3, #11
 8004a30:	d90f      	bls.n	8004a52 <_malloc_r+0x7e>
 8004a32:	600b      	str	r3, [r1, #0]
 8004a34:	18cc      	adds	r4, r1, r3
 8004a36:	50cd      	str	r5, [r1, r3]
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f000 f860 	bl	8004afe <__malloc_unlock>
 8004a3e:	f104 000b 	add.w	r0, r4, #11
 8004a42:	1d23      	adds	r3, r4, #4
 8004a44:	f020 0007 	bic.w	r0, r0, #7
 8004a48:	1ac3      	subs	r3, r0, r3
 8004a4a:	d01b      	beq.n	8004a84 <_malloc_r+0xb0>
 8004a4c:	425a      	negs	r2, r3
 8004a4e:	50e2      	str	r2, [r4, r3]
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	428c      	cmp	r4, r1
 8004a54:	bf0b      	itete	eq
 8004a56:	6863      	ldreq	r3, [r4, #4]
 8004a58:	684b      	ldrne	r3, [r1, #4]
 8004a5a:	6013      	streq	r3, [r2, #0]
 8004a5c:	6063      	strne	r3, [r4, #4]
 8004a5e:	bf18      	it	ne
 8004a60:	460c      	movne	r4, r1
 8004a62:	e7e9      	b.n	8004a38 <_malloc_r+0x64>
 8004a64:	460c      	mov	r4, r1
 8004a66:	6849      	ldr	r1, [r1, #4]
 8004a68:	e7ca      	b.n	8004a00 <_malloc_r+0x2c>
 8004a6a:	1cc4      	adds	r4, r0, #3
 8004a6c:	f024 0403 	bic.w	r4, r4, #3
 8004a70:	42a0      	cmp	r0, r4
 8004a72:	d005      	beq.n	8004a80 <_malloc_r+0xac>
 8004a74:	1a21      	subs	r1, r4, r0
 8004a76:	4630      	mov	r0, r6
 8004a78:	f000 f830 	bl	8004adc <_sbrk_r>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d0cd      	beq.n	8004a1c <_malloc_r+0x48>
 8004a80:	6025      	str	r5, [r4, #0]
 8004a82:	e7d9      	b.n	8004a38 <_malloc_r+0x64>
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	bf00      	nop
 8004a88:	20003dd8 	.word	0x20003dd8
 8004a8c:	20003ddc 	.word	0x20003ddc

08004a90 <_realloc_r>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	4607      	mov	r7, r0
 8004a94:	4614      	mov	r4, r2
 8004a96:	460e      	mov	r6, r1
 8004a98:	b921      	cbnz	r1, 8004aa4 <_realloc_r+0x14>
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004aa0:	f7ff bf98 	b.w	80049d4 <_malloc_r>
 8004aa4:	b922      	cbnz	r2, 8004ab0 <_realloc_r+0x20>
 8004aa6:	f7ff ff49 	bl	800493c <_free_r>
 8004aaa:	4625      	mov	r5, r4
 8004aac:	4628      	mov	r0, r5
 8004aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab0:	f000 f826 	bl	8004b00 <_malloc_usable_size_r>
 8004ab4:	4284      	cmp	r4, r0
 8004ab6:	d90f      	bls.n	8004ad8 <_realloc_r+0x48>
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4638      	mov	r0, r7
 8004abc:	f7ff ff8a 	bl	80049d4 <_malloc_r>
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0f2      	beq.n	8004aac <_realloc_r+0x1c>
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4622      	mov	r2, r4
 8004aca:	f7ff fbef 	bl	80042ac <memcpy>
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f7ff ff33 	bl	800493c <_free_r>
 8004ad6:	e7e9      	b.n	8004aac <_realloc_r+0x1c>
 8004ad8:	4635      	mov	r5, r6
 8004ada:	e7e7      	b.n	8004aac <_realloc_r+0x1c>

08004adc <_sbrk_r>:
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	2300      	movs	r3, #0
 8004ae0:	4c05      	ldr	r4, [pc, #20]	; (8004af8 <_sbrk_r+0x1c>)
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	f000 f814 	bl	8004b14 <_sbrk>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_sbrk_r+0x1a>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_sbrk_r+0x1a>
 8004af4:	602b      	str	r3, [r5, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	20003f44 	.word	0x20003f44

08004afc <__malloc_lock>:
 8004afc:	4770      	bx	lr

08004afe <__malloc_unlock>:
 8004afe:	4770      	bx	lr

08004b00 <_malloc_usable_size_r>:
 8004b00:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f1a0 0004 	sub.w	r0, r0, #4
 8004b0a:	bfbc      	itt	lt
 8004b0c:	580b      	ldrlt	r3, [r1, r0]
 8004b0e:	18c0      	addlt	r0, r0, r3
 8004b10:	4770      	bx	lr
	...

08004b14 <_sbrk>:
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <_sbrk+0x14>)
 8004b16:	4602      	mov	r2, r0
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	b909      	cbnz	r1, 8004b20 <_sbrk+0xc>
 8004b1c:	4903      	ldr	r1, [pc, #12]	; (8004b2c <_sbrk+0x18>)
 8004b1e:	6019      	str	r1, [r3, #0]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	4402      	add	r2, r0
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	4770      	bx	lr
 8004b28:	20003de0 	.word	0x20003de0
 8004b2c:	20003f48 	.word	0x20003f48

08004b30 <_init>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr

08004b3c <_fini>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr
